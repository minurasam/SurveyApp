"use strict"; // Copyright 2018 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Gaxios = void 0;

var extend_1 = __importDefault(require("extend"));

var node_fetch_1 = __importDefault(require("node-fetch"));

var querystring_1 = __importDefault(require("querystring"));

var is_stream_1 = __importDefault(require("is-stream"));

var common_1 = require("./common");

var retry_1 = require("./retry");
/* eslint-disable @typescript-eslint/no-explicit-any */


var fetch = hasFetch() ? window.fetch : node_fetch_1["default"];

function hasWindow() {
  return typeof window !== 'undefined' && !!window;
}

function hasFetch() {
  return hasWindow() && !!window.fetch;
}

function hasBuffer() {
  return typeof Buffer !== 'undefined';
}

function hasHeader(options, header) {
  return !!getHeader(options, header);
}

function getHeader(options, header) {
  header = header.toLowerCase();

  for (var _i = 0, _Object$keys = Object.keys((options === null || options === void 0 ? void 0 : options.headers) || {}); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];

    if (header === key.toLowerCase()) {
      return options.headers[key];
    }
  }

  return undefined;
}

var HttpsProxyAgent;

function loadProxy() {
  var proxy = process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy;

  if (proxy) {
    HttpsProxyAgent = require('https-proxy-agent');
  }

  return proxy;
}

loadProxy();

function skipProxy(url) {
  var _a;

  var noProxyEnv = (_a = process.env.NO_PROXY) !== null && _a !== void 0 ? _a : process.env.no_proxy;

  if (!noProxyEnv) {
    return false;
  }

  var noProxyUrls = noProxyEnv.split(',');
  var parsedURL = new URL(url);
  return !!noProxyUrls.find(function (url) {
    if (url.startsWith('*.') || url.startsWith('.')) {
      url = url.replace('*', '');
      return parsedURL.hostname.endsWith(url);
    } else {
      return url === parsedURL.origin || url === parsedURL.hostname;
    }
  });
} // Figure out if we should be using a proxy. Only if it's required, load
// the https-proxy-agent module as it adds startup cost.


function getProxy(url) {
  // If there is a match between the no_proxy env variables and the url, then do not proxy
  if (skipProxy(url)) {
    return undefined; // If there is not a match between the no_proxy env variables and the url, check to see if there should be a proxy
  } else {
    return loadProxy();
  }
}

var Gaxios =
/*#__PURE__*/
function () {
  /**
   * The Gaxios class is responsible for making HTTP requests.
   * @param defaults The default set of options to be used for this instance.
   */
  function Gaxios(defaults) {
    _classCallCheck(this, Gaxios);

    this.agentCache = new Map();
    this.defaults = defaults || {};
  }
  /**
   * Perform an HTTP request with the given options.
   * @param opts Set of HTTP options that will be used for this HTTP request.
   */


  _createClass(Gaxios, [{
    key: "request",
    value: function request() {
      var opts,
          _args = arguments;
      return regeneratorRuntime.async(function request$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              opts = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
              opts = this.validateOpts(opts);
              return _context.abrupt("return", this._request(opts));

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "_defaultAdapter",
    value: function _defaultAdapter(opts) {
      var fetchImpl, res, data;
      return regeneratorRuntime.async(function _defaultAdapter$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              fetchImpl = opts.fetchImplementation || fetch;
              _context2.next = 3;
              return regeneratorRuntime.awrap(fetchImpl(opts.url, opts));

            case 3:
              res = _context2.sent;
              _context2.next = 6;
              return regeneratorRuntime.awrap(this.getResponseData(opts, res));

            case 6:
              data = _context2.sent;
              return _context2.abrupt("return", this.translateResponse(opts, res, data));

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
    /**
     * Internal, retryable version of the `request` method.
     * @param opts Set of HTTP options that will be used for this HTTP request.
     */

  }, {
    key: "_request",
    value: function _request() {
      var opts,
          translatedResponse,
          err,
          _ref,
          shouldRetry,
          config,
          _args3 = arguments;

      return regeneratorRuntime.async(function _request$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              opts = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
              _context3.prev = 1;

              if (!opts.adapter) {
                _context3.next = 8;
                break;
              }

              _context3.next = 5;
              return regeneratorRuntime.awrap(opts.adapter(opts, this._defaultAdapter.bind(this)));

            case 5:
              translatedResponse = _context3.sent;
              _context3.next = 11;
              break;

            case 8:
              _context3.next = 10;
              return regeneratorRuntime.awrap(this._defaultAdapter(opts));

            case 10:
              translatedResponse = _context3.sent;

            case 11:
              if (opts.validateStatus(translatedResponse.status)) {
                _context3.next = 13;
                break;
              }

              throw new common_1.GaxiosError("Request failed with status code ".concat(translatedResponse.status), opts, translatedResponse);

            case 13:
              return _context3.abrupt("return", translatedResponse);

            case 16:
              _context3.prev = 16;
              _context3.t0 = _context3["catch"](1);
              err = _context3.t0;
              err.config = opts;
              _context3.next = 22;
              return regeneratorRuntime.awrap(retry_1.getRetryConfig(_context3.t0));

            case 22:
              _ref = _context3.sent;
              shouldRetry = _ref.shouldRetry;
              config = _ref.config;

              if (!(shouldRetry && config)) {
                _context3.next = 28;
                break;
              }

              err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;
              return _context3.abrupt("return", this._request(err.config));

            case 28:
              throw err;

            case 29:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this, [[1, 16]]);
    }
  }, {
    key: "getResponseData",
    value: function getResponseData(opts, res) {
      var data;
      return regeneratorRuntime.async(function getResponseData$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.t0 = opts.responseType;
              _context4.next = _context4.t0 === 'stream' ? 3 : _context4.t0 === 'json' ? 4 : _context4.t0 === 'arraybuffer' ? 9 : _context4.t0 === 'blob' ? 10 : 11;
              break;

            case 3:
              return _context4.abrupt("return", res.body);

            case 4:
              _context4.next = 6;
              return regeneratorRuntime.awrap(res.text());

            case 6:
              data = _context4.sent;

              try {
                data = JSON.parse(data);
              } catch (_a) {// continue
              }

              return _context4.abrupt("return", data);

            case 9:
              return _context4.abrupt("return", res.arrayBuffer());

            case 10:
              return _context4.abrupt("return", res.blob());

            case 11:
              return _context4.abrupt("return", res.text());

            case 12:
            case "end":
              return _context4.stop();
          }
        }
      });
    }
    /**
     * Validates the options, and merges them with defaults.
     * @param opts The original options passed from the client.
     */

  }, {
    key: "validateOpts",
    value: function validateOpts(options) {
      var opts = extend_1["default"](true, {}, this.defaults, options);

      if (!opts.url) {
        throw new Error('URL is required.');
      } // baseUrl has been deprecated, remove in 2.0


      var baseUrl = opts.baseUrl || opts.baseURL;

      if (baseUrl) {
        opts.url = baseUrl + opts.url;
      }

      opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;

      if (opts.params && Object.keys(opts.params).length > 0) {
        var additionalQueryParams = opts.paramsSerializer(opts.params);

        if (additionalQueryParams.startsWith('?')) {
          additionalQueryParams = additionalQueryParams.slice(1);
        }

        var prefix = opts.url.includes('?') ? '&' : '?';
        opts.url = opts.url + prefix + additionalQueryParams;
      }

      if (typeof options.maxContentLength === 'number') {
        opts.size = options.maxContentLength;
      }

      if (typeof options.maxRedirects === 'number') {
        opts.follow = options.maxRedirects;
      }

      opts.headers = opts.headers || {};

      if (opts.data) {
        if (is_stream_1["default"].readable(opts.data)) {
          opts.body = opts.data;
        } else if (hasBuffer() && Buffer.isBuffer(opts.data)) {
          // Do not attempt to JSON.stringify() a Buffer:
          opts.body = opts.data;

          if (!hasHeader(opts, 'Content-Type')) {
            opts.headers['Content-Type'] = 'application/json';
          }
        } else if (_typeof(opts.data) === 'object') {
          // If www-form-urlencoded content type has been set, but data is
          // provided as an object, serialize the content using querystring:
          if (getHeader(opts, 'content-type') === 'application/x-www-form-urlencoded') {
            opts.body = opts.paramsSerializer(opts.data);
          } else {
            if (!hasHeader(opts, 'Content-Type')) {
              opts.headers['Content-Type'] = 'application/json';
            }

            opts.body = JSON.stringify(opts.data);
          }
        } else {
          opts.body = opts.data;
        }
      }

      opts.validateStatus = opts.validateStatus || this.validateStatus;
      opts.responseType = opts.responseType || 'json';

      if (!opts.headers['Accept'] && opts.responseType === 'json') {
        opts.headers['Accept'] = 'application/json';
      }

      opts.method = opts.method || 'GET';
      var proxy = getProxy(opts.url);

      if (proxy) {
        if (this.agentCache.has(proxy)) {
          opts.agent = this.agentCache.get(proxy);
        } else {
          opts.agent = new HttpsProxyAgent(proxy);
          this.agentCache.set(proxy, opts.agent);
        }
      }

      return opts;
    }
    /**
     * By default, throw for any non-2xx status code
     * @param status status code from the HTTP response
     */

  }, {
    key: "validateStatus",
    value: function validateStatus(status) {
      return status >= 200 && status < 300;
    }
    /**
     * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)
     * @param params key value pars to encode
     */

  }, {
    key: "paramsSerializer",
    value: function paramsSerializer(params) {
      return querystring_1["default"].stringify(params);
    }
  }, {
    key: "translateResponse",
    value: function translateResponse(opts, res, data) {
      // headers need to be converted from a map to an obj
      var headers = {};
      res.headers.forEach(function (value, key) {
        headers[key] = value;
      });
      return {
        config: opts,
        data: data,
        headers: headers,
        status: res.status,
        statusText: res.statusText,
        // XMLHttpRequestLike
        request: {
          responseURL: res.url
        }
      };
    }
  }]);

  return Gaxios;
}();

exports.Gaxios = Gaxios;