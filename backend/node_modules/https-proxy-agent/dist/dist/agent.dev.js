"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var net_1 = __importDefault(require("net"));

var tls_1 = __importDefault(require("tls"));

var url_1 = __importDefault(require("url"));

var assert_1 = __importDefault(require("assert"));

var debug_1 = __importDefault(require("debug"));

var agent_base_1 = require("agent-base");

var parse_proxy_response_1 = __importDefault(require("./parse-proxy-response"));

var debug = debug_1["default"]('https-proxy-agent:agent');
/**
 * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to
 * the specified "HTTP(s) proxy server" in order to proxy HTTPS requests.
 *
 * Outgoing HTTP requests are first tunneled through the proxy server using the
 * `CONNECT` HTTP request method to establish a connection to the proxy server,
 * and then the proxy server connects to the destination target and issues the
 * HTTP request from the proxy server.
 *
 * `https:` requests have their socket connection upgraded to TLS once
 * the connection to the proxy server has been established.
 *
 * @api public
 */

var HttpsProxyAgent =
/*#__PURE__*/
function (_agent_base_1$Agent) {
  _inherits(HttpsProxyAgent, _agent_base_1$Agent);

  function HttpsProxyAgent(_opts) {
    var _this;

    _classCallCheck(this, HttpsProxyAgent);

    var opts;

    if (typeof _opts === 'string') {
      opts = url_1["default"].parse(_opts);
    } else {
      opts = _opts;
    }

    if (!opts) {
      throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');
    }

    debug('creating new HttpsProxyAgent instance: %o', opts);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(HttpsProxyAgent).call(this, opts));
    var proxy = Object.assign({}, opts); // If `true`, then connect to the proxy server over TLS.
    // Defaults to `false`.

    _this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol); // Prefer `hostname` over `host`, and set the `port` if needed.

    proxy.host = proxy.hostname || proxy.host;

    if (typeof proxy.port === 'string') {
      proxy.port = parseInt(proxy.port, 10);
    }

    if (!proxy.port && proxy.host) {
      proxy.port = _this.secureProxy ? 443 : 80;
    } // ALPN is supported by Node.js >= v5.
    // attempt to negotiate http/1.1 for proxy servers that support http/2


    if (_this.secureProxy && !('ALPNProtocols' in proxy)) {
      proxy.ALPNProtocols = ['http 1.1'];
    }

    if (proxy.host && proxy.path) {
      // If both a `host` and `path` are specified then it's most likely
      // the result of a `url.parse()` call... we need to remove the
      // `path` portion so that `net.connect()` doesn't attempt to open
      // that as a Unix socket file.
      delete proxy.path;
      delete proxy.pathname;
    }

    _this.proxy = proxy;
    return _this;
  }
  /**
   * Called when the node-core HTTP client library is creating a
   * new HTTP request.
   *
   * @api protected
   */


  _createClass(HttpsProxyAgent, [{
    key: "callback",
    value: function callback(req, opts) {
      return __awaiter(this, void 0, void 0,
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var proxy, secureProxy, socket, headers, hostname, payload, host, port, secureEndpoint, _i, _Object$keys, name, proxyResponsePromise, _ref, statusCode, buffered, servername, fakeSocket;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                proxy = this.proxy, secureProxy = this.secureProxy; // Create a socket connection to the proxy server.

                if (secureProxy) {
                  debug('Creating `tls.Socket`: %o', proxy);
                  socket = tls_1["default"].connect(proxy);
                } else {
                  debug('Creating `net.Socket`: %o', proxy);
                  socket = net_1["default"].connect(proxy);
                }

                headers = Object.assign({}, proxy.headers);
                hostname = "".concat(opts.host, ":").concat(opts.port);
                payload = "CONNECT ".concat(hostname, " HTTP/1.1\r\n"); // Inject the `Proxy-Authorization` header if necessary.

                if (proxy.auth) {
                  headers['Proxy-Authorization'] = "Basic ".concat(Buffer.from(proxy.auth).toString('base64'));
                } // The `Host` header should only include the port
                // number when it is not the default port.


                host = opts.host, port = opts.port, secureEndpoint = opts.secureEndpoint;

                if (!isDefaultPort(port, secureEndpoint)) {
                  host += ":".concat(port);
                }

                headers.Host = host;
                headers.Connection = 'close';

                for (_i = 0, _Object$keys = Object.keys(headers); _i < _Object$keys.length; _i++) {
                  name = _Object$keys[_i];
                  payload += "".concat(name, ": ").concat(headers[name], "\r\n");
                }

                proxyResponsePromise = parse_proxy_response_1["default"](socket);
                socket.write("".concat(payload, "\r\n"));
                _context.next = 15;
                return proxyResponsePromise;

              case 15:
                _ref = _context.sent;
                statusCode = _ref.statusCode;
                buffered = _ref.buffered;

                if (!(statusCode === 200)) {
                  _context.next = 27;
                  break;
                }

                req.once('socket', resume);

                if (!opts.secureEndpoint) {
                  _context.next = 26;
                  break;
                }

                servername = opts.servername || opts.host;

                if (servername) {
                  _context.next = 24;
                  break;
                }

                throw new Error('Could not determine "servername"');

              case 24:
                // The proxy is connecting to a TLS server, so upgrade
                // this socket connection to a TLS connection.
                debug('Upgrading socket connection to TLS');
                return _context.abrupt("return", tls_1["default"].connect(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), {
                  socket: socket,
                  servername: servername
                })));

              case 26:
                return _context.abrupt("return", socket);

              case 27:
                // Some other status code that's not 200... need to re-play the HTTP
                // header "data" events onto the socket once the HTTP machinery is
                // attached so that the node core `http` can parse and handle the
                // error status code.
                // Close the original socket, and a new "fake" socket is returned
                // instead, so that the proxy doesn't get the HTTP request
                // written to it (which may contain `Authorization` headers or other
                // sensitive data).
                //
                // See: https://hackerone.com/reports/541502
                socket.destroy();
                fakeSocket = new net_1["default"].Socket();
                fakeSocket.readable = true; // Need to wait for the "socket" event to re-play the "data" events.

                req.once('socket', function (s) {
                  debug('replaying proxy buffer for failed request');
                  assert_1["default"](s.listenerCount('data') > 0); // Replay the "buffered" Buffer onto the fake `socket`, since at
                  // this point the HTTP module machinery has been hooked up for
                  // the user.

                  s.push(buffered);
                  s.push(null);
                });
                return _context.abrupt("return", fakeSocket);

              case 32:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    }
  }]);

  return HttpsProxyAgent;
}(agent_base_1.Agent);

exports["default"] = HttpsProxyAgent;

function resume(socket) {
  socket.resume();
}

function isDefaultPort(port, secure) {
  return Boolean(!secure && port === 80 || secure && port === 443);
}

function isHTTPS(protocol) {
  return typeof protocol === 'string' ? /^https:?$/i.test(protocol) : false;
}

function omit(obj) {
  var ret = {};
  var key;

  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    keys[_key - 1] = arguments[_key];
  }

  for (key in obj) {
    if (!keys.includes(key)) {
      ret[key] = obj[key];
    }
  }

  return ret;
}