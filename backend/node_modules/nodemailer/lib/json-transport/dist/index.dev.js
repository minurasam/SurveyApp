'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var packageData = require('../../package.json');

var shared = require('../shared');
/**
 * Generates a Transport object to generate JSON output
 *
 * @constructor
 * @param {Object} optional config parameter
 */


var JSONTransport =
/*#__PURE__*/
function () {
  function JSONTransport(options) {
    _classCallCheck(this, JSONTransport);

    options = options || {};
    this.options = options || {};
    this.name = 'JSONTransport';
    this.version = packageData.version;
    this.logger = shared.getLogger(this.options, {
      component: this.options.component || 'json-transport'
    });
  }
  /**
   * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>
   *
   * @param {Object} emailMessage MailComposer object
   * @param {Function} callback Callback function to run when the sending is completed
   */


  _createClass(JSONTransport, [{
    key: "send",
    value: function send(mail, done) {
      var _this = this;

      // Sendmail strips this header line by itself
      mail.message.keepBcc = true;
      var envelope = mail.data.envelope || mail.message.getEnvelope();
      var messageId = mail.message.messageId();
      var recipients = [].concat(envelope.to || []);

      if (recipients.length > 3) {
        recipients.push('...and ' + recipients.splice(2).length + ' more');
      }

      this.logger.info({
        tnx: 'send',
        messageId: messageId
      }, 'Composing JSON structure of %s to <%s>', messageId, recipients.join(', '));
      setImmediate(function () {
        mail.normalize(function (err, data) {
          if (err) {
            _this.logger.error({
              err: err,
              tnx: 'send',
              messageId: messageId
            }, 'Failed building JSON structure for %s. %s', messageId, err.message);

            return done(err);
          }

          delete data.envelope;
          delete data.normalizedHeaders;
          return done(null, {
            envelope: envelope,
            messageId: messageId,
            message: _this.options.skipEncoding ? data : JSON.stringify(data)
          });
        });
      });
    }
  }]);

  return JSONTransport;
}();

module.exports = JSONTransport;