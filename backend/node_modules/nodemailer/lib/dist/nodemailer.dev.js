'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Mailer = require('./mailer');

var shared = require('./shared');

var SMTPPool = require('./smtp-pool');

var SMTPTransport = require('./smtp-transport');

var SendmailTransport = require('./sendmail-transport');

var StreamTransport = require('./stream-transport');

var JSONTransport = require('./json-transport');

var SESTransport = require('./ses-transport');

var fetch = require('./fetch');

var packageData = require('../package.json');

var ETHEREAL_API = (process.env.ETHEREAL_API || 'https://api.nodemailer.com').replace(/\/+$/, '');
var ETHEREAL_WEB = (process.env.ETHEREAL_WEB || 'https://ethereal.email').replace(/\/+$/, '');
var ETHEREAL_CACHE = ['true', 'yes', 'y', '1'].includes((process.env.ETHEREAL_CACHE || 'yes').toString().trim().toLowerCase());
var testAccount = false;

module.exports.createTransport = function (transporter, defaults) {
  var urlConfig;
  var options;
  var mailer;

  if ( // provided transporter is a configuration object, not transporter plugin
  _typeof(transporter) === 'object' && typeof transporter.send !== 'function' || // provided transporter looks like a connection url
  typeof transporter === 'string' && /^(smtps?|direct):/i.test(transporter)) {
    if (urlConfig = typeof transporter === 'string' ? transporter : transporter.url) {
      // parse a configuration URL into configuration options
      options = shared.parseConnectionUrl(urlConfig);
    } else {
      options = transporter;
    }

    if (options.pool) {
      transporter = new SMTPPool(options);
    } else if (options.sendmail) {
      transporter = new SendmailTransport(options);
    } else if (options.streamTransport) {
      transporter = new StreamTransport(options);
    } else if (options.jsonTransport) {
      transporter = new JSONTransport(options);
    } else if (options.SES) {
      transporter = new SESTransport(options);
    } else {
      transporter = new SMTPTransport(options);
    }
  }

  mailer = new Mailer(transporter, options, defaults);
  return mailer;
};

module.exports.createTestAccount = function (apiUrl, callback) {
  var promise;

  if (!callback && typeof apiUrl === 'function') {
    callback = apiUrl;
    apiUrl = false;
  }

  if (!callback) {
    promise = new Promise(function (resolve, reject) {
      callback = shared.callbackPromise(resolve, reject);
    });
  }

  if (ETHEREAL_CACHE && testAccount) {
    setImmediate(function () {
      return callback(null, testAccount);
    });
    return promise;
  }

  apiUrl = apiUrl || ETHEREAL_API;
  var chunks = [];
  var chunklen = 0;
  var req = fetch(apiUrl + '/user', {
    contentType: 'application/json',
    method: 'POST',
    body: Buffer.from(JSON.stringify({
      requestor: packageData.name,
      version: packageData.version
    }))
  });
  req.on('readable', function () {
    var chunk;

    while ((chunk = req.read()) !== null) {
      chunks.push(chunk);
      chunklen += chunk.length;
    }
  });
  req.once('error', function (err) {
    return callback(err);
  });
  req.once('end', function () {
    var res = Buffer.concat(chunks, chunklen);
    var data;
    var err;

    try {
      data = JSON.parse(res.toString());
    } catch (E) {
      err = E;
    }

    if (err) {
      return callback(err);
    }

    if (data.status !== 'success' || data.error) {
      return callback(new Error(data.error || 'Request failed'));
    }

    delete data.status;
    testAccount = data;
    callback(null, testAccount);
  });
  return promise;
};

module.exports.getTestMessageUrl = function (info) {
  if (!info || !info.response) {
    return false;
  }

  var infoProps = new Map();
  info.response.replace(/\[([^\]]+)\]$/, function (m, props) {
    props.replace(/\b([A-Z0-9]+)=([^\s]+)/g, function (m, key, value) {
      infoProps.set(key, value);
    });
  });

  if (infoProps.has('STATUS') && infoProps.has('MSGID')) {
    return (testAccount.web || ETHEREAL_WEB) + '/message/' + infoProps.get('MSGID');
  }

  return false;
};