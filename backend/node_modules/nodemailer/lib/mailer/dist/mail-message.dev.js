'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var shared = require('../shared');

var MimeNode = require('../mime-node');

var mimeFuncs = require('../mime-funcs');

var MailMessage =
/*#__PURE__*/
function () {
  function MailMessage(mailer, data) {
    var _this = this;

    _classCallCheck(this, MailMessage);

    this.mailer = mailer;
    this.data = {};
    this.message = null;
    data = data || {};
    var options = mailer.options || {};
    var defaults = mailer._defaults || {};
    Object.keys(data).forEach(function (key) {
      _this.data[key] = data[key];
    });
    this.data.headers = this.data.headers || {}; // apply defaults

    Object.keys(defaults).forEach(function (key) {
      if (!(key in _this.data)) {
        _this.data[key] = defaults[key];
      } else if (key === 'headers') {
        // headers is a special case. Allow setting individual default headers
        Object.keys(defaults.headers).forEach(function (key) {
          if (!(key in _this.data.headers)) {
            _this.data.headers[key] = defaults.headers[key];
          }
        });
      }
    }); // force specific keys from transporter options

    ['disableFileAccess', 'disableUrlAccess', 'normalizeHeaderKey'].forEach(function (key) {
      if (key in options) {
        _this.data[key] = options[key];
      }
    });
  }

  _createClass(MailMessage, [{
    key: "resolveContent",
    value: function resolveContent() {
      return shared.resolveContent.apply(shared, arguments);
    }
  }, {
    key: "resolveAll",
    value: function resolveAll(callback) {
      var _this2 = this;

      var keys = [[this.data, 'html'], [this.data, 'text'], [this.data, 'watchHtml'], [this.data, 'amp'], [this.data, 'icalEvent']];

      if (this.data.alternatives && this.data.alternatives.length) {
        this.data.alternatives.forEach(function (alternative, i) {
          keys.push([_this2.data.alternatives, i]);
        });
      }

      if (this.data.attachments && this.data.attachments.length) {
        this.data.attachments.forEach(function (attachment, i) {
          if (!attachment.filename) {
            attachment.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);

            if (attachment.filename.indexOf('.') < 0) {
              attachment.filename += '.' + mimeFuncs.detectExtension(attachment.contentType);
            }
          }

          if (!attachment.contentType) {
            attachment.contentType = mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin');
          }

          keys.push([_this2.data.attachments, i]);
        });
      }

      var mimeNode = new MimeNode();
      var addressKeys = ['from', 'to', 'cc', 'bcc', 'sender', 'replyTo'];
      addressKeys.forEach(function (address) {
        var value;

        if (_this2.message) {
          value = [].concat(mimeNode._parseAddresses(_this2.message.getHeader(address === 'replyTo' ? 'reply-to' : address)) || []);
        } else if (_this2.data[address]) {
          value = [].concat(mimeNode._parseAddresses(_this2.data[address]) || []);
        }

        if (value && value.length) {
          _this2.data[address] = value;
        } else if (address in _this2.data) {
          _this2.data[address] = null;
        }
      });
      var singleKeys = ['from', 'sender', 'replyTo'];
      singleKeys.forEach(function (address) {
        if (_this2.data[address]) {
          _this2.data[address] = _this2.data[address].shift();
        }
      });
      var pos = 0;

      var resolveNext = function resolveNext() {
        if (pos >= keys.length) {
          return callback(null, _this2.data);
        }

        var args = keys[pos++];

        if (!args[0] || !args[0][args[1]]) {
          return resolveNext();
        }

        shared.resolveContent.apply(shared, _toConsumableArray(args).concat([function (err, value) {
          if (err) {
            return callback(err);
          }

          var node = {
            content: value
          };

          if (args[0][args[1]] && _typeof(args[0][args[1]]) === 'object' && !Buffer.isBuffer(args[0][args[1]])) {
            Object.keys(args[0][args[1]]).forEach(function (key) {
              if (!(key in node) && !['content', 'path', 'href', 'raw'].includes(key)) {
                node[key] = args[0][args[1]][key];
              }
            });
          }

          args[0][args[1]] = node;
          resolveNext();
        }]));
      };

      setImmediate(function () {
        return resolveNext();
      });
    }
  }, {
    key: "normalize",
    value: function normalize(callback) {
      var _this3 = this;

      var envelope = this.data.envelope || this.message.getEnvelope();
      var messageId = this.message.messageId();
      this.resolveAll(function (err, data) {
        if (err) {
          return callback(err);
        }

        data.envelope = envelope;
        data.messageId = messageId;
        ['html', 'text', 'watchHtml', 'amp'].forEach(function (key) {
          if (data[key] && data[key].content) {
            if (typeof data[key].content === 'string') {
              data[key] = data[key].content;
            } else if (Buffer.isBuffer(data[key].content)) {
              data[key] = data[key].content.toString();
            }
          }
        });

        if (data.icalEvent && Buffer.isBuffer(data.icalEvent.content)) {
          data.icalEvent.content = data.icalEvent.content.toString('base64');
          data.icalEvent.encoding = 'base64';
        }

        if (data.alternatives && data.alternatives.length) {
          data.alternatives.forEach(function (alternative) {
            if (alternative && alternative.content && Buffer.isBuffer(alternative.content)) {
              alternative.content = alternative.content.toString('base64');
              alternative.encoding = 'base64';
            }
          });
        }

        if (data.attachments && data.attachments.length) {
          data.attachments.forEach(function (attachment) {
            if (attachment && attachment.content && Buffer.isBuffer(attachment.content)) {
              attachment.content = attachment.content.toString('base64');
              attachment.encoding = 'base64';
            }
          });
        }

        data.normalizedHeaders = {};
        Object.keys(data.headers || {}).forEach(function (key) {
          var value = [].concat(data.headers[key] || []).shift();
          value = value && value.value || value;

          if (value) {
            if (['references', 'in-reply-to', 'message-id', 'content-id'].includes(key)) {
              value = _this3.message._encodeHeaderValue(key, value);
            }

            data.normalizedHeaders[key] = value;
          }
        });

        if (data.list && _typeof(data.list) === 'object') {
          var listHeaders = _this3._getListHeaders(data.list);

          listHeaders.forEach(function (entry) {
            data.normalizedHeaders[entry.key] = entry.value.map(function (val) {
              return val && val.value || val;
            }).join(', ');
          });
        }

        if (data.references) {
          data.normalizedHeaders.references = _this3.message._encodeHeaderValue('references', data.references);
        }

        if (data.inReplyTo) {
          data.normalizedHeaders['in-reply-to'] = _this3.message._encodeHeaderValue('in-reply-to', data.inReplyTo);
        }

        return callback(null, data);
      });
    }
  }, {
    key: "setMailerHeader",
    value: function setMailerHeader() {
      if (!this.message || !this.data.xMailer) {
        return;
      }

      this.message.setHeader('X-Mailer', this.data.xMailer);
    }
  }, {
    key: "setPriorityHeaders",
    value: function setPriorityHeaders() {
      if (!this.message || !this.data.priority) {
        return;
      }

      switch ((this.data.priority || '').toString().toLowerCase()) {
        case 'high':
          this.message.setHeader('X-Priority', '1 (Highest)');
          this.message.setHeader('X-MSMail-Priority', 'High');
          this.message.setHeader('Importance', 'High');
          break;

        case 'low':
          this.message.setHeader('X-Priority', '5 (Lowest)');
          this.message.setHeader('X-MSMail-Priority', 'Low');
          this.message.setHeader('Importance', 'Low');
          break;

        default: // do not add anything, since all messages are 'Normal' by default

      }
    }
  }, {
    key: "setListHeaders",
    value: function setListHeaders() {
      var _this4 = this;

      if (!this.message || !this.data.list || _typeof(this.data.list) !== 'object') {
        return;
      } // add optional List-* headers


      if (this.data.list && _typeof(this.data.list) === 'object') {
        this._getListHeaders(this.data.list).forEach(function (listHeader) {
          listHeader.value.forEach(function (value) {
            _this4.message.addHeader(listHeader.key, value);
          });
        });
      }
    }
  }, {
    key: "_getListHeaders",
    value: function _getListHeaders(listData) {
      var _this5 = this;

      // make sure an url looks like <protocol:url>
      return Object.keys(listData).map(function (key) {
        return {
          key: 'list-' + key.toLowerCase().trim(),
          value: [].concat(listData[key] || []).map(function (value) {
            return {
              prepared: true,
              foldLines: true,
              value: [].concat(value || []).map(function (value) {
                if (typeof value === 'string') {
                  value = {
                    url: value
                  };
                }

                if (value && value.url) {
                  if (key.toLowerCase().trim() === 'id') {
                    // List-ID: "comment" <domain>
                    var _comment = value.comment || '';

                    if (mimeFuncs.isPlainText(_comment)) {
                      _comment = '"' + _comment + '"';
                    } else {
                      _comment = mimeFuncs.encodeWord(_comment);
                    }

                    return (value.comment ? _comment + ' ' : '') + _this5._formatListUrl(value.url).replace(/^<[^:]+\/{,2}/, '');
                  } // List-*: <http://domain> (comment)


                  var comment = value.comment || '';

                  if (!mimeFuncs.isPlainText(comment)) {
                    comment = mimeFuncs.encodeWord(comment);
                  }

                  return _this5._formatListUrl(value.url) + (value.comment ? ' (' + comment + ')' : '');
                }

                return '';
              }).filter(function (value) {
                return value;
              }).join(', ')
            };
          })
        };
      });
    }
  }, {
    key: "_formatListUrl",
    value: function _formatListUrl(url) {
      url = url.replace(/[\s<]+|[\s>]+/g, '');

      if (/^(https?|mailto|ftp):/.test(url)) {
        return '<' + url + '>';
      }

      if (/^[^@]+@[^@]+$/.test(url)) {
        return '<mailto:' + url + '>';
      }

      return '<http://' + url + '>';
    }
  }]);

  return MailMessage;
}();

module.exports = MailMessage;