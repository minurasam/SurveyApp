"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("./utils"),
    addReadProp = _require.addReadProp;
/**
 * @private
 * @class InnerState
 * @description
 * Implements support for private/inner state object inside the class,
 * which can be accessed by a derived class via hidden read-only property _inner.
 */


var InnerState =
/*#__PURE__*/
function () {
  function InnerState(initialState) {
    _classCallCheck(this, InnerState);

    addReadProp(this, "_inner", {}, true);

    if (initialState && typeof initialState === "object") {
      this.extendState(initialState);
    }
  }
  /**
   * Extends or overrides inner state with the specified properties.
   *
   * Only own properties are used, i.e. inherited ones are skipped.
   */


  _createClass(InnerState, [{
    key: "extendState",
    value: function extendState(state) {
      for (var a in state) {
        // istanbul ignore else
        if (Object.prototype.hasOwnProperty.call(state, a)) {
          this._inner[a] = state[a];
        }
      }
    }
  }]);

  return InnerState;
}();
/**
 * @member InnerState#_inner
 * Private/Inner object state.
 */


module.exports = {
  InnerState: InnerState
};