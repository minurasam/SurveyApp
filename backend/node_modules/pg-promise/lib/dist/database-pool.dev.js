"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/*
 * Copyright (c) 2015-present, Vitaly Tomilov
 *
 * See the LICENSE file at the top-level directory of this distribution
 * for licensing information.
 *
 * Removal or modification of this copyright notice is prohibited.
 */
var _require = require("./utils/color"),
    ColorConsole = _require.ColorConsole;

var npm = {
  utils: require("./utils")
};
/**
 * @class DatabasePool
 * @static
 * @private
 */

var DatabasePool =
/*#__PURE__*/
function () {
  function DatabasePool() {
    _classCallCheck(this, DatabasePool);
  }

  _createClass(DatabasePool, null, [{
    key: "register",

    /**
     * @method DatabasePool.register
     * @static
     * @description
     *  - Registers each database object, to make sure no duplicates connections are used,
     *    and if they are, produce a warning;
     *  - Registers each Pool object, to be able to release them all when requested.
     *
     * @param {Database} db - The new Database object being registered.
     */
    value: function register(db) {
      var cnKey = DatabasePool.createContextKey(db);
      npm.utils.addReadProp(db, "$cnKey", cnKey, true);
      var _DatabasePool$instanc = DatabasePool.instance,
          dbMap = _DatabasePool$instanc.dbMap,
          dbs = _DatabasePool$instanc.dbs;

      if (cnKey in dbMap) {
        dbMap[cnKey]++;
        /* istanbul ignore if */

        if (!db.$config.options.noWarnings) {
          ColorConsole.warn("WARNING: Creating a duplicate database object for the same connection.\n".concat(npm.utils.getLocalStack(4, 3), "\n"));
        }
      } else {
        dbMap[cnKey] = 1;
      }

      dbs.push(db);
    }
    /**
     * @method DatabasePool.unregister
     * @static
     * @param db
     */

  }, {
    key: "unregister",
    value: function unregister(db) {
      var cnKey = db.$cnKey;
      var dbMap = DatabasePool.instance.dbMap;

      if (! --dbMap[cnKey]) {
        delete dbMap[cnKey];
      }
    }
    /**
     * @method DatabasePool.shutDown
     * @static
     */

  }, {
    key: "shutDown",
    value: function shutDown() {
      var instance = DatabasePool.instance;
      instance.dbs.forEach(function (db) {
        db.$destroy();
      });
      instance.dbs.length = 0;
      instance.dbMap = {};
    }
    /**
     * @method DatabasePool.createContextKey
     * @static
     * @description
     * For connections that are objects it reorders the keys alphabetically,
     * and then serializes the result into a JSON string.
     *
     * @param {Database} db - Database instance.
     */

  }, {
    key: "createContextKey",
    value: function createContextKey(db) {
      var cn = db.$cn;

      if (typeof cn === "object") {
        var obj = {},
            keys = Object.keys(cn).sort();
        keys.forEach(function (name) {
          obj[name] = cn[name];
        });
        cn = obj;
      }

      return npm.utils.toJson(npm.utils.getSafeConnection(cn)) + npm.utils.toJson(db.$dc);
    }
  }, {
    key: "instance",

    /**
     * Global instance of the database pool repository.
     *
     * @returns {{dbMap: {}, dbs: Array}}
     */
    get: function get() {
      var s = Symbol["for"]("pgPromiseDatabasePool");
      var scope = global[s];

      if (!scope) {
        scope = {
          dbMap: {},
          // map of used database context keys (connection + dc)
          dbs: [] // all database objects

        };
        global[s] = scope;
      }

      return scope;
    }
  }]);

  return DatabasePool;
}();

module.exports = {
  DatabasePool: DatabasePool
};