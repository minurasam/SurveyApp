"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require("../inner-state"),
    InnerState = _require.InnerState;

var _require2 = require("../utils"),
    addInspection = _require2.addInspection;

var utils = require("../utils");
/**
 * @private
 * @class ServerFormatting
 */


var ServerFormatting =
/*#__PURE__*/
function (_InnerState) {
  _inherits(ServerFormatting, _InnerState);

  function ServerFormatting(options) {
    var _this;

    _classCallCheck(this, ServerFormatting);

    var _inner = {
      options: options,
      changed: true,
      currentError: undefined,
      target: {}
    };
    _this = _possibleConstructorReturn(this, _getPrototypeOf(ServerFormatting).call(this, _inner));
    setValues.call(_assertThisInitialized(_this), options.values);
    return _this;
  }

  _createClass(ServerFormatting, [{
    key: "error",
    get: function get() {
      return this._inner.currentError;
    }
  }, {
    key: "text",
    get: function get() {
      return this._inner.options.text;
    },
    set: function set(value) {
      var _i = this._inner;

      if (value !== _i.options.text) {
        _i.options.text = value;
        _i.changed = true;
      }
    }
  }, {
    key: "binary",
    get: function get() {
      return this._inner.options.binary;
    },
    set: function set(value) {
      var _i = this._inner;

      if (value !== _i.options.binary) {
        _i.options.binary = value;
        _i.changed = true;
      }
    }
  }, {
    key: "rowMode",
    get: function get() {
      return this._inner.options.rowMode;
    },
    set: function set(value) {
      var _i = this._inner;

      if (value !== _i.options.rowMode) {
        _i.options.rowMode = value;
        _i.changed = true;
      }
    }
  }, {
    key: "values",
    get: function get() {
      return this._inner.target.values;
    },
    set: function set(values) {
      setValues.call(this, values);
    }
  }]);

  return ServerFormatting;
}(InnerState);
/**
 * @member ServerFormatting#parse
 */


function setValues(v) {
  var target = this._inner.target;

  if (Array.isArray(v)) {
    if (v.length) {
      target.values = v;
    } else {
      delete target.values;
    }
  } else {
    if (utils.isNull(v)) {
      delete target.values;
    } else {
      target.values = [v];
    }
  }
}

addInspection(ServerFormatting, function () {
  return this.toString();
});
module.exports = {
  ServerFormatting: ServerFormatting
};