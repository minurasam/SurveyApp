"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var util = require("util");

var ColorConsole =
/*#__PURE__*/
function () {
  function ColorConsole() {
    _classCallCheck(this, ColorConsole);
  }

  _createClass(ColorConsole, null, [{
    key: "log",
    value: function log() {
      ColorConsole.writeNormal(Array.prototype.slice.call(arguments), 39); // white
    }
  }, {
    key: "info",
    value: function info() {
      ColorConsole.writeNormal(Array.prototype.slice.call(arguments), 36); // cyan
    }
  }, {
    key: "success",
    value: function success() {
      ColorConsole.writeNormal(Array.prototype.slice.call(arguments), 32); // green
    }
  }, {
    key: "warn",
    value: function warn() {
      ColorConsole.writeNormal(Array.prototype.slice.call(arguments), 33); // yellow
    }
  }, {
    key: "error",
    value: function error() {
      ColorConsole.writeError(Array.prototype.slice.call(arguments), 31); // red
    }
  }, {
    key: "writeNormal",
    value: function writeNormal(params, color) {
      // istanbul ignore else
      if (process.stdout.isTTY) {
        console.log.apply(null, ColorConsole.formatColor(params, color)); // eslint-disable-line no-console
      } else {
        console.log.apply(null, params); // eslint-disable-line no-console
      }
    }
  }, {
    key: "writeError",
    value: function writeError(params, color) {
      // istanbul ignore else
      if (process.stderr.isTTY) {
        console.error.apply(null, ColorConsole.formatColor(params, color)); // eslint-disable-line no-console
      } else {
        console.error.apply(null, params); // eslint-disable-line no-console
      }
    }
  }, {
    key: "formatColor",
    value: function formatColor(args, color) {
      return args.map(function (a) {
        return "\x1B[".concat(color, "m").concat(util.format(a), "\x1B[0m");
      });
    }
  }]);

  return ColorConsole;
}();

ColorConsole.log.bright = function () {
  ColorConsole.writeNormal(Array.prototype.slice.call(arguments), 97); // light white
};

ColorConsole.info.bright = function () {
  ColorConsole.writeNormal(Array.prototype.slice.call(arguments), 93); // light cyan
};

ColorConsole.success.bright = function () {
  ColorConsole.writeNormal(Array.prototype.slice.call(arguments), 92); // light green
};

ColorConsole.warn.bright = function () {
  ColorConsole.writeNormal(Array.prototype.slice.call(arguments), 93); // light yellow
};

ColorConsole.error.bright = function () {
  ColorConsole.writeError(Array.prototype.slice.call(arguments), 91); // light red
};

module.exports = {
  ColorConsole: ColorConsole
};