"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var npm = {
  u: require('util'),
  os: require('os'),
  utils: require('../utils/static')
};
/**
 * @class errors.BatchError
 * @augments external:Error
 * @description
 * This type represents all errors rejected by method {@link batch}, except for {@link external:TypeError TypeError}
 * when the method receives invalid input parameters.
 *
 * @property {string} name
 * Standard {@link external:Error Error} property - error type name = `BatchError`.
 *
 * @property {string} message
 * Standard {@link external:Error Error} property - the error message.
 *
 * It represents the message of the first error encountered in the batch, and is a safe
 * version of using `first.message`.
 *
 * @property {string} stack
 * Standard {@link external:Error Error} property - the stack trace.
 *
 * @property {array} data
 * Array of objects `{success, result, [origin]}`:
 * - `success` = true/false, indicates whether the corresponding value in the input array was resolved.
 * - `result` = resolved data, if `success`=`true`, or else the rejection reason.
 * - `origin` - set only when failed as a result of an unsuccessful call into the notification callback
 *    (parameter `cb` of method {@link batch})
 *
 * The array has the same size as the input one that was passed into method {@link batch}, providing direct mapping.
 *
 * @property {} stat
 * Resolution Statistics.
 *
 * @property {number} stat.total
 * Total number of elements in the batch.
 *
 * @property {number} stat.succeeded
 * Number of resolved values in the batch.
 *
 * @property {number} stat.failed
 * Number of rejected values in the batch.
 *
 * @property {number} stat.duration
 * Time in milliseconds it took to settle all values.
 *
 * @property {} first
 * The very first error within the batch, with support for nested batch results, it is also the same error
 * as $[promise.all] would provide.
 *
 * @see {@link batch}
 *
 */

var BatchError =
/*#__PURE__*/
function (_Error) {
  _inherits(BatchError, _Error);

  function BatchError(result, errors, duration) {
    var _this;

    _classCallCheck(this, BatchError);

    function getErrors() {
      var err = new Array(errors.length);

      for (var i = 0; i < errors.length; i++) {
        err[i] = result[errors[i]].result;

        if (err[i] instanceof BatchError) {
          err[i] = err[i].getErrors();
        }
      }

      npm.utils.extend(err, '$isErrorList', true);
      return err;
    }

    var e = getErrors();
    var first = e[0];

    while (first && first.$isErrorList) {
      first = first[0];
    }

    var message;

    if (first instanceof Error) {
      message = first.message;
    } else {
      if (typeof first !== 'string') {
        first = npm.u.inspect(first);
      }

      message = first;
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BatchError).call(this, message));
    _this.name = _this.constructor.name;
    _this.data = result; // we do not show it within the inspect, because when the error
    // happens for a nested result, the output becomes a mess.

    _this.first = first;
    _this.stat = {
      total: result.length,
      succeeded: result.length - e.length,
      failed: e.length,
      duration: duration
    };
    _this.getErrors = getErrors;
    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    return _this;
  }
  /**
   * @method errors.BatchError.getErrors
   * @description
   * Returns the complete list of errors only.
   *
   * It supports nested batch results, presented as a sub-array.
   *
   * @returns {array}
   */


  return BatchError;
}(_wrapNativeSuper(Error));
/**
 * @method errors.BatchError.toString
 * @description
 * Creates a well-formatted multi-line string that represents the error.
 *
 * It is called automatically when writing the object into the console.
 *
 * The output is an abbreviated version of the error, because the complete error
 * is often too much for displaying or even logging, as a batch can be of any size.
 * Therefore, only errors are rendered from the `data` property, alongside their indexes,
 * and only up to the first 5, to avoid polluting the screen or the log file.
 *
 * @param {number} [level=0]
 * Nested output level, to provide visual offset.
 *
 * @returns {string}
 */


BatchError.prototype.toString = function (level) {
  level = level > 0 ? parseInt(level) : 0;
  var gap0 = npm.utils.messageGap(level),
      gap1 = npm.utils.messageGap(level + 1),
      gap2 = npm.utils.messageGap(level + 2),
      lines = ['BatchError {', gap1 + 'stat: { total: ' + this.stat.total + ', succeeded: ' + this.stat.succeeded + ', failed: ' + this.stat.failed + ', duration: ' + this.stat.duration + ' }', gap1 + 'errors: [']; // In order to avoid polluting the error log or the console, 
  // we limit the log output to the top 5 errors:

  var maxErrors = 5;
  var counter = 0;
  this.data.forEach(function (d, index) {
    if (!d.success && counter < maxErrors) {
      lines.push(gap2 + index + ': ' + npm.utils.formatError(d.result, level + 2));
      counter++;
    }
  });
  lines.push(gap1 + ']');
  lines.push(gap0 + '}');
  return lines.join(npm.os.EOL);
};

npm.utils.addInspection(BatchError, function () {
  return this.toString();
});
module.exports = {
  BatchError: BatchError
};