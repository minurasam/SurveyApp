"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var npm = {
  u: require('util'),
  os: require('os'),
  utils: require('../utils/static')
};
var errorReasons = {
  0: 'Page with index %d rejected.',
  1: 'Source %s returned a rejection at index %d.',
  2: 'Source %s threw an error at index %d.',
  3: 'Destination %s returned a rejection at index %d.',
  4: 'Destination %s threw an error at index %d.',
  5: 'Source %s returned a non-array value at index %d.'
};
/**
 * @class errors.PageError
 * @augments external:Error
 * @description
 * This type represents all errors rejected by method {@link page}, except for {@link external:TypeError TypeError}
 * when the method receives invalid input parameters.
 *
 * @property {string} name
 * Standard {@link external:Error Error} property - error type name = `PageError`.
 *
 * @property {string} message
 * Standard {@link external:Error Error} property - the error message.
 *
 * @property {string} stack
 * Standard {@link external:Error Error} property - the stack trace.
 *
 * @property {} error
 * The error that was thrown, or the rejection reason.
 *
 * @property {number} index
 * Index of the element in the sequence for which the error/rejection occurred.
 *
 * @property {number} duration
 * Duration (in milliseconds) of processing until the error/rejection occurred.
 *
 * @property {string} reason
 * Textual explanation of why the method failed.
 *
 * @property {} source
 * Resolved `data` parameter that was passed into the `source` function.
 *
 * It is only set when the error/rejection occurred inside the `source` function.
 *
 * @property {} dest
 * Resolved `data` parameter that was passed into the `dest` function.
 *
 * It is only set when the error/rejection occurred inside the `dest` function.
 *
 * @see
 * {@link page},
 * {@link batch}
 *
 */

var PageError =
/*#__PURE__*/
function (_Error) {
  _inherits(PageError, _Error);

  function PageError(e, code, cbName, duration) {
    var _this;

    _classCallCheck(this, PageError);

    var message;

    if (e.error instanceof Error) {
      message = e.error.message;
    } else {
      message = e.error;

      if (typeof message !== 'string') {
        message = npm.u.inspect(message);
      }
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PageError).call(this, message));
    _this.name = _this.constructor.name;
    _this.index = e.index;
    _this.duration = duration;
    _this.error = e.error;

    if ('source' in e) {
      _this.source = e.source;
    }

    if ('dest' in e) {
      _this.dest = e.dest;
    }

    if (code) {
      cbName = cbName ? '\'' + cbName + '\'' : '<anonymous>';
      _this.reason = npm.u.format(errorReasons[code], cbName, e.index);
    } else {
      _this.reason = npm.u.format(errorReasons[code], e.index);
    }

    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    return _this;
  }

  return PageError;
}(_wrapNativeSuper(Error));
/**
 * @method errors.PageError.toString
 * @description
 * Creates a well-formatted multi-line string that represents the error.
 *
 * It is called automatically when writing the object into the console.
 *
 * @param {number} [level=0]
 * Nested output level, to provide visual offset.
 *
 * @returns {string}
 */


PageError.prototype.toString = function (level) {
  level = level > 0 ? parseInt(level) : 0;
  var gap0 = npm.utils.messageGap(level),
      gap1 = npm.utils.messageGap(level + 1),
      lines = ['PageError {', gap1 + 'message: ' + JSON.stringify(this.message), gap1 + 'reason: ' + this.reason, gap1 + 'index: ' + this.index, gap1 + 'duration: ' + this.duration];
  lines.push(gap1 + 'error: ' + npm.utils.formatError(this.error, level + 1));
  lines.push(gap0 + '}');
  return lines.join(npm.os.EOL);
};

npm.utils.addInspection(PageError, function () {
  return this.toString();
});
module.exports = {
  PageError: PageError
};