"use strict"; // Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.main = exports.gfs = void 0;

var execa = require("execa");

var fs = require("fs");

var nunjucks = require("nunjucks");

var path = require("path");

var util_1 = require("util");

var p_queue_1 = require("p-queue");

var srcPath = path.join(__dirname, '../../../src');
var apiPath = path.join(srcPath, 'apis');
var templatePath = path.join(srcPath, 'generator/templates/index.html.njk');
var docsPath = path.join(__dirname, '../../../docs');
var indexPath = path.join(docsPath, 'index.html');
exports.gfs = {
  mkdir: fs.mkdirSync,
  exists: fs.existsSync,
  writeFile: util_1.promisify(fs.writeFile),
  readdir: util_1.promisify(fs.readdir),
  execa: execa
};
/**
 * Iterate over each API directory, and use the `compodoc` tool to generate
 * reference API documentation in the `docs` folder.  This folder is ignored
 * in git, so a publish must be done with `npm run publish-docs`.
 *
 * To use this, run `npm run generate-docs`.
 */

function main() {
  var children, dirs, contents, q, i, promises;
  return regeneratorRuntime.async(function main$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!exports.gfs.exists(docsPath)) {
            exports.gfs.mkdir(docsPath);
          }

          _context.next = 3;
          return regeneratorRuntime.awrap(exports.gfs.readdir(apiPath));

        case 3:
          children = _context.sent;
          dirs = children.filter(function (x) {
            return !x.endsWith('.ts');
          });
          contents = nunjucks.render(templatePath, {
            apis: dirs
          });
          _context.next = 8;
          return regeneratorRuntime.awrap(exports.gfs.writeFile(indexPath, contents));

        case 8:
          q = new p_queue_1["default"]({
            concurrency: 50
          });
          console.log("Generating docs for ".concat(dirs.length, " APIs..."));
          i = 0;
          promises = dirs.map(function (dir) {
            return q.add(function () {
              return exports.gfs.execa(process.execPath, ['--max-old-space-size=8192', './node_modules/.bin/compodoc', "src/apis/".concat(dir), '-d', "./docs/".concat(dir)]);
            }).then(function () {
              i++;
              console.log("[".concat(i, "/").concat(dirs.length, "] ").concat(dir));
            });
          });
          _context.next = 14;
          return regeneratorRuntime.awrap(Promise.all(promises));

        case 14:
        case "end":
          return _context.stop();
      }
    }
  });
}

exports.main = main;

if (require.main === module) {
  main();
}