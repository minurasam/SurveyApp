"use strict"; // Copyright 2014 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Generator = void 0;

var fs = require("fs");

var mkdirp = require("mkdirp");

var nunjucks = require("nunjucks");

var path = require("path");

var util = require("util");

var p_queue_1 = require("p-queue");

var prettier = require("prettier");

var minimist = require("yargs-parser");

var gaxios_1 = require("gaxios");

var download_1 = require("./download");

var download_2 = require("./download");

var filters = require("./filters");

var samplegen_1 = require("./samplegen");

var writeFile = util.promisify(fs.writeFile);
var readDir = util.promisify(fs.readdir);
var readFile = util.promisify(fs.readFile);
var stat = util.promisify(fs.stat);
var srcPath = path.join(__dirname, '../../../src');
var TEMPLATES_DIR = path.join(srcPath, 'generator/templates');
var API_TEMPLATE = path.join(TEMPLATES_DIR, 'api-endpoint.njk'); // eslint-disable-next-line @typescript-eslint/no-var-requires

var disclaimers = require('../../../disclaimers.json');

var Generator =
/*#__PURE__*/
function () {
  /**
   * Generator for generating API endpoints
   * @param options Options for generation
   */
  function Generator() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Generator);

    this.state = new Map();
    this.options = options;
    this.env = new nunjucks.Environment(new nunjucks.FileSystemLoader(TEMPLATES_DIR), {
      trimBlocks: true
    });
    this.env.addFilter('buildurl', filters.buildurl);
    this.env.addFilter('getType', filters.getType);
    this.env.addFilter('cleanPropertyName', filters.cleanPropertyName);
    this.env.addFilter('cleanComments', filters.cleanComments);
    this.env.addFilter('camelify', filters.camelify);
    this.env.addFilter('getPathParams', filters.getPathParams);
    this.env.addFilter('getSafeParamName', filters.getSafeParamName);
    this.env.addFilter('hasResourceParam', filters.hasResourceParam);
  }
  /**
   * Log output of generator. Works just like console.log.
   */


  _createClass(Generator, [{
    key: "log",
    value: function log() {
      if (this.options && this.options.debug) {
        var _console;

        (_console = console).log.apply(_console, arguments);
      }
    }
    /**
     * Write to the state log, which is used for debugging.
     * @param id DiscoveryRestUrl of the endpoint to log
     * @param message
     */

  }, {
    key: "logResult",
    value: function logResult(id, message) {
      if (!this.state.has(id)) {
        this.state.set(id, new Array());
      }

      this.state.get(id).push(message);
    }
    /**
     * Generate all APIs and write to files.
     */

  }, {
    key: "generateAllAPIs",
    value: function generateAllAPIs(discoveryUrl, useCache) {
      var _this = this;

      var ignore, discoveryPath, changes, indexPath, file, apis, queue;
      return regeneratorRuntime.async(function generateAllAPIs$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              ignore = require('../../../ignore.json').ignore;
              discoveryPath = path.join(__dirname, '../../../discovery');
              changes = new Array();

              if (!useCache) {
                _context2.next = 7;
                break;
              }

              console.log('Reading from cache...');
              _context2.next = 10;
              break;

            case 7:
              _context2.next = 9;
              return regeneratorRuntime.awrap(download_2.downloadDiscoveryDocs({
                includePrivate: this.options.includePrivate,
                discoveryUrl: discoveryUrl,
                downloadPath: discoveryPath
              }));

            case 9:
              changes = _context2.sent;

            case 10:
              indexPath = path.join(discoveryPath, 'index.json');
              _context2.next = 13;
              return regeneratorRuntime.awrap(readFile(indexPath, 'utf8'));

            case 13:
              file = _context2.sent;
              apis = JSON.parse(file).items;
              queue = new p_queue_1["default"]({
                concurrency: 50
              });
              console.log("Generating ".concat(apis.length, " APIs..."));
              _context2.next = 19;
              return regeneratorRuntime.awrap(queue.addAll(apis.map(function (api) {
                return function _callee() {
                  var apiPath;
                  return regeneratorRuntime.async(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          if (!ignore.includes(api.id)) {
                            _context.next = 3;
                            break;
                          }

                          _this.log("Skipping API ".concat(api.id));

                          return _context.abrupt("return");

                        case 3:
                          _this.log("Generating API for ".concat(api.id, "..."));

                          _this.logResult(api.discoveryRestUrl, 'Attempting first generateAPI call...');

                          _context.prev = 5;
                          apiPath = path.join(discoveryPath, api.id.replace(':', '-') + '.json');
                          _context.next = 9;
                          return regeneratorRuntime.awrap(_this.generateAPI(apiPath));

                        case 9:
                          _this.logResult(api.discoveryRestUrl, 'GenerateAPI call success!');

                          _context.next = 18;
                          break;

                        case 12:
                          _context.prev = 12;
                          _context.t0 = _context["catch"](5);

                          _this.logResult(api.discoveryRestUrl, "GenerateAPI call failed with error: ".concat(_context.t0, ", moving on."));

                          console.error("Failed to generate API: ".concat(api.id));
                          console.error(_context.t0);
                          console.log(api.id + '\n-----------\n' + util.inspect(_this.state.get(api.discoveryRestUrl), {
                            maxArrayLength: null
                          }) + '\n');

                        case 18:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, null, null, [[5, 12]]);
                };
              })));

            case 19:
              _context2.next = 21;
              return regeneratorRuntime.awrap(this.generateIndex(apis));

            case 21:
              return _context2.abrupt("return", changes);

            case 22:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "generateIndex",
    value: function generateIndex(metadata) {
      var _this2 = this;

      var _a, apis, apisPath, indexPath, rootIndexPath, files, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, _ret;

      return regeneratorRuntime.async(function generateIndex$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              apis = {};
              apisPath = path.join(srcPath, 'apis');
              indexPath = path.join(apisPath, 'index.ts');
              rootIndexPath = path.join(apisPath, '../', 'index.ts'); // Dynamically discover available APIs

              _context4.next = 6;
              return regeneratorRuntime.awrap(readDir(apisPath));

            case 6:
              files = _context4.sent;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context4.prev = 10;

              _loop = function _loop() {
                var file, filePath, files, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, version, parts, desc, apiIdxPath, apiIndexData, _ref, _ref2, pkgPath, pkgData, rdPath, disclaimer, tsPath, wpPath;

                return regeneratorRuntime.async(function _loop$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        file = _step.value;
                        filePath = path.join(apisPath, file);
                        _context3.next = 4;
                        return regeneratorRuntime.awrap(stat(filePath));

                      case 4:
                        if (_context3.sent.isDirectory()) {
                          _context3.next = 6;
                          break;
                        }

                        return _context3.abrupt("return", "continue");

                      case 6:
                        apis[file] = {};
                        _context3.next = 9;
                        return regeneratorRuntime.awrap(readDir(path.join(apisPath, file)));

                      case 9:
                        files = _context3.sent;
                        _iteratorNormalCompletion2 = true;
                        _didIteratorError2 = false;
                        _iteratorError2 = undefined;
                        _context3.prev = 13;
                        _iterator2 = files[Symbol.iterator]();

                      case 15:
                        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                          _context3.next = 46;
                          break;
                        }

                        version = _step2.value;
                        parts = path.parse(version);

                        if (!(!version.endsWith('.d.ts') && parts.ext === '.ts' && version !== 'index.ts')) {
                          _context3.next = 43;
                          break;
                        }

                        apis[file][version] = parts.name;
                        desc = (_a = metadata.find(function (x) {
                          return x.name === file;
                        })) === null || _a === void 0 ? void 0 : _a.description; // generate the index.ts

                        apiIdxPath = path.join(apisPath, file, 'index.ts');
                        apiIndexData = {
                          name: file,
                          api: apis[file]
                        };
                        _context3.next = 25;
                        return regeneratorRuntime.awrap(_this2.render('api-index.njk', apiIndexData, apiIdxPath));

                      case 25:
                        _context3.next = 27;
                        return regeneratorRuntime.awrap(_this2.getPkgPathAndData(apisPath, file, desc || ''));

                      case 27:
                        _ref = _context3.sent;
                        _ref2 = _slicedToArray(_ref, 2);
                        pkgPath = _ref2[0];
                        pkgData = _ref2[1];
                        _context3.next = 33;
                        return regeneratorRuntime.awrap(_this2.render('package.json', pkgData, pkgPath));

                      case 33:
                        // generate the README.md
                        rdPath = path.join(apisPath, file, 'README.md');
                        disclaimer = disclaimers.find(function (disclaimer) {
                          return disclaimer.api === file;
                        });
                        _context3.next = 37;
                        return regeneratorRuntime.awrap(_this2.render('README.md.njk', {
                          name: file,
                          desc: desc,
                          disclaimer: disclaimer
                        }, rdPath));

                      case 37:
                        // generate the tsconfig.json
                        tsPath = path.join(apisPath, file, 'tsconfig.json');
                        _context3.next = 40;
                        return regeneratorRuntime.awrap(_this2.render('tsconfig.json.njk', {}, tsPath));

                      case 40:
                        // generate the webpack.config.js
                        wpPath = path.join(apisPath, file, 'webpack.config.js');
                        _context3.next = 43;
                        return regeneratorRuntime.awrap(_this2.render('webpack.config.js.njk', {
                          name: file
                        }, wpPath));

                      case 43:
                        _iteratorNormalCompletion2 = true;
                        _context3.next = 15;
                        break;

                      case 46:
                        _context3.next = 52;
                        break;

                      case 48:
                        _context3.prev = 48;
                        _context3.t0 = _context3["catch"](13);
                        _didIteratorError2 = true;
                        _iteratorError2 = _context3.t0;

                      case 52:
                        _context3.prev = 52;
                        _context3.prev = 53;

                        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                          _iterator2["return"]();
                        }

                      case 55:
                        _context3.prev = 55;

                        if (!_didIteratorError2) {
                          _context3.next = 58;
                          break;
                        }

                        throw _iteratorError2;

                      case 58:
                        return _context3.finish(55);

                      case 59:
                        return _context3.finish(52);

                      case 60:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, null, null, [[13, 48, 52, 60], [53,, 55, 59]]);
              };

              _iterator = files[Symbol.iterator]();

            case 13:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context4.next = 22;
                break;
              }

              _context4.next = 16;
              return regeneratorRuntime.awrap(_loop());

            case 16:
              _ret = _context4.sent;

              if (!(_ret === "continue")) {
                _context4.next = 19;
                break;
              }

              return _context4.abrupt("continue", 19);

            case 19:
              _iteratorNormalCompletion = true;
              _context4.next = 13;
              break;

            case 22:
              _context4.next = 28;
              break;

            case 24:
              _context4.prev = 24;
              _context4.t0 = _context4["catch"](10);
              _didIteratorError = true;
              _iteratorError = _context4.t0;

            case 28:
              _context4.prev = 28;
              _context4.prev = 29;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 31:
              _context4.prev = 31;

              if (!_didIteratorError) {
                _context4.next = 34;
                break;
              }

              throw _iteratorError;

            case 34:
              return _context4.finish(31);

            case 35:
              return _context4.finish(28);

            case 36:
              _context4.next = 38;
              return regeneratorRuntime.awrap(this.render('index.njk', {
                apis: apis
              }, indexPath));

            case 38:
              _context4.next = 40;
              return regeneratorRuntime.awrap(this.render('root-index.njk', {
                apis: apis
              }, rootIndexPath));

            case 40:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this, [[10, 24, 28, 36], [29,, 31, 35]]);
    }
  }, {
    key: "getPkgPathAndData",
    value: function getPkgPathAndData(apisPath, file, desc) {
      var defaultVersion,
          pkgPath,
          packageData,
          pkgRaw,
          pkg,
          _args5 = arguments;
      return regeneratorRuntime.async(function getPkgPathAndData$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              defaultVersion = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : '0.1.0';
              pkgPath = path.join(apisPath, file, 'package.json');
              packageData = {
                name: file,
                desc: desc,
                version: defaultVersion
              }; // Use the version from the existing package.json, if possible:

              _context5.prev = 3;
              _context5.next = 6;
              return regeneratorRuntime.awrap(readFile(pkgPath, 'utf8'));

            case 6:
              pkgRaw = _context5.sent;
              pkg = JSON.parse(pkgRaw);
              packageData.version = pkg.version;
              _context5.next = 18;
              break;

            case 11:
              _context5.prev = 11;
              _context5.t0 = _context5["catch"](3);

              if (!(_context5.t0.code === 'ENOENT')) {
                _context5.next = 17;
                break;
              }

              console.info("".concat(pkgPath, " not found"));
              _context5.next = 18;
              break;

            case 17:
              throw _context5.t0;

            case 18:
              return _context5.abrupt("return", [pkgPath, packageData]);

            case 19:
            case "end":
              return _context5.stop();
          }
        }
      }, null, null, [[3, 11]]);
    }
    /**
     * Generate API file given discovery URL
     * @param apiDiscoveryUri URL or filename of discovery doc for API
     */

  }, {
    key: "generateAPI",
    value: function generateAPI(apiDiscoveryUrl) {
      var isUrl, file, res;
      return regeneratorRuntime.async(function generateAPI$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              isUrl = apiDiscoveryUrl.startsWith('https://');

              if (isUrl) {
                _context6.next = 10;
                break;
              }

              this.log("Reading from file ".concat(path.relative('.', apiDiscoveryUrl)));
              _context6.next = 5;
              return regeneratorRuntime.awrap(readFile(apiDiscoveryUrl, 'utf-8'));

            case 5:
              file = _context6.sent;
              _context6.next = 8;
              return regeneratorRuntime.awrap(this.generate(apiDiscoveryUrl, JSON.parse(file)));

            case 8:
              _context6.next = 16;
              break;

            case 10:
              this.log("Reading from url ".concat(apiDiscoveryUrl));
              _context6.next = 13;
              return regeneratorRuntime.awrap(gaxios_1.request({
                url: apiDiscoveryUrl
              }));

            case 13:
              res = _context6.sent;
              _context6.next = 16;
              return regeneratorRuntime.awrap(this.generate(apiDiscoveryUrl, res.data));

            case 16:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "generate",
    value: function generate(apiDiscoveryUrl, schema) {
      var apiPath, exportFilename;
      return regeneratorRuntime.async(function generate$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              this.logResult(apiDiscoveryUrl, 'Generating APIs...');
              apiPath = path.join(srcPath, 'apis', schema.name);
              exportFilename = path.join(apiPath, schema.version + '.ts');
              _context7.next = 5;
              return regeneratorRuntime.awrap(mkdirp(path.dirname(exportFilename)));

            case 5:
              // populate the `method.fragment` property with samples
              samplegen_1.addFragments(schema); // generate the API (ex: src/apis/youtube/v3.ts)

              _context7.next = 8;
              return regeneratorRuntime.awrap(this.render(API_TEMPLATE, {
                api: schema
              }, exportFilename));

            case 8:
              // generate samples on disk at:
              // src/apis/<service>/samples/<version>/<method>
              // generateSamples(apiPath, schema);
              this.logResult(apiDiscoveryUrl, 'Template generation complete.');
              return _context7.abrupt("return", exportFilename);

            case 10:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    }
    /**
     * Render a nunjucks template, format it, and write to disk
     */

  }, {
    key: "render",
    value: function render(templatePath, data, outputPath) {
      var output, ext;
      return regeneratorRuntime.async(function render$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              output = this.env.render(templatePath, data);
              ext = path.extname(outputPath);

              if (ext === '.js' || ext === '.ts') {
                output = prettier.format(output, {
                  bracketSpacing: false,
                  singleQuote: true,
                  trailingComma: 'es5',
                  arrowParens: 'avoid',
                  parser: 'typescript'
                });
              }

              _context8.next = 5;
              return regeneratorRuntime.awrap(writeFile(outputPath, output, {
                encoding: 'utf8'
              }));

            case 5:
            case "end":
              return _context8.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "generateReleasePleaseConfig",
    value: function generateReleasePleaseConfig() {
      var disclaimers, excludedAPIs, apis, releasableAPIs, rootPath, releasePleaseConfig, releasePleaseManifest, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, api;

      return regeneratorRuntime.async(function generateReleasePleaseConfig$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              /*
              1. pull in disclaimers (files we're not going to generate)
              2. list all folders inside apis directory
              3. find the delta from 2 - 1
              4. fill out bootstrap sha
              */
              disclaimers = require('../../../disclaimers.json');
              excludedAPIs = disclaimers.map(function (x) {
                return x.api;
              });
              apis = fs.readdirSync(path.join(srcPath, 'apis'), {
                withFileTypes: true
              });
              releasableAPIs = apis.filter(function (e) {
                return e.isDirectory() && !excludedAPIs.includes(e.name);
              }).map(function (x) {
                return x.name;
              });
              rootPath = path.join(__dirname, '../../../'); // Bootstrap sha is used the first time the releaser runs when it grabs the initial commits
              // Afterwards, it uses the most recent release as a starting point

              releasePleaseConfig = {
                'bootstrap-sha': '6e61af34c0bfdfc3d6f973bffcd6a7e2420590d2',
                packages: {}
              };
              releasePleaseManifest = {};
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context9.prev = 10;

              for (_iterator3 = releasableAPIs[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                api = _step3.value;
                releasePleaseConfig.packages["src/apis/".concat(api)] = {};
                releasePleaseManifest["src/apis/".concat(api)] = require("../../../src/apis/".concat(api, "/package.json")).version;
              } // Include the root library in the config:


              _context9.next = 18;
              break;

            case 14:
              _context9.prev = 14;
              _context9.t0 = _context9["catch"](10);
              _didIteratorError3 = true;
              _iteratorError3 = _context9.t0;

            case 18:
              _context9.prev = 18;
              _context9.prev = 19;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 21:
              _context9.prev = 21;

              if (!_didIteratorError3) {
                _context9.next = 24;
                break;
              }

              throw _iteratorError3;

            case 24:
              return _context9.finish(21);

            case 25:
              return _context9.finish(18);

            case 26:
              releasePleaseManifest['.'] = require('../../../package.json').version;
              releasePleaseConfig.packages['.'] = {};
              fs.writeFileSync(path.resolve(rootPath, './release-please-config.json'), JSON.stringify(releasePleaseConfig, null, 2), 'utf8');
              fs.writeFileSync(path.resolve(rootPath, './.release-please-manifest.json'), JSON.stringify(releasePleaseManifest, null, 2), 'utf8');

            case 30:
            case "end":
              return _context9.stop();
          }
        }
      }, null, null, [[10, 14, 18, 26], [19,, 21, 25]]);
    }
  }]);

  return Generator;
}();

exports.Generator = Generator;

function main() {
  var argv, discoveryUrl, useCache, gen;
  return regeneratorRuntime.async(function main$(_context11) {
    while (1) {
      switch (_context11.prev = _context11.next) {
        case 0:
          argv = minimist(process.argv.slice(2));
          discoveryUrl = argv['discovery-url'];
          useCache = argv['use-cache'];
          console.log("useCache: ".concat(useCache));
          gen = new Generator({
            debug: true,
            includePrivate: false
          });

          if (!(!discoveryUrl && argv._.length > 0)) {
            _context11.next = 9;
            break;
          }

          argv._.forEach(function _callee2(url) {
            return regeneratorRuntime.async(function _callee2$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    console.log("Generating API for ".concat(url));
                    _context10.next = 3;
                    return regeneratorRuntime.awrap(gen.generateAPI('' + url));

                  case 3:
                    console.log('Generated API for ' + url);

                  case 4:
                  case "end":
                    return _context10.stop();
                }
              }
            });
          });

          _context11.next = 15;
          break;

        case 9:
          console.log('Generating APIs...');
          _context11.next = 12;
          return regeneratorRuntime.awrap(gen.generateAllAPIs(discoveryUrl || download_1.DISCOVERY_URL, useCache));

        case 12:
          // Re-generates release-please manifest and config files
          console.log('Generating .release-please-manifest.json and release-please-config.json');
          gen.generateReleasePleaseConfig();
          console.log('Finished generating APIs!');

        case 15:
        case "end":
          return _context11.stop();
      }
    }
  });
}

if (require.main === module) {
  main()["catch"](console.error);
}