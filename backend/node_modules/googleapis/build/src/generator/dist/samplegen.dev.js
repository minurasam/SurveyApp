"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllMethods = exports.generateSamples = exports.addFragments = void 0;

var path = require("path");

var mkdirp = require("mkdirp");

var prettier = require("prettier");

var nunjucks = require("nunjucks");

var filters = require("./filters");

var fs = require("fs");

var util = require("util");

var writeFile = util.promisify(fs.writeFile);
var srcPath = path.join(__dirname, '../../../src');
var TEMPLATES_DIR = path.join(srcPath, 'generator/templates'); // eslint-disable-next-line @typescript-eslint/no-var-requires

var prettierConfig = require('../../../node_modules/gts/.prettierrc.json');

prettierConfig.parser = 'babel';
var env = new nunjucks.Environment(new nunjucks.FileSystemLoader(TEMPLATES_DIR), {
  trimBlocks: true
});
env.addFilter('unRegex', filters.unRegex);
env.addFilter('cleanPropertyName', filters.cleanPropertyName);
env.addFilter('cleanComments', filters.cleanComments);
/**
 * Given a top level Schema, collect every method on all resource objects.
 * Generate a sample, format it, and and attach to the `method.fragment` field.
 * @param schema Top level schema for the API.
 */

function addFragments(schema) {
  var methods, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, method, sampleData, sample;

  return regeneratorRuntime.async(function addFragments$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          methods = getAllMethods(schema);
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context.prev = 4;

          for (_iterator = methods[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            method = _step.value;
            sampleData = getSample(schema, method);
            sampleData.standalone = false;
            sample = env.render('sample.njk', sampleData);
            sample = prettier.format(sample, prettierConfig);
            method.fragment = sample;
          }

          _context.next = 12;
          break;

        case 8:
          _context.prev = 8;
          _context.t0 = _context["catch"](4);
          _didIteratorError = true;
          _iteratorError = _context.t0;

        case 12:
          _context.prev = 12;
          _context.prev = 13;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 15:
          _context.prev = 15;

          if (!_didIteratorError) {
            _context.next = 18;
            break;
          }

          throw _iteratorError;

        case 18:
          return _context.finish(15);

        case 19:
          return _context.finish(12);

        case 20:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[4, 8, 12, 20], [13,, 15, 19]]);
}

exports.addFragments = addFragments;
/**
 * Generate all samples, and write them into the samples folder on disk.
 * @param apiPath Location on disk where the API lives.
 * @param schema The top level Schema containing API information.
 */

function generateSamples(apiPath, schema) {
  var samplesPath, methods, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, method, sampleData, samplePath, sample;

  return regeneratorRuntime.async(function generateSamples$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          samplesPath = path.join(apiPath, 'samples', schema.version);
          _context2.next = 3;
          return regeneratorRuntime.awrap(mkdirp(samplesPath));

        case 3:
          methods = getAllMethods(schema);
          _iteratorNormalCompletion2 = true;
          _didIteratorError2 = false;
          _iteratorError2 = undefined;
          _context2.prev = 7;
          _iterator2 = methods[Symbol.iterator]();

        case 9:
          if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
            _context2.next = 21;
            break;
          }

          method = _step2.value;
          sampleData = getSample(schema, method);
          sampleData.standalone = true;
          samplePath = path.join(samplesPath, "".concat(method.id, ".js"));
          sample = env.render('sample.njk', sampleData);
          sample = prettier.format(sample, prettierConfig);
          _context2.next = 18;
          return regeneratorRuntime.awrap(writeFile(samplePath, sample, {
            encoding: 'utf8'
          }));

        case 18:
          _iteratorNormalCompletion2 = true;
          _context2.next = 9;
          break;

        case 21:
          _context2.next = 27;
          break;

        case 23:
          _context2.prev = 23;
          _context2.t0 = _context2["catch"](7);
          _didIteratorError2 = true;
          _iteratorError2 = _context2.t0;

        case 27:
          _context2.prev = 27;
          _context2.prev = 28;

          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }

        case 30:
          _context2.prev = 30;

          if (!_didIteratorError2) {
            _context2.next = 33;
            break;
          }

          throw _iteratorError2;

        case 33:
          return _context2.finish(30);

        case 34:
          return _context2.finish(27);

        case 35:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[7, 23, 27, 35], [28,, 30, 34]]);
}

exports.generateSamples = generateSamples;

function getSample(schema, method) {
  var responseExample;

  if (method.response) {
    var item = schema.schemas[method.response.$ref];
    responseExample = flattenSchema(item, schema.schemas);
  }

  var requestExample;

  if (method.request) {
    var _item = schema.schemas[method.request.$ref];
    requestExample = flattenSchema(_item, schema.schemas);
  }

  var sampleData = {
    api: schema,
    method: method,
    responseExample: responseExample,
    requestExample: requestExample
  };
  return sampleData;
}
/**
 * Iterate over items in the schema recursively, and return a flattened
 * list of all methods.
 * @param bag
 * @param methods
 */


function getAllMethods(bag, methods) {
  if (!methods) {
    methods = new Array();
  }

  if (bag.methods) {
    for (var _i = 0, _Object$keys = Object.keys(bag.methods); _i < _Object$keys.length; _i++) {
      var m = _Object$keys[_i];
      methods.push(bag.methods[m]);
    }
  }

  if (bag.resources) {
    for (var _i2 = 0, _Object$keys2 = Object.keys(bag.resources); _i2 < _Object$keys2.length; _i2++) {
      var r = _Object$keys2[_i2];
      getAllMethods(bag.resources[r], methods);
    }
  }

  return methods;
}

exports.getAllMethods = getAllMethods;
/**
 * Provide a flattened representation of what the structure for a
 * given request or response could look like.
 */

function flattenSchema(item, schemas) {
  // tslint:disable-next-line no-any
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  var result = {};

  if (item.properties) {
    for (var _i3 = 0, _Object$entries = Object.entries(item.properties); _i3 < _Object$entries.length; _i3++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i3], 2),
          name = _Object$entries$_i[0],
          details = _Object$entries$_i[1];

      result[name] = getExamplePropertyValue(name, details, schemas);
    }
  }

  return result;
}

function getExamplePropertyValue(name, details, // eslint-disable-next-line @typescript-eslint/no-unused-vars
schemas) {
  switch (details.type) {
    case 'string':
      return "my_".concat(name);

    case 'boolean':
      return false;

    case 'object':
      return {};

    case 'integer':
      return 0;

    case 'array':
      return [];

    default:
      return {};
  }
}