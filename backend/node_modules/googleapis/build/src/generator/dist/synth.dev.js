"use strict"; // Copyright 2019 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSemverity = exports.getPrefix = exports.createChangelog = exports.synth = exports.Semverity = void 0;

var execa = require("execa");

var path = require("path");

var fs = require("fs");

var gaxios = require("gaxios");

var minimist = require("yargs-parser");

var generator_1 = require("./generator");

var download_1 = require("./download");

var Semverity;

(function (Semverity) {
  Semverity[Semverity["PATCH"] = 1] = "PATCH";
  Semverity[Semverity["MINOR"] = 2] = "MINOR";
  Semverity[Semverity["MAJOR"] = 3] = "MAJOR";
})(Semverity = exports.Semverity || (exports.Semverity = {}));

function synth() {
  var options,
      _a,
      _b,
      _c,
      gen,
      changeSets,
      statusResult,
      status,
      statusFiles,
      apiDir,
      files,
      token,
      dirs,
      branch,
      changelogs,
      totalSemverity,
      _iteratorNormalCompletion,
      _didIteratorError,
      _iteratorError,
      _loop,
      _iterator,
      _step,
      prefix,
      _iteratorNormalCompletion2,
      _didIteratorError2,
      _iteratorError2,
      _iterator2,
      _step2,
      err,
      _args2 = arguments;

  return regeneratorRuntime.async(function synth$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
          gen = new generator_1.Generator();
          changeSets = [];

          if (options.useCache) {
            _context2.next = 8;
            break;
          }

          console.log('Removing old APIs...');
          _context2.next = 7;
          return regeneratorRuntime.awrap(gen.generateAllAPIs(download_1.DISCOVERY_URL, false));

        case 7:
          changeSets = _context2.sent;

        case 8:
          _context2.next = 10;
          return regeneratorRuntime.awrap(execa('git', ['status', '--porcelain']));

        case 10:
          statusResult = _context2.sent;
          status = statusResult.stdout;
          statusFiles = status.split('\n').map(function (x) {
            return x.slice(3);
          });
          apiDir = path.resolve('./src/apis');
          files = fs.readdirSync(apiDir);
          token = process.env.GITHUB_TOKEN;

          if (token) {
            _context2.next = 18;
            break;
          }

          throw new Error('please include a GITHUB_TOKEN');

        case 18:
          if (!process.env.GITHUB_ACTIONS) {
            _context2.next = 23;
            break;
          }

          _context2.next = 21;
          return regeneratorRuntime.awrap(execa('git', ['config', 'user.email', 'yoshi-automation@google.com']));

        case 21:
          _context2.next = 23;
          return regeneratorRuntime.awrap(execa('git', ['config', 'user.name', 'Yoshi Automation']));

        case 23:
          dirs = files.filter(function (f) {
            return fs.statSync(path.join(apiDir, f)).isDirectory() && statusFiles.filter(function (x) {
              return x.startsWith("src/apis/".concat(f, "/"));
            }).length > 0;
          });
          console.log("Changes found in ".concat(dirs.length, " APIs"));
          branch = 'autodisco';
          changelogs = new Array();
          totalSemverity = 0;
          _context2.next = 30;
          return regeneratorRuntime.awrap(execa('git', ['checkout', '-B', branch]));

        case 30:
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context2.prev = 33;

          _loop = function _loop() {
            var dir, apiChangeSets, _createChangelog, semverity, changelog, prefix, postfix, title, message, commitParams;

            return regeneratorRuntime.async(function _loop$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    dir = _step.value;
                    apiChangeSets = changeSets.filter(function (x) {
                      return x.api.name === dir;
                    });
                    _createChangelog = createChangelog(apiChangeSets), semverity = _createChangelog.semverity, changelog = _createChangelog.changelog;
                    changelogs.push(changelog);

                    if (semverity > totalSemverity) {
                      totalSemverity = semverity;
                    }

                    prefix = getPrefix(semverity);
                    postfix = semverity === Semverity.MAJOR ? '!' : '';
                    console.log("Submitting change for ".concat(dir, "..."));
                    title = "".concat(prefix, "(").concat(dir, ")").concat(postfix, ": update the API");
                    _context.next = 11;
                    return regeneratorRuntime.awrap(execa('git', ['add', path.join('src/apis', dir)]));

                  case 11:
                    if (!(statusFiles.filter(function (x) {
                      return x.startsWith("discovery/".concat(dir, "-"));
                    }).length > 0)) {
                      _context.next = 14;
                      break;
                    }

                    _context.next = 14;
                    return regeneratorRuntime.awrap(execa('git', ['add', "discovery/".concat(dir, "-*")]));

                  case 14:
                    // Write commit message to file, since it might be large enough to
                    // cause spawn E2BIG in CI/CD:
                    message = changelog ? "".concat(title, "\n\n").concat(changelog) : title;
                    fs.writeFileSync('message.txt', message, 'utf8');
                    commitParams = ['commit', '-F', 'message.txt'];
                    _context.next = 19;
                    return regeneratorRuntime.awrap(execa('git', commitParams));

                  case 19:
                    fs.unlinkSync('message.txt');

                  case 20:
                  case "end":
                    return _context.stop();
                }
              }
            });
          };

          _iterator = dirs[Symbol.iterator]();

        case 36:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context2.next = 42;
            break;
          }

          _context2.next = 39;
          return regeneratorRuntime.awrap(_loop());

        case 39:
          _iteratorNormalCompletion = true;
          _context2.next = 36;
          break;

        case 42:
          _context2.next = 48;
          break;

        case 44:
          _context2.prev = 44;
          _context2.t0 = _context2["catch"](33);
          _didIteratorError = true;
          _iteratorError = _context2.t0;

        case 48:
          _context2.prev = 48;
          _context2.prev = 49;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 51:
          _context2.prev = 51;

          if (!_didIteratorError) {
            _context2.next = 54;
            break;
          }

          throw _iteratorError;

        case 54:
          return _context2.finish(51);

        case 55:
          return _context2.finish(48);

        case 56:
          _context2.next = 58;
          return regeneratorRuntime.awrap(execa('git', ['add', '-A']));

        case 58:
          _context2.next = 60;
          return regeneratorRuntime.awrap(execa('git', ['commit', '-m', 'feat: regenerate index files']));

        case 60:
          prefix = getPrefix(totalSemverity);
          _context2.next = 63;
          return regeneratorRuntime.awrap(execa('git', ['push', 'origin', branch, '--force']));

        case 63:
          _context2.prev = 63;
          _context2.next = 66;
          return regeneratorRuntime.awrap(gaxios.request({
            method: 'POST',
            headers: {
              Authorization: "token ".concat(token)
            },
            url: 'https://api.github.com/repos/googleapis/google-api-nodejs-client/pulls',
            data: {
              title: "".concat(prefix, ": run the generator"),
              head: branch,
              base: 'master',
              body: changelogs.join('\n\n').slice(0, 65000)
            }
          }));

        case 66:
          _context2.next = 93;
          break;

        case 68:
          _context2.prev = 68;
          _context2.t1 = _context2["catch"](63);

          if (!((_a = _context2.t1.response) === null || _a === void 0 ? void 0 : _a.data)) {
            _context2.next = 92;
            break;
          }

          console.error(_context2.t1.response.data);

          if (!((_c = (_b = _context2.t1.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.errors)) {
            _context2.next = 92;
            break;
          }

          _iteratorNormalCompletion2 = true;
          _didIteratorError2 = false;
          _iteratorError2 = undefined;
          _context2.prev = 76;

          for (_iterator2 = _context2.t1.response.data.errors[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            err = _step2.value;
            console.error(err);
          }

          _context2.next = 84;
          break;

        case 80:
          _context2.prev = 80;
          _context2.t2 = _context2["catch"](76);
          _didIteratorError2 = true;
          _iteratorError2 = _context2.t2;

        case 84:
          _context2.prev = 84;
          _context2.prev = 85;

          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }

        case 87:
          _context2.prev = 87;

          if (!_didIteratorError2) {
            _context2.next = 90;
            break;
          }

          throw _iteratorError2;

        case 90:
          return _context2.finish(87);

        case 91:
          return _context2.finish(84);

        case 92:
          throw _context2.t1;

        case 93:
          _context2.next = 95;
          return regeneratorRuntime.awrap(execa('git', ['checkout', 'master']));

        case 95:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[33, 44, 48, 56], [49,, 51, 55], [63, 68], [76, 80, 84, 92], [85,, 87, 91]]);
}

exports.synth = synth;
/**
 * Given a set of changes, generate a changelog.
 */

function createChangelog(changeSets) {
  var changelog = [];
  var semverity = getSemverity(changeSets);

  if (semverity === Semverity.MAJOR) {
    changelog.push('BREAKING CHANGE: This release has breaking changes.');
  }

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = changeSets[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var changeSet = _step3.value;

      if (changeSet.changes.length > 0) {
        changelog.push("\n#### ".concat(changeSet.api.id, "\n"));

        var _loop2 = function _loop2() {
          var action = _arr[_i];
          var inScope = changeSet.changes.filter(function (x) {
            return x.action === action;
          });

          if (inScope.length > 0) {
            changelog.push("The following keys were ".concat(action.toLowerCase(), ":"));
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = inScope[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var r = _step4.value;
                changelog.push("- ".concat(r.keyName));
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                  _iterator4["return"]();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }

            changelog.push('');
          }
        };

        for (var _i = 0, _arr = ['DELETED', 'ADDED', 'CHANGED']; _i < _arr.length; _i++) {
          _loop2();
        }
      }

      changelog.push('');
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return {
    semverity: semverity,
    changelog: changelog.join('\n')
  };
}

exports.createChangelog = createChangelog;

function getPrefix(semverity) {
  switch (semverity) {
    case Semverity.PATCH:
      return 'fix';

    case Semverity.MINOR:
    case Semverity.MAJOR:
      return 'feat';
  }
}

exports.getPrefix = getPrefix;
/**
 * Given a set of changes, figure out if the total
 * changeset is semver patch, minor, or major.
 */

function getSemverity(changeSets) {
  var semverity = Semverity.PATCH;
  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = changeSets[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var changeSet = _step5.value;
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = changeSet.changes[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var change = _step6.value;
          var changeSemverity = void 0;

          switch (change.action) {
            case 'ADDED':
              changeSemverity = Semverity.MINOR;
              break;

            case 'CHANGED':
              changeSemverity = Semverity.PATCH;
              break;

            case 'DELETED':
              changeSemverity = Semverity.MAJOR;
              break;
          }

          if (changeSemverity > semverity) {
            semverity = changeSemverity;
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
        _iterator5["return"]();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  return semverity;
}

exports.getSemverity = getSemverity;

if (require.main === module) {
  var argv = minimist(process.argv.slice(2));
  var useCache = !!argv['use-cache'];
  synth({
    useCache: useCache
  })["catch"](function (err) {
    console.error(err);
    throw err;
  });
}