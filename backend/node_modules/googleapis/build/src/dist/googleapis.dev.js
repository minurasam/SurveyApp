"use strict"; // Copyright 2012 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GoogleApis = exports.AuthPlus = void 0;

var apis_1 = require("./apis");

var googleapis_common_1 = require("googleapis-common");

Object.defineProperty(exports, "AuthPlus", {
  enumerable: true,
  get: function get() {
    return googleapis_common_1.AuthPlus;
  }
});

var GoogleApis =
/*#__PURE__*/
function (_apis_1$GeneratedAPIs) {
  _inherits(GoogleApis, _apis_1$GeneratedAPIs);

  /**
   * GoogleApis constructor.
   *
   * @example
   * ```js
   * const GoogleApis = require('googleapis').GoogleApis;
   * const google = new GoogleApis();
   * ```
   *
   * @param options - Configuration options.
   */
  function GoogleApis(options) {
    var _this;

    _classCallCheck(this, GoogleApis);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(GoogleApis).call(this));
    _this._discovery = new googleapis_common_1.Discovery({
      debug: false,
      includePrivate: false
    });
    _this.auth = new googleapis_common_1.AuthPlus();
    _this._options = {};

    _this.options(options);

    return _this;
  }
  /**
   * Obtain a Map of supported APIs, along with included API versions.
   */


  _createClass(GoogleApis, [{
    key: "getSupportedAPIs",
    value: function getSupportedAPIs() {
      var apiMap = {};
      Object.keys(apis_1.APIS).forEach(function (a) {
        apiMap[a] = Object.keys(apis_1.APIS[a]);
      });
      return apiMap;
    }
    /**
     * Set options.
     *
     * @param options - Configuration options.
     */

  }, {
    key: "options",
    value: function options(_options) {
      this._options = _options || {};
    }
    /**
     * Add APIs endpoints to googleapis object
     * E.g. googleapis.drive and googleapis.datastore
     *
     * @param apisToAdd - Apis to be added to this GoogleApis instance.
     */

  }, {
    key: "addAPIs",
    value: function addAPIs(apisToAdd) {
      for (var apiName in apisToAdd) {
        // eslint-disable-next-line no-prototype-builtins
        if (apisToAdd.hasOwnProperty(apiName)) {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this[apiName] = apisToAdd[apiName].bind(this);
        }
      }
    }
  }, {
    key: "discover",
    value: function discover(url, callback) {
      if (callback) {
        this.discoverAsync(url).then(function () {
          return callback();
        })["catch"](callback);
      } else {
        return this.discoverAsync(url);
      }
    }
  }, {
    key: "discoverAsync",
    value: function discoverAsync(url) {
      var allApis;
      return regeneratorRuntime.async(function discoverAsync$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(this._discovery.discoverAllAPIs(url));

            case 2:
              allApis = _context.sent;
              this.addAPIs(allApis);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
    /**
     * Dynamically generate an Endpoint object from a discovery doc.
     *
     * @param path - Url or file path to discover doc for a single API.
     * @param options - Options to configure the Endpoint object generated from the discovery doc.
     * @returns A promise that resolves with the configured endpoint.
     */

  }, {
    key: "discoverAPI",
    value: function discoverAPI(apiPath) {
      var options,
          endpointCreator,
          ep,
          _args2 = arguments;
      return regeneratorRuntime.async(function discoverAPI$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
              _context2.next = 3;
              return regeneratorRuntime.awrap(this._discovery.discoverAPI(apiPath));

            case 3:
              endpointCreator = _context2.sent;
              ep = endpointCreator(options, this);
              ep.google = this; // for drive.google.transporter

              return _context2.abrupt("return", Object.freeze(ep));

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }]);

  return GoogleApis;
}(apis_1.GeneratedAPIs);

exports.GoogleApis = GoogleApis;