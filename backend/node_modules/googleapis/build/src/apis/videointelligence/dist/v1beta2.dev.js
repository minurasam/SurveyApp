"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.videointelligence_v1beta2 = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/class-name-casing */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-disable no-irregular-whitespace */

var googleapis_common_1 = require("googleapis-common");

var videointelligence_v1beta2;

(function (videointelligence_v1beta2) {
  /**
   * Cloud Video Intelligence API
   *
   * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const videointelligence = google.videointelligence('v1beta2');
   * ```
   */
  var Videointelligence = function Videointelligence(options, google) {
    _classCallCheck(this, Videointelligence);

    this.context = {
      _options: options || {},
      google: google
    };
    this.videos = new Resource$Videos(this.context);
  };

  videointelligence_v1beta2.Videointelligence = Videointelligence;

  var Resource$Videos =
  /*#__PURE__*/
  function () {
    function Resource$Videos(context) {
      _classCallCheck(this, Resource$Videos);

      this.context = context;
    }

    _createClass(Resource$Videos, [{
      key: "annotate",
      value: function annotate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://videointelligence.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/videos:annotate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Videos;
  }();

  videointelligence_v1beta2.Resource$Videos = Resource$Videos;
})(videointelligence_v1beta2 = exports.videointelligence_v1beta2 || (exports.videointelligence_v1beta2 = {}));