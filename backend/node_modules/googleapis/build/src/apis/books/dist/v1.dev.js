"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.books_v1 = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/class-name-casing */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-disable no-irregular-whitespace */

var googleapis_common_1 = require("googleapis-common");

var books_v1;

(function (books_v1) {
  /**
   * Books API
   *
   * The Google Books API allows clients to access the Google Books repository.
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const books = google.books('v1');
   * ```
   */
  var Books = function Books(options, google) {
    _classCallCheck(this, Books);

    this.context = {
      _options: options || {},
      google: google
    };
    this.bookshelves = new Resource$Bookshelves(this.context);
    this.cloudloading = new Resource$Cloudloading(this.context);
    this.dictionary = new Resource$Dictionary(this.context);
    this.familysharing = new Resource$Familysharing(this.context);
    this.layers = new Resource$Layers(this.context);
    this.myconfig = new Resource$Myconfig(this.context);
    this.mylibrary = new Resource$Mylibrary(this.context);
    this.notification = new Resource$Notification(this.context);
    this.onboarding = new Resource$Onboarding(this.context);
    this.personalizedstream = new Resource$Personalizedstream(this.context);
    this.promooffer = new Resource$Promooffer(this.context);
    this.series = new Resource$Series(this.context);
    this.volumes = new Resource$Volumes(this.context);
  };

  books_v1.Books = Books;

  var Resource$Bookshelves =
  /*#__PURE__*/
  function () {
    function Resource$Bookshelves(context) {
      _classCallCheck(this, Resource$Bookshelves);

      this.context = context;
      this.volumes = new Resource$Bookshelves$Volumes(this.context);
    }

    _createClass(Resource$Bookshelves, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['userId', 'shelf'],
          pathParams: ['shelf', 'userId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/users/{userId}/bookshelves').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['userId'],
          pathParams: ['userId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bookshelves;
  }();

  books_v1.Resource$Bookshelves = Resource$Bookshelves;

  var Resource$Bookshelves$Volumes =
  /*#__PURE__*/
  function () {
    function Resource$Bookshelves$Volumes(context) {
      _classCallCheck(this, Resource$Bookshelves$Volumes);

      this.context = context;
    }

    _createClass(Resource$Bookshelves$Volumes, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}/volumes').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['userId', 'shelf'],
          pathParams: ['shelf', 'userId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bookshelves$Volumes;
  }();

  books_v1.Resource$Bookshelves$Volumes = Resource$Bookshelves$Volumes;

  var Resource$Cloudloading =
  /*#__PURE__*/
  function () {
    function Resource$Cloudloading(context) {
      _classCallCheck(this, Resource$Cloudloading);

      this.context = context;
    }

    _createClass(Resource$Cloudloading, [{
      key: "addBook",
      value: function addBook(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/cloudloading/addBook').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "deleteBook",
      value: function deleteBook(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/cloudloading/deleteBook').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['volumeId'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateBook",
      value: function updateBook(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/cloudloading/updateBook').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Cloudloading;
  }();

  books_v1.Resource$Cloudloading = Resource$Cloudloading;

  var Resource$Dictionary =
  /*#__PURE__*/
  function () {
    function Resource$Dictionary(context) {
      _classCallCheck(this, Resource$Dictionary);

      this.context = context;
    }

    _createClass(Resource$Dictionary, [{
      key: "listOfflineMetadata",
      value: function listOfflineMetadata(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/dictionary/listOfflineMetadata').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['cpksver'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Dictionary;
  }();

  books_v1.Resource$Dictionary = Resource$Dictionary;

  var Resource$Familysharing =
  /*#__PURE__*/
  function () {
    function Resource$Familysharing(context) {
      _classCallCheck(this, Resource$Familysharing);

      this.context = context;
    }

    _createClass(Resource$Familysharing, [{
      key: "getFamilyInfo",
      value: function getFamilyInfo(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/familysharing/getFamilyInfo').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "share",
      value: function share(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/familysharing/share').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "unshare",
      value: function unshare(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/familysharing/unshare').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Familysharing;
  }();

  books_v1.Resource$Familysharing = Resource$Familysharing;

  var Resource$Layers =
  /*#__PURE__*/
  function () {
    function Resource$Layers(context) {
      _classCallCheck(this, Resource$Layers);

      this.context = context;
      this.annotationData = new Resource$Layers$Annotationdata(this.context);
      this.volumeAnnotations = new Resource$Layers$Volumeannotations(this.context);
    }

    _createClass(Resource$Layers, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary/{summaryId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['volumeId', 'summaryId'],
          pathParams: ['summaryId', 'volumeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['volumeId'],
          pathParams: ['volumeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Layers;
  }();

  books_v1.Resource$Layers = Resource$Layers;

  var Resource$Layers$Annotationdata =
  /*#__PURE__*/
  function () {
    function Resource$Layers$Annotationdata(context) {
      _classCallCheck(this, Resource$Layers$Annotationdata);

      this.context = context;
    }

    _createClass(Resource$Layers$Annotationdata, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['volumeId', 'layerId', 'annotationDataId', 'contentVersion'],
          pathParams: ['annotationDataId', 'layerId', 'volumeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['volumeId', 'layerId', 'contentVersion'],
          pathParams: ['layerId', 'volumeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Layers$Annotationdata;
  }();

  books_v1.Resource$Layers$Annotationdata = Resource$Layers$Annotationdata;

  var Resource$Layers$Volumeannotations =
  /*#__PURE__*/
  function () {
    function Resource$Layers$Volumeannotations(context) {
      _classCallCheck(this, Resource$Layers$Volumeannotations);

      this.context = context;
    }

    _createClass(Resource$Layers$Volumeannotations, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['volumeId', 'layerId', 'annotationId'],
          pathParams: ['annotationId', 'layerId', 'volumeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['volumeId', 'layerId', 'contentVersion'],
          pathParams: ['layerId', 'volumeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Layers$Volumeannotations;
  }();

  books_v1.Resource$Layers$Volumeannotations = Resource$Layers$Volumeannotations;

  var Resource$Myconfig =
  /*#__PURE__*/
  function () {
    function Resource$Myconfig(context) {
      _classCallCheck(this, Resource$Myconfig);

      this.context = context;
    }

    _createClass(Resource$Myconfig, [{
      key: "getUserSettings",
      value: function getUserSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/myconfig/getUserSettings').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "releaseDownloadAccess",
      value: function releaseDownloadAccess(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/myconfig/releaseDownloadAccess').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['cpksver', 'volumeIds'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "requestAccess",
      value: function requestAccess(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/myconfig/requestAccess').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['cpksver', 'nonce', 'source', 'volumeId'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "syncVolumeLicenses",
      value: function syncVolumeLicenses(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/myconfig/syncVolumeLicenses').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['cpksver', 'nonce', 'source'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateUserSettings",
      value: function updateUserSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/myconfig/updateUserSettings').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Myconfig;
  }();

  books_v1.Resource$Myconfig = Resource$Myconfig;

  var Resource$Mylibrary = function Resource$Mylibrary(context) {
    _classCallCheck(this, Resource$Mylibrary);

    this.context = context;
    this.annotations = new Resource$Mylibrary$Annotations(this.context);
    this.bookshelves = new Resource$Mylibrary$Bookshelves(this.context);
    this.readingpositions = new Resource$Mylibrary$Readingpositions(this.context);
  };

  books_v1.Resource$Mylibrary = Resource$Mylibrary;

  var Resource$Mylibrary$Annotations =
  /*#__PURE__*/
  function () {
    function Resource$Mylibrary$Annotations(context) {
      _classCallCheck(this, Resource$Mylibrary$Annotations);

      this.context = context;
    }

    _createClass(Resource$Mylibrary$Annotations, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['annotationId'],
          pathParams: ['annotationId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "summary",
      value: function summary(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/mylibrary/annotations/summary').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['layerIds', 'volumeId'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['annotationId'],
          pathParams: ['annotationId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Mylibrary$Annotations;
  }();

  books_v1.Resource$Mylibrary$Annotations = Resource$Mylibrary$Annotations;

  var Resource$Mylibrary$Bookshelves =
  /*#__PURE__*/
  function () {
    function Resource$Mylibrary$Bookshelves(context) {
      _classCallCheck(this, Resource$Mylibrary$Bookshelves);

      this.context = context;
      this.volumes = new Resource$Mylibrary$Bookshelves$Volumes(this.context);
    }

    _createClass(Resource$Mylibrary$Bookshelves, [{
      key: "addVolume",
      value: function addVolume(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/addVolume').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['shelf', 'volumeId'],
          pathParams: ['shelf'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "clearVolumes",
      value: function clearVolumes(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/clearVolumes').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['shelf'],
          pathParams: ['shelf'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['shelf'],
          pathParams: ['shelf'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/mylibrary/bookshelves').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "moveVolume",
      value: function moveVolume(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/moveVolume').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['shelf', 'volumeId', 'volumePosition'],
          pathParams: ['shelf'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "removeVolume",
      value: function removeVolume(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/removeVolume').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['shelf', 'volumeId'],
          pathParams: ['shelf'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Mylibrary$Bookshelves;
  }();

  books_v1.Resource$Mylibrary$Bookshelves = Resource$Mylibrary$Bookshelves;

  var Resource$Mylibrary$Bookshelves$Volumes =
  /*#__PURE__*/
  function () {
    function Resource$Mylibrary$Bookshelves$Volumes(context) {
      _classCallCheck(this, Resource$Mylibrary$Bookshelves$Volumes);

      this.context = context;
    }

    _createClass(Resource$Mylibrary$Bookshelves$Volumes, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/volumes').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['shelf'],
          pathParams: ['shelf'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Mylibrary$Bookshelves$Volumes;
  }();

  books_v1.Resource$Mylibrary$Bookshelves$Volumes = Resource$Mylibrary$Bookshelves$Volumes;

  var Resource$Mylibrary$Readingpositions =
  /*#__PURE__*/
  function () {
    function Resource$Mylibrary$Readingpositions(context) {
      _classCallCheck(this, Resource$Mylibrary$Readingpositions);

      this.context = context;
    }

    _createClass(Resource$Mylibrary$Readingpositions, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['volumeId'],
          pathParams: ['volumeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "setPosition",
      value: function setPosition(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}/setPosition').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['volumeId', 'position', 'timestamp'],
          pathParams: ['volumeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Mylibrary$Readingpositions;
  }();

  books_v1.Resource$Mylibrary$Readingpositions = Resource$Mylibrary$Readingpositions;

  var Resource$Notification =
  /*#__PURE__*/
  function () {
    function Resource$Notification(context) {
      _classCallCheck(this, Resource$Notification);

      this.context = context;
    }

    _createClass(Resource$Notification, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/notification/get').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['notification_id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Notification;
  }();

  books_v1.Resource$Notification = Resource$Notification;

  var Resource$Onboarding =
  /*#__PURE__*/
  function () {
    function Resource$Onboarding(context) {
      _classCallCheck(this, Resource$Onboarding);

      this.context = context;
    }

    _createClass(Resource$Onboarding, [{
      key: "listCategories",
      value: function listCategories(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/onboarding/listCategories').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "listCategoryVolumes",
      value: function listCategoryVolumes(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/onboarding/listCategoryVolumes').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Onboarding;
  }();

  books_v1.Resource$Onboarding = Resource$Onboarding;

  var Resource$Personalizedstream =
  /*#__PURE__*/
  function () {
    function Resource$Personalizedstream(context) {
      _classCallCheck(this, Resource$Personalizedstream);

      this.context = context;
    }

    _createClass(Resource$Personalizedstream, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/personalizedstream/get').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Personalizedstream;
  }();

  books_v1.Resource$Personalizedstream = Resource$Personalizedstream;

  var Resource$Promooffer =
  /*#__PURE__*/
  function () {
    function Resource$Promooffer(context) {
      _classCallCheck(this, Resource$Promooffer);

      this.context = context;
    }

    _createClass(Resource$Promooffer, [{
      key: "accept",
      value: function accept(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/promooffer/accept').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "dismiss",
      value: function dismiss(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/promooffer/dismiss').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/promooffer/get').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Promooffer;
  }();

  books_v1.Resource$Promooffer = Resource$Promooffer;

  var Resource$Series =
  /*#__PURE__*/
  function () {
    function Resource$Series(context) {
      _classCallCheck(this, Resource$Series);

      this.context = context;
      this.membership = new Resource$Series$Membership(this.context);
    }

    _createClass(Resource$Series, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/series/get').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['series_id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Series;
  }();

  books_v1.Resource$Series = Resource$Series;

  var Resource$Series$Membership =
  /*#__PURE__*/
  function () {
    function Resource$Series$Membership(context) {
      _classCallCheck(this, Resource$Series$Membership);

      this.context = context;
    }

    _createClass(Resource$Series$Membership, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/series/membership/get').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['series_id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Series$Membership;
  }();

  books_v1.Resource$Series$Membership = Resource$Series$Membership;

  var Resource$Volumes =
  /*#__PURE__*/
  function () {
    function Resource$Volumes(context) {
      _classCallCheck(this, Resource$Volumes);

      this.context = context;
      this.associated = new Resource$Volumes$Associated(this.context);
      this.mybooks = new Resource$Volumes$Mybooks(this.context);
      this.recommended = new Resource$Volumes$Recommended(this.context);
      this.useruploaded = new Resource$Volumes$Useruploaded(this.context);
    }

    _createClass(Resource$Volumes, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/volumes/{volumeId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['volumeId'],
          pathParams: ['volumeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/volumes').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['q'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Volumes;
  }();

  books_v1.Resource$Volumes = Resource$Volumes;

  var Resource$Volumes$Associated =
  /*#__PURE__*/
  function () {
    function Resource$Volumes$Associated(context) {
      _classCallCheck(this, Resource$Volumes$Associated);

      this.context = context;
    }

    _createClass(Resource$Volumes$Associated, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/volumes/{volumeId}/associated').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['volumeId'],
          pathParams: ['volumeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Volumes$Associated;
  }();

  books_v1.Resource$Volumes$Associated = Resource$Volumes$Associated;

  var Resource$Volumes$Mybooks =
  /*#__PURE__*/
  function () {
    function Resource$Volumes$Mybooks(context) {
      _classCallCheck(this, Resource$Volumes$Mybooks);

      this.context = context;
    }

    _createClass(Resource$Volumes$Mybooks, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/volumes/mybooks').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Volumes$Mybooks;
  }();

  books_v1.Resource$Volumes$Mybooks = Resource$Volumes$Mybooks;

  var Resource$Volumes$Recommended =
  /*#__PURE__*/
  function () {
    function Resource$Volumes$Recommended(context) {
      _classCallCheck(this, Resource$Volumes$Recommended);

      this.context = context;
    }

    _createClass(Resource$Volumes$Recommended, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/volumes/recommended').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "rate",
      value: function rate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/volumes/recommended/rate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['rating', 'volumeId'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Volumes$Recommended;
  }();

  books_v1.Resource$Volumes$Recommended = Resource$Volumes$Recommended;

  var Resource$Volumes$Useruploaded =
  /*#__PURE__*/
  function () {
    function Resource$Volumes$Useruploaded(context) {
      _classCallCheck(this, Resource$Volumes$Useruploaded);

      this.context = context;
    }

    _createClass(Resource$Volumes$Useruploaded, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/books/v1/volumes/useruploaded').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Volumes$Useruploaded;
  }();

  books_v1.Resource$Volumes$Useruploaded = Resource$Volumes$Useruploaded;
})(books_v1 = exports.books_v1 || (exports.books_v1 = {}));