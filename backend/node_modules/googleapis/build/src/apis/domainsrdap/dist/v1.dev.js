"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.domainsrdap_v1 = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/class-name-casing */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-disable no-irregular-whitespace */

var googleapis_common_1 = require("googleapis-common");

var domainsrdap_v1;

(function (domainsrdap_v1) {
  /**
   * Domains RDAP API
   *
   * Read-only public API that lets users search for information about domain names.
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const domainsrdap = google.domainsrdap('v1');
   * ```
   */
  var Domainsrdap = function Domainsrdap(options, google) {
    _classCallCheck(this, Domainsrdap);

    this.context = {
      _options: options || {},
      google: google
    };
    this.autnum = new Resource$Autnum(this.context);
    this.domain = new Resource$Domain(this.context);
    this.entity = new Resource$Entity(this.context);
    this.ip = new Resource$Ip(this.context);
    this.nameserver = new Resource$Nameserver(this.context);
    this.v1 = new Resource$V1(this.context);
  };

  domainsrdap_v1.Domainsrdap = Domainsrdap;

  var Resource$Autnum =
  /*#__PURE__*/
  function () {
    function Resource$Autnum(context) {
      _classCallCheck(this, Resource$Autnum);

      this.context = context;
    }

    _createClass(Resource$Autnum, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/autnum/{autnumId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['autnumId'],
          pathParams: ['autnumId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Autnum;
  }();

  domainsrdap_v1.Resource$Autnum = Resource$Autnum;

  var Resource$Domain =
  /*#__PURE__*/
  function () {
    function Resource$Domain(context) {
      _classCallCheck(this, Resource$Domain);

      this.context = context;
    }

    _createClass(Resource$Domain, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/domain/{+domainName}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['domainName'],
          pathParams: ['domainName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Domain;
  }();

  domainsrdap_v1.Resource$Domain = Resource$Domain;

  var Resource$Entity =
  /*#__PURE__*/
  function () {
    function Resource$Entity(context) {
      _classCallCheck(this, Resource$Entity);

      this.context = context;
    }

    _createClass(Resource$Entity, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/entity/{entityId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['entityId'],
          pathParams: ['entityId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Entity;
  }();

  domainsrdap_v1.Resource$Entity = Resource$Entity;

  var Resource$Ip =
  /*#__PURE__*/
  function () {
    function Resource$Ip(context) {
      _classCallCheck(this, Resource$Ip);

      this.context = context;
    }

    _createClass(Resource$Ip, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/ip/{ipId}/{ipId1}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['ipId', 'ipId1'],
          pathParams: ['ipId', 'ipId1'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Ip;
  }();

  domainsrdap_v1.Resource$Ip = Resource$Ip;

  var Resource$Nameserver =
  /*#__PURE__*/
  function () {
    function Resource$Nameserver(context) {
      _classCallCheck(this, Resource$Nameserver);

      this.context = context;
    }

    _createClass(Resource$Nameserver, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/nameserver/{nameserverId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['nameserverId'],
          pathParams: ['nameserverId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Nameserver;
  }();

  domainsrdap_v1.Resource$Nameserver = Resource$Nameserver;

  var Resource$V1 =
  /*#__PURE__*/
  function () {
    function Resource$V1(context) {
      _classCallCheck(this, Resource$V1);

      this.context = context;
    }

    _createClass(Resource$V1, [{
      key: "getDomains",
      value: function getDomains(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/domains').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getEntities",
      value: function getEntities(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/entities').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getHelp",
      value: function getHelp(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/help').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getIp",
      value: function getIp(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/ip').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getNameservers",
      value: function getNameservers(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/nameservers').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$V1;
  }();

  domainsrdap_v1.Resource$V1 = Resource$V1;
})(domainsrdap_v1 = exports.domainsrdap_v1 || (exports.domainsrdap_v1 = {}));