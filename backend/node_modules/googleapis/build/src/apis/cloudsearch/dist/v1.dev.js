"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cloudsearch_v1 = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/class-name-casing */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-disable no-irregular-whitespace */

var googleapis_common_1 = require("googleapis-common");

var cloudsearch_v1;

(function (cloudsearch_v1) {
  /**
   * Cloud Search API
   *
   * Cloud Search provides cloud-based search capabilities over G Suite data. The Cloud Search API allows indexing of non-G Suite data into Cloud Search.
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const cloudsearch = google.cloudsearch('v1');
   * ```
   */
  var Cloudsearch = function Cloudsearch(options, google) {
    _classCallCheck(this, Cloudsearch);

    this.context = {
      _options: options || {},
      google: google
    };
    this.debug = new Resource$Debug(this.context);
    this.indexing = new Resource$Indexing(this.context);
    this.media = new Resource$Media(this.context);
    this.operations = new Resource$Operations(this.context);
    this.query = new Resource$Query(this.context);
    this.settings = new Resource$Settings(this.context);
    this.stats = new Resource$Stats(this.context);
  };

  cloudsearch_v1.Cloudsearch = Cloudsearch;

  var Resource$Debug = function Resource$Debug(context) {
    _classCallCheck(this, Resource$Debug);

    this.context = context;
    this.datasources = new Resource$Debug$Datasources(this.context);
    this.identitysources = new Resource$Debug$Identitysources(this.context);
  };

  cloudsearch_v1.Resource$Debug = Resource$Debug;

  var Resource$Debug$Datasources = function Resource$Debug$Datasources(context) {
    _classCallCheck(this, Resource$Debug$Datasources);

    this.context = context;
    this.items = new Resource$Debug$Datasources$Items(this.context);
  };

  cloudsearch_v1.Resource$Debug$Datasources = Resource$Debug$Datasources;

  var Resource$Debug$Datasources$Items =
  /*#__PURE__*/
  function () {
    function Resource$Debug$Datasources$Items(context) {
      _classCallCheck(this, Resource$Debug$Datasources$Items);

      this.context = context;
      this.unmappedids = new Resource$Debug$Datasources$Items$Unmappedids(this.context);
    }

    _createClass(Resource$Debug$Datasources$Items, [{
      key: "checkAccess",
      value: function checkAccess(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/debug/{+name}:checkAccess').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "searchByViewUrl",
      value: function searchByViewUrl(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/debug/{+name}/items:searchByViewUrl').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Debug$Datasources$Items;
  }();

  cloudsearch_v1.Resource$Debug$Datasources$Items = Resource$Debug$Datasources$Items;

  var Resource$Debug$Datasources$Items$Unmappedids =
  /*#__PURE__*/
  function () {
    function Resource$Debug$Datasources$Items$Unmappedids(context) {
      _classCallCheck(this, Resource$Debug$Datasources$Items$Unmappedids);

      this.context = context;
    }

    _createClass(Resource$Debug$Datasources$Items$Unmappedids, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Debug$Datasources$Items$Unmappedids;
  }();

  cloudsearch_v1.Resource$Debug$Datasources$Items$Unmappedids = Resource$Debug$Datasources$Items$Unmappedids;

  var Resource$Debug$Identitysources = function Resource$Debug$Identitysources(context) {
    _classCallCheck(this, Resource$Debug$Identitysources);

    this.context = context;
    this.items = new Resource$Debug$Identitysources$Items(this.context);
    this.unmappedids = new Resource$Debug$Identitysources$Unmappedids(this.context);
  };

  cloudsearch_v1.Resource$Debug$Identitysources = Resource$Debug$Identitysources;

  var Resource$Debug$Identitysources$Items =
  /*#__PURE__*/
  function () {
    function Resource$Debug$Identitysources$Items(context) {
      _classCallCheck(this, Resource$Debug$Identitysources$Items);

      this.context = context;
    }

    _createClass(Resource$Debug$Identitysources$Items, [{
      key: "listForunmappedidentity",
      value: function listForunmappedidentity(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/debug/{+parent}/items:forunmappedidentity').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Debug$Identitysources$Items;
  }();

  cloudsearch_v1.Resource$Debug$Identitysources$Items = Resource$Debug$Identitysources$Items;

  var Resource$Debug$Identitysources$Unmappedids =
  /*#__PURE__*/
  function () {
    function Resource$Debug$Identitysources$Unmappedids(context) {
      _classCallCheck(this, Resource$Debug$Identitysources$Unmappedids);

      this.context = context;
    }

    _createClass(Resource$Debug$Identitysources$Unmappedids, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Debug$Identitysources$Unmappedids;
  }();

  cloudsearch_v1.Resource$Debug$Identitysources$Unmappedids = Resource$Debug$Identitysources$Unmappedids;

  var Resource$Indexing = function Resource$Indexing(context) {
    _classCallCheck(this, Resource$Indexing);

    this.context = context;
    this.datasources = new Resource$Indexing$Datasources(this.context);
  };

  cloudsearch_v1.Resource$Indexing = Resource$Indexing;

  var Resource$Indexing$Datasources =
  /*#__PURE__*/
  function () {
    function Resource$Indexing$Datasources(context) {
      _classCallCheck(this, Resource$Indexing$Datasources);

      this.context = context;
      this.items = new Resource$Indexing$Datasources$Items(this.context);
    }

    _createClass(Resource$Indexing$Datasources, [{
      key: "deleteSchema",
      value: function deleteSchema(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getSchema",
      value: function getSchema(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateSchema",
      value: function updateSchema(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Indexing$Datasources;
  }();

  cloudsearch_v1.Resource$Indexing$Datasources = Resource$Indexing$Datasources;

  var Resource$Indexing$Datasources$Items =
  /*#__PURE__*/
  function () {
    function Resource$Indexing$Datasources$Items(context) {
      _classCallCheck(this, Resource$Indexing$Datasources$Items);

      this.context = context;
    }

    _createClass(Resource$Indexing$Datasources$Items, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "deleteQueueItems",
      value: function deleteQueueItems(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/indexing/{+name}/items:deleteQueueItems').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "index",
      value: function index(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/indexing/{+name}:index').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/indexing/{+name}/items').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "poll",
      value: function poll(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/indexing/{+name}/items:poll').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "push",
      value: function push(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/indexing/{+name}:push').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "unreserve",
      value: function unreserve(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/indexing/{+name}/items:unreserve').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "upload",
      value: function upload(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/indexing/{+name}:upload').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Indexing$Datasources$Items;
  }();

  cloudsearch_v1.Resource$Indexing$Datasources$Items = Resource$Indexing$Datasources$Items;

  var Resource$Media =
  /*#__PURE__*/
  function () {
    function Resource$Media(context) {
      _classCallCheck(this, Resource$Media);

      this.context = context;
    }

    _createClass(Resource$Media, [{
      key: "upload",
      value: function upload(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/media/{+resourceName}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          mediaUrl: (rootUrl + '/upload/v1/media/{+resourceName}').replace(/([^:]\/)\/+/g, '$1'),
          requiredParams: ['resourceName'],
          pathParams: ['resourceName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Media;
  }();

  cloudsearch_v1.Resource$Media = Resource$Media;

  var Resource$Operations =
  /*#__PURE__*/
  function () {
    function Resource$Operations(context) {
      _classCallCheck(this, Resource$Operations);

      this.context = context;
      this.lro = new Resource$Operations$Lro(this.context);
    }

    _createClass(Resource$Operations, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Operations;
  }();

  cloudsearch_v1.Resource$Operations = Resource$Operations;

  var Resource$Operations$Lro =
  /*#__PURE__*/
  function () {
    function Resource$Operations$Lro(context) {
      _classCallCheck(this, Resource$Operations$Lro);

      this.context = context;
    }

    _createClass(Resource$Operations$Lro, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/{+name}/lro').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Operations$Lro;
  }();

  cloudsearch_v1.Resource$Operations$Lro = Resource$Operations$Lro;

  var Resource$Query =
  /*#__PURE__*/
  function () {
    function Resource$Query(context) {
      _classCallCheck(this, Resource$Query);

      this.context = context;
      this.sources = new Resource$Query$Sources(this.context);
    }

    _createClass(Resource$Query, [{
      key: "search",
      value: function search(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/query/search').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "suggest",
      value: function suggest(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/query/suggest').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Query;
  }();

  cloudsearch_v1.Resource$Query = Resource$Query;

  var Resource$Query$Sources =
  /*#__PURE__*/
  function () {
    function Resource$Query$Sources(context) {
      _classCallCheck(this, Resource$Query$Sources);

      this.context = context;
    }

    _createClass(Resource$Query$Sources, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/query/sources').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Query$Sources;
  }();

  cloudsearch_v1.Resource$Query$Sources = Resource$Query$Sources;

  var Resource$Settings =
  /*#__PURE__*/
  function () {
    function Resource$Settings(context) {
      _classCallCheck(this, Resource$Settings);

      this.context = context;
      this.datasources = new Resource$Settings$Datasources(this.context);
      this.searchapplications = new Resource$Settings$Searchapplications(this.context);
    }

    _createClass(Resource$Settings, [{
      key: "getCustomer",
      value: function getCustomer(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/settings/customer').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateCustomer",
      value: function updateCustomer(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/settings/customer').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Settings;
  }();

  cloudsearch_v1.Resource$Settings = Resource$Settings;

  var Resource$Settings$Datasources =
  /*#__PURE__*/
  function () {
    function Resource$Settings$Datasources(context) {
      _classCallCheck(this, Resource$Settings$Datasources);

      this.context = context;
    }

    _createClass(Resource$Settings$Datasources, [{
      key: "create",
      value: function create(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Settings$Datasources;
  }();

  cloudsearch_v1.Resource$Settings$Datasources = Resource$Settings$Datasources;

  var Resource$Settings$Searchapplications =
  /*#__PURE__*/
  function () {
    function Resource$Settings$Searchapplications(context) {
      _classCallCheck(this, Resource$Settings$Searchapplications);

      this.context = context;
    }

    _createClass(Resource$Settings$Searchapplications, [{
      key: "create",
      value: function create(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "reset",
      value: function reset(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/settings/{+name}:reset').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Settings$Searchapplications;
  }();

  cloudsearch_v1.Resource$Settings$Searchapplications = Resource$Settings$Searchapplications;

  var Resource$Stats =
  /*#__PURE__*/
  function () {
    function Resource$Stats(context) {
      _classCallCheck(this, Resource$Stats);

      this.context = context;
      this.index = new Resource$Stats$Index(this.context);
      this.query = new Resource$Stats$Query(this.context);
      this.session = new Resource$Stats$Session(this.context);
      this.user = new Resource$Stats$User(this.context);
    }

    _createClass(Resource$Stats, [{
      key: "getIndex",
      value: function getIndex(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/stats/index').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getQuery",
      value: function getQuery(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/stats/query').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getSession",
      value: function getSession(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/stats/session').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getUser",
      value: function getUser(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/stats/user').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Stats;
  }();

  cloudsearch_v1.Resource$Stats = Resource$Stats;

  var Resource$Stats$Index = function Resource$Stats$Index(context) {
    _classCallCheck(this, Resource$Stats$Index);

    this.context = context;
    this.datasources = new Resource$Stats$Index$Datasources(this.context);
  };

  cloudsearch_v1.Resource$Stats$Index = Resource$Stats$Index;

  var Resource$Stats$Index$Datasources =
  /*#__PURE__*/
  function () {
    function Resource$Stats$Index$Datasources(context) {
      _classCallCheck(this, Resource$Stats$Index$Datasources);

      this.context = context;
    }

    _createClass(Resource$Stats$Index$Datasources, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/stats/index/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Stats$Index$Datasources;
  }();

  cloudsearch_v1.Resource$Stats$Index$Datasources = Resource$Stats$Index$Datasources;

  var Resource$Stats$Query = function Resource$Stats$Query(context) {
    _classCallCheck(this, Resource$Stats$Query);

    this.context = context;
    this.searchapplications = new Resource$Stats$Query$Searchapplications(this.context);
  };

  cloudsearch_v1.Resource$Stats$Query = Resource$Stats$Query;

  var Resource$Stats$Query$Searchapplications =
  /*#__PURE__*/
  function () {
    function Resource$Stats$Query$Searchapplications(context) {
      _classCallCheck(this, Resource$Stats$Query$Searchapplications);

      this.context = context;
    }

    _createClass(Resource$Stats$Query$Searchapplications, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/stats/query/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Stats$Query$Searchapplications;
  }();

  cloudsearch_v1.Resource$Stats$Query$Searchapplications = Resource$Stats$Query$Searchapplications;

  var Resource$Stats$Session = function Resource$Stats$Session(context) {
    _classCallCheck(this, Resource$Stats$Session);

    this.context = context;
    this.searchapplications = new Resource$Stats$Session$Searchapplications(this.context);
  };

  cloudsearch_v1.Resource$Stats$Session = Resource$Stats$Session;

  var Resource$Stats$Session$Searchapplications =
  /*#__PURE__*/
  function () {
    function Resource$Stats$Session$Searchapplications(context) {
      _classCallCheck(this, Resource$Stats$Session$Searchapplications);

      this.context = context;
    }

    _createClass(Resource$Stats$Session$Searchapplications, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/stats/session/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Stats$Session$Searchapplications;
  }();

  cloudsearch_v1.Resource$Stats$Session$Searchapplications = Resource$Stats$Session$Searchapplications;

  var Resource$Stats$User = function Resource$Stats$User(context) {
    _classCallCheck(this, Resource$Stats$User);

    this.context = context;
    this.searchapplications = new Resource$Stats$User$Searchapplications(this.context);
  };

  cloudsearch_v1.Resource$Stats$User = Resource$Stats$User;

  var Resource$Stats$User$Searchapplications =
  /*#__PURE__*/
  function () {
    function Resource$Stats$User$Searchapplications(context) {
      _classCallCheck(this, Resource$Stats$User$Searchapplications);

      this.context = context;
    }

    _createClass(Resource$Stats$User$Searchapplications, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/stats/user/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Stats$User$Searchapplications;
  }();

  cloudsearch_v1.Resource$Stats$User$Searchapplications = Resource$Stats$User$Searchapplications;
})(cloudsearch_v1 = exports.cloudsearch_v1 || (exports.cloudsearch_v1 = {}));