"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.policysimulator_v1 = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/class-name-casing */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-disable no-irregular-whitespace */

var googleapis_common_1 = require("googleapis-common");

var policysimulator_v1;

(function (policysimulator_v1) {
  /**
   * Policy Simulator API
   *
   *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members&#39; access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members&#39; access might change under the proposed policy.
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const policysimulator = google.policysimulator('v1');
   * ```
   */
  var Policysimulator = function Policysimulator(options, google) {
    _classCallCheck(this, Policysimulator);

    this.context = {
      _options: options || {},
      google: google
    };
    this.folders = new Resource$Folders(this.context);
    this.operations = new Resource$Operations(this.context);
    this.organizations = new Resource$Organizations(this.context);
    this.projects = new Resource$Projects(this.context);
  };

  policysimulator_v1.Policysimulator = Policysimulator;

  var Resource$Folders = function Resource$Folders(context) {
    _classCallCheck(this, Resource$Folders);

    this.context = context;
    this.locations = new Resource$Folders$Locations(this.context);
  };

  policysimulator_v1.Resource$Folders = Resource$Folders;

  var Resource$Folders$Locations = function Resource$Folders$Locations(context) {
    _classCallCheck(this, Resource$Folders$Locations);

    this.context = context;
    this.replays = new Resource$Folders$Locations$Replays(this.context);
  };

  policysimulator_v1.Resource$Folders$Locations = Resource$Folders$Locations;

  var Resource$Folders$Locations$Replays =
  /*#__PURE__*/
  function () {
    function Resource$Folders$Locations$Replays(context) {
      _classCallCheck(this, Resource$Folders$Locations$Replays);

      this.context = context;
      this.results = new Resource$Folders$Locations$Replays$Results(this.context);
    }

    _createClass(Resource$Folders$Locations$Replays, [{
      key: "create",
      value: function create(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/{+parent}/replays').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Folders$Locations$Replays;
  }();

  policysimulator_v1.Resource$Folders$Locations$Replays = Resource$Folders$Locations$Replays;

  var Resource$Folders$Locations$Replays$Results =
  /*#__PURE__*/
  function () {
    function Resource$Folders$Locations$Replays$Results(context) {
      _classCallCheck(this, Resource$Folders$Locations$Replays$Results);

      this.context = context;
    }

    _createClass(Resource$Folders$Locations$Replays$Results, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/{+parent}/results').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Folders$Locations$Replays$Results;
  }();

  policysimulator_v1.Resource$Folders$Locations$Replays$Results = Resource$Folders$Locations$Replays$Results;

  var Resource$Operations =
  /*#__PURE__*/
  function () {
    function Resource$Operations(context) {
      _classCallCheck(this, Resource$Operations);

      this.context = context;
    }

    _createClass(Resource$Operations, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/operations').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Operations;
  }();

  policysimulator_v1.Resource$Operations = Resource$Operations;

  var Resource$Organizations = function Resource$Organizations(context) {
    _classCallCheck(this, Resource$Organizations);

    this.context = context;
    this.locations = new Resource$Organizations$Locations(this.context);
  };

  policysimulator_v1.Resource$Organizations = Resource$Organizations;

  var Resource$Organizations$Locations = function Resource$Organizations$Locations(context) {
    _classCallCheck(this, Resource$Organizations$Locations);

    this.context = context;
    this.replays = new Resource$Organizations$Locations$Replays(this.context);
  };

  policysimulator_v1.Resource$Organizations$Locations = Resource$Organizations$Locations;

  var Resource$Organizations$Locations$Replays =
  /*#__PURE__*/
  function () {
    function Resource$Organizations$Locations$Replays(context) {
      _classCallCheck(this, Resource$Organizations$Locations$Replays);

      this.context = context;
      this.results = new Resource$Organizations$Locations$Replays$Results(this.context);
    }

    _createClass(Resource$Organizations$Locations$Replays, [{
      key: "create",
      value: function create(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/{+parent}/replays').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Organizations$Locations$Replays;
  }();

  policysimulator_v1.Resource$Organizations$Locations$Replays = Resource$Organizations$Locations$Replays;

  var Resource$Organizations$Locations$Replays$Results =
  /*#__PURE__*/
  function () {
    function Resource$Organizations$Locations$Replays$Results(context) {
      _classCallCheck(this, Resource$Organizations$Locations$Replays$Results);

      this.context = context;
    }

    _createClass(Resource$Organizations$Locations$Replays$Results, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/{+parent}/results').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Organizations$Locations$Replays$Results;
  }();

  policysimulator_v1.Resource$Organizations$Locations$Replays$Results = Resource$Organizations$Locations$Replays$Results;

  var Resource$Projects = function Resource$Projects(context) {
    _classCallCheck(this, Resource$Projects);

    this.context = context;
    this.locations = new Resource$Projects$Locations(this.context);
  };

  policysimulator_v1.Resource$Projects = Resource$Projects;

  var Resource$Projects$Locations = function Resource$Projects$Locations(context) {
    _classCallCheck(this, Resource$Projects$Locations);

    this.context = context;
    this.replays = new Resource$Projects$Locations$Replays(this.context);
  };

  policysimulator_v1.Resource$Projects$Locations = Resource$Projects$Locations;

  var Resource$Projects$Locations$Replays =
  /*#__PURE__*/
  function () {
    function Resource$Projects$Locations$Replays(context) {
      _classCallCheck(this, Resource$Projects$Locations$Replays);

      this.context = context;
      this.results = new Resource$Projects$Locations$Replays$Results(this.context);
    }

    _createClass(Resource$Projects$Locations$Replays, [{
      key: "create",
      value: function create(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/{+parent}/replays').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Projects$Locations$Replays;
  }();

  policysimulator_v1.Resource$Projects$Locations$Replays = Resource$Projects$Locations$Replays;

  var Resource$Projects$Locations$Replays$Results =
  /*#__PURE__*/
  function () {
    function Resource$Projects$Locations$Replays$Results(context) {
      _classCallCheck(this, Resource$Projects$Locations$Replays$Results);

      this.context = context;
    }

    _createClass(Resource$Projects$Locations$Replays$Results, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/{+parent}/results').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Projects$Locations$Replays$Results;
  }();

  policysimulator_v1.Resource$Projects$Locations$Replays$Results = Resource$Projects$Locations$Replays$Results;
})(policysimulator_v1 = exports.policysimulator_v1 || (exports.policysimulator_v1 = {}));