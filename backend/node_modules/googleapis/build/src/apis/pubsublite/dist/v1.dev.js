"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pubsublite_v1 = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/class-name-casing */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-disable no-irregular-whitespace */

var googleapis_common_1 = require("googleapis-common");

var pubsublite_v1;

(function (pubsublite_v1) {
  /**
   * Pub/Sub Lite API
   *
   *
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const pubsublite = google.pubsublite('v1');
   * ```
   */
  var Pubsublite = function Pubsublite(options, google) {
    _classCallCheck(this, Pubsublite);

    this.context = {
      _options: options || {},
      google: google
    };
    this.admin = new Resource$Admin(this.context);
    this.cursor = new Resource$Cursor(this.context);
    this.topicStats = new Resource$Topicstats(this.context);
  };

  pubsublite_v1.Pubsublite = Pubsublite;

  var Resource$Admin = function Resource$Admin(context) {
    _classCallCheck(this, Resource$Admin);

    this.context = context;
    this.projects = new Resource$Admin$Projects(this.context);
  };

  pubsublite_v1.Resource$Admin = Resource$Admin;

  var Resource$Admin$Projects = function Resource$Admin$Projects(context) {
    _classCallCheck(this, Resource$Admin$Projects);

    this.context = context;
    this.locations = new Resource$Admin$Projects$Locations(this.context);
  };

  pubsublite_v1.Resource$Admin$Projects = Resource$Admin$Projects;

  var Resource$Admin$Projects$Locations = function Resource$Admin$Projects$Locations(context) {
    _classCallCheck(this, Resource$Admin$Projects$Locations);

    this.context = context;
    this.subscriptions = new Resource$Admin$Projects$Locations$Subscriptions(this.context);
    this.topics = new Resource$Admin$Projects$Locations$Topics(this.context);
  };

  pubsublite_v1.Resource$Admin$Projects$Locations = Resource$Admin$Projects$Locations;

  var Resource$Admin$Projects$Locations$Subscriptions =
  /*#__PURE__*/
  function () {
    function Resource$Admin$Projects$Locations$Subscriptions(context) {
      _classCallCheck(this, Resource$Admin$Projects$Locations$Subscriptions);

      this.context = context;
    }

    _createClass(Resource$Admin$Projects$Locations$Subscriptions, [{
      key: "create",
      value: function create(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://pubsublite.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/admin/{+parent}/subscriptions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://pubsublite.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/admin/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://pubsublite.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/admin/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://pubsublite.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/admin/{+parent}/subscriptions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "patch",
      value: function patch(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://pubsublite.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/admin/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Admin$Projects$Locations$Subscriptions;
  }();

  pubsublite_v1.Resource$Admin$Projects$Locations$Subscriptions = Resource$Admin$Projects$Locations$Subscriptions;

  var Resource$Admin$Projects$Locations$Topics =
  /*#__PURE__*/
  function () {
    function Resource$Admin$Projects$Locations$Topics(context) {
      _classCallCheck(this, Resource$Admin$Projects$Locations$Topics);

      this.context = context;
      this.subscriptions = new Resource$Admin$Projects$Locations$Topics$Subscriptions(this.context);
    }

    _createClass(Resource$Admin$Projects$Locations$Topics, [{
      key: "create",
      value: function create(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://pubsublite.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/admin/{+parent}/topics').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://pubsublite.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/admin/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://pubsublite.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/admin/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getPartitions",
      value: function getPartitions(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://pubsublite.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/admin/{+name}/partitions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://pubsublite.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/admin/{+parent}/topics').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "patch",
      value: function patch(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://pubsublite.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/admin/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Admin$Projects$Locations$Topics;
  }();

  pubsublite_v1.Resource$Admin$Projects$Locations$Topics = Resource$Admin$Projects$Locations$Topics;

  var Resource$Admin$Projects$Locations$Topics$Subscriptions =
  /*#__PURE__*/
  function () {
    function Resource$Admin$Projects$Locations$Topics$Subscriptions(context) {
      _classCallCheck(this, Resource$Admin$Projects$Locations$Topics$Subscriptions);

      this.context = context;
    }

    _createClass(Resource$Admin$Projects$Locations$Topics$Subscriptions, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://pubsublite.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/admin/{+name}/subscriptions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Admin$Projects$Locations$Topics$Subscriptions;
  }();

  pubsublite_v1.Resource$Admin$Projects$Locations$Topics$Subscriptions = Resource$Admin$Projects$Locations$Topics$Subscriptions;

  var Resource$Cursor = function Resource$Cursor(context) {
    _classCallCheck(this, Resource$Cursor);

    this.context = context;
    this.projects = new Resource$Cursor$Projects(this.context);
  };

  pubsublite_v1.Resource$Cursor = Resource$Cursor;

  var Resource$Cursor$Projects = function Resource$Cursor$Projects(context) {
    _classCallCheck(this, Resource$Cursor$Projects);

    this.context = context;
    this.locations = new Resource$Cursor$Projects$Locations(this.context);
  };

  pubsublite_v1.Resource$Cursor$Projects = Resource$Cursor$Projects;

  var Resource$Cursor$Projects$Locations = function Resource$Cursor$Projects$Locations(context) {
    _classCallCheck(this, Resource$Cursor$Projects$Locations);

    this.context = context;
    this.subscriptions = new Resource$Cursor$Projects$Locations$Subscriptions(this.context);
  };

  pubsublite_v1.Resource$Cursor$Projects$Locations = Resource$Cursor$Projects$Locations;

  var Resource$Cursor$Projects$Locations$Subscriptions = function Resource$Cursor$Projects$Locations$Subscriptions(context) {
    _classCallCheck(this, Resource$Cursor$Projects$Locations$Subscriptions);

    this.context = context;
    this.cursors = new Resource$Cursor$Projects$Locations$Subscriptions$Cursors(this.context);
  };

  pubsublite_v1.Resource$Cursor$Projects$Locations$Subscriptions = Resource$Cursor$Projects$Locations$Subscriptions;

  var Resource$Cursor$Projects$Locations$Subscriptions$Cursors =
  /*#__PURE__*/
  function () {
    function Resource$Cursor$Projects$Locations$Subscriptions$Cursors(context) {
      _classCallCheck(this, Resource$Cursor$Projects$Locations$Subscriptions$Cursors);

      this.context = context;
    }

    _createClass(Resource$Cursor$Projects$Locations$Subscriptions$Cursors, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://pubsublite.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/cursor/{+parent}/cursors').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Cursor$Projects$Locations$Subscriptions$Cursors;
  }();

  pubsublite_v1.Resource$Cursor$Projects$Locations$Subscriptions$Cursors = Resource$Cursor$Projects$Locations$Subscriptions$Cursors;

  var Resource$Topicstats = function Resource$Topicstats(context) {
    _classCallCheck(this, Resource$Topicstats);

    this.context = context;
    this.projects = new Resource$Topicstats$Projects(this.context);
  };

  pubsublite_v1.Resource$Topicstats = Resource$Topicstats;

  var Resource$Topicstats$Projects = function Resource$Topicstats$Projects(context) {
    _classCallCheck(this, Resource$Topicstats$Projects);

    this.context = context;
    this.locations = new Resource$Topicstats$Projects$Locations(this.context);
  };

  pubsublite_v1.Resource$Topicstats$Projects = Resource$Topicstats$Projects;

  var Resource$Topicstats$Projects$Locations = function Resource$Topicstats$Projects$Locations(context) {
    _classCallCheck(this, Resource$Topicstats$Projects$Locations);

    this.context = context;
    this.topics = new Resource$Topicstats$Projects$Locations$Topics(this.context);
  };

  pubsublite_v1.Resource$Topicstats$Projects$Locations = Resource$Topicstats$Projects$Locations;

  var Resource$Topicstats$Projects$Locations$Topics =
  /*#__PURE__*/
  function () {
    function Resource$Topicstats$Projects$Locations$Topics(context) {
      _classCallCheck(this, Resource$Topicstats$Projects$Locations$Topics);

      this.context = context;
    }

    _createClass(Resource$Topicstats$Projects$Locations$Topics, [{
      key: "computeHeadCursor",
      value: function computeHeadCursor(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://pubsublite.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/topicStats/{+topic}:computeHeadCursor').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['topic'],
          pathParams: ['topic'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "computeMessageStats",
      value: function computeMessageStats(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://pubsublite.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1/topicStats/{+topic}:computeMessageStats').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['topic'],
          pathParams: ['topic'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Topicstats$Projects$Locations$Topics;
  }();

  pubsublite_v1.Resource$Topicstats$Projects$Locations$Topics = Resource$Topicstats$Projects$Locations$Topics;
})(pubsublite_v1 = exports.pubsublite_v1 || (exports.pubsublite_v1 = {}));