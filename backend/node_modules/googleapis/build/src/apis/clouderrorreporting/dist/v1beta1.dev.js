"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clouderrorreporting_v1beta1 = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/class-name-casing */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-disable no-irregular-whitespace */

var googleapis_common_1 = require("googleapis-common");

var clouderrorreporting_v1beta1;

(function (clouderrorreporting_v1beta1) {
  /**
   * Error Reporting API
   *
   * Groups and counts similar errors from cloud services and applications, reports new errors, and provides access to error groups and their associated errors.
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const clouderrorreporting = google.clouderrorreporting('v1beta1');
   * ```
   */
  var Clouderrorreporting = function Clouderrorreporting(options, google) {
    _classCallCheck(this, Clouderrorreporting);

    this.context = {
      _options: options || {},
      google: google
    };
    this.projects = new Resource$Projects(this.context);
  };

  clouderrorreporting_v1beta1.Clouderrorreporting = Clouderrorreporting;

  var Resource$Projects =
  /*#__PURE__*/
  function () {
    function Resource$Projects(context) {
      _classCallCheck(this, Resource$Projects);

      this.context = context;
      this.events = new Resource$Projects$Events(this.context);
      this.groups = new Resource$Projects$Groups(this.context);
      this.groupStats = new Resource$Projects$Groupstats(this.context);
    }

    _createClass(Resource$Projects, [{
      key: "deleteEvents",
      value: function deleteEvents(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://clouderrorreporting.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta1/{+projectName}/events').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['projectName'],
          pathParams: ['projectName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Projects;
  }();

  clouderrorreporting_v1beta1.Resource$Projects = Resource$Projects;

  var Resource$Projects$Events =
  /*#__PURE__*/
  function () {
    function Resource$Projects$Events(context) {
      _classCallCheck(this, Resource$Projects$Events);

      this.context = context;
    }

    _createClass(Resource$Projects$Events, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://clouderrorreporting.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta1/{+projectName}/events').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['projectName'],
          pathParams: ['projectName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "report",
      value: function report(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://clouderrorreporting.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta1/{+projectName}/events:report').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['projectName'],
          pathParams: ['projectName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Projects$Events;
  }();

  clouderrorreporting_v1beta1.Resource$Projects$Events = Resource$Projects$Events;

  var Resource$Projects$Groups =
  /*#__PURE__*/
  function () {
    function Resource$Projects$Groups(context) {
      _classCallCheck(this, Resource$Projects$Groups);

      this.context = context;
    }

    _createClass(Resource$Projects$Groups, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://clouderrorreporting.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta1/{+groupName}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['groupName'],
          pathParams: ['groupName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://clouderrorreporting.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Projects$Groups;
  }();

  clouderrorreporting_v1beta1.Resource$Projects$Groups = Resource$Projects$Groups;

  var Resource$Projects$Groupstats =
  /*#__PURE__*/
  function () {
    function Resource$Projects$Groupstats(context) {
      _classCallCheck(this, Resource$Projects$Groupstats);

      this.context = context;
    }

    _createClass(Resource$Projects$Groupstats, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://clouderrorreporting.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta1/{+projectName}/groupStats').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['projectName'],
          pathParams: ['projectName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Projects$Groupstats;
  }();

  clouderrorreporting_v1beta1.Resource$Projects$Groupstats = Resource$Projects$Groupstats;
})(clouderrorreporting_v1beta1 = exports.clouderrorreporting_v1beta1 || (exports.clouderrorreporting_v1beta1 = {}));