"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.realtimebidding_v1alpha = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/class-name-casing */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-disable no-irregular-whitespace */

var googleapis_common_1 = require("googleapis-common");

var realtimebidding_v1alpha;

(function (realtimebidding_v1alpha) {
  /**
   * Real-time Bidding API
   *
   * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const realtimebidding = google.realtimebidding('v1alpha');
   * ```
   */
  var Realtimebidding = function Realtimebidding(options, google) {
    _classCallCheck(this, Realtimebidding);

    this.context = {
      _options: options || {},
      google: google
    };
    this.bidders = new Resource$Bidders(this.context);
  };

  realtimebidding_v1alpha.Realtimebidding = Realtimebidding;

  var Resource$Bidders = function Resource$Bidders(context) {
    _classCallCheck(this, Resource$Bidders);

    this.context = context;
    this.biddingFunctions = new Resource$Bidders$Biddingfunctions(this.context);
  };

  realtimebidding_v1alpha.Resource$Bidders = Resource$Bidders;

  var Resource$Bidders$Biddingfunctions =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Biddingfunctions(context) {
      _classCallCheck(this, Resource$Bidders$Biddingfunctions);

      this.context = context;
    }

    _createClass(Resource$Bidders$Biddingfunctions, [{
      key: "create",
      value: function create(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://realtimebidding.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1alpha/{+parent}/biddingFunctions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://realtimebidding.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1alpha/{+parent}/biddingFunctions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['parent'],
          pathParams: ['parent'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Biddingfunctions;
  }();

  realtimebidding_v1alpha.Resource$Bidders$Biddingfunctions = Resource$Bidders$Biddingfunctions;
})(realtimebidding_v1alpha = exports.realtimebidding_v1alpha || (exports.realtimebidding_v1alpha = {}));