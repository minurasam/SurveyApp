"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.youtube_v3 = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/class-name-casing */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-disable no-irregular-whitespace */

var googleapis_common_1 = require("googleapis-common");

var youtube_v3;

(function (youtube_v3) {
  /**
   * YouTube Data API v3
   *
   * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const youtube = google.youtube('v3');
   * ```
   */
  var Youtube = function Youtube(options, google) {
    _classCallCheck(this, Youtube);

    this.context = {
      _options: options || {},
      google: google
    };
    this.abuseReports = new Resource$Abusereports(this.context);
    this.activities = new Resource$Activities(this.context);
    this.captions = new Resource$Captions(this.context);
    this.channelBanners = new Resource$Channelbanners(this.context);
    this.channels = new Resource$Channels(this.context);
    this.channelSections = new Resource$Channelsections(this.context);
    this.comments = new Resource$Comments(this.context);
    this.commentThreads = new Resource$Commentthreads(this.context);
    this.i18nLanguages = new Resource$I18nlanguages(this.context);
    this.i18nRegions = new Resource$I18nregions(this.context);
    this.liveBroadcasts = new Resource$Livebroadcasts(this.context);
    this.liveChatBans = new Resource$Livechatbans(this.context);
    this.liveChatMessages = new Resource$Livechatmessages(this.context);
    this.liveChatModerators = new Resource$Livechatmoderators(this.context);
    this.liveStreams = new Resource$Livestreams(this.context);
    this.members = new Resource$Members(this.context);
    this.membershipsLevels = new Resource$Membershipslevels(this.context);
    this.playlistItems = new Resource$Playlistitems(this.context);
    this.playlists = new Resource$Playlists(this.context);
    this.search = new Resource$Search(this.context);
    this.subscriptions = new Resource$Subscriptions(this.context);
    this.superChatEvents = new Resource$Superchatevents(this.context);
    this.tests = new Resource$Tests(this.context);
    this.thirdPartyLinks = new Resource$Thirdpartylinks(this.context);
    this.thumbnails = new Resource$Thumbnails(this.context);
    this.videoAbuseReportReasons = new Resource$Videoabusereportreasons(this.context);
    this.videoCategories = new Resource$Videocategories(this.context);
    this.videos = new Resource$Videos(this.context);
    this.watermarks = new Resource$Watermarks(this.context);
  };

  youtube_v3.Youtube = Youtube;

  var Resource$Abusereports =
  /*#__PURE__*/
  function () {
    function Resource$Abusereports(context) {
      _classCallCheck(this, Resource$Abusereports);

      this.context = context;
    }

    _createClass(Resource$Abusereports, [{
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/abuseReports').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Abusereports;
  }();

  youtube_v3.Resource$Abusereports = Resource$Abusereports;

  var Resource$Activities =
  /*#__PURE__*/
  function () {
    function Resource$Activities(context) {
      _classCallCheck(this, Resource$Activities);

      this.context = context;
    }

    _createClass(Resource$Activities, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/activities').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Activities;
  }();

  youtube_v3.Resource$Activities = Resource$Activities;

  var Resource$Captions =
  /*#__PURE__*/
  function () {
    function Resource$Captions(context) {
      _classCallCheck(this, Resource$Captions);

      this.context = context;
    }

    _createClass(Resource$Captions, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "download",
      value: function download(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/captions/{id}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['id'],
          pathParams: ['id'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          mediaUrl: (rootUrl + '/upload/youtube/v3/captions').replace(/([^:]\/)\/+/g, '$1'),
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part', 'videoId'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          mediaUrl: (rootUrl + '/upload/youtube/v3/captions').replace(/([^:]\/)\/+/g, '$1'),
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Captions;
  }();

  youtube_v3.Resource$Captions = Resource$Captions;

  var Resource$Channelbanners =
  /*#__PURE__*/
  function () {
    function Resource$Channelbanners(context) {
      _classCallCheck(this, Resource$Channelbanners);

      this.context = context;
    }

    _createClass(Resource$Channelbanners, [{
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/channelBanners/insert').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          mediaUrl: (rootUrl + '/upload/youtube/v3/channelBanners/insert').replace(/([^:]\/)\/+/g, '$1'),
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Channelbanners;
  }();

  youtube_v3.Resource$Channelbanners = Resource$Channelbanners;

  var Resource$Channels =
  /*#__PURE__*/
  function () {
    function Resource$Channels(context) {
      _classCallCheck(this, Resource$Channels);

      this.context = context;
    }

    _createClass(Resource$Channels, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/channels').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/channels').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Channels;
  }();

  youtube_v3.Resource$Channels = Resource$Channels;

  var Resource$Channelsections =
  /*#__PURE__*/
  function () {
    function Resource$Channelsections(context) {
      _classCallCheck(this, Resource$Channelsections);

      this.context = context;
    }

    _createClass(Resource$Channelsections, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Channelsections;
  }();

  youtube_v3.Resource$Channelsections = Resource$Channelsections;

  var Resource$Comments =
  /*#__PURE__*/
  function () {
    function Resource$Comments(context) {
      _classCallCheck(this, Resource$Comments);

      this.context = context;
    }

    _createClass(Resource$Comments, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "markAsSpam",
      value: function markAsSpam(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/comments/markAsSpam').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "setModerationStatus",
      value: function setModerationStatus(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/comments/setModerationStatus').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['id', 'moderationStatus'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Comments;
  }();

  youtube_v3.Resource$Comments = Resource$Comments;

  var Resource$Commentthreads =
  /*#__PURE__*/
  function () {
    function Resource$Commentthreads(context) {
      _classCallCheck(this, Resource$Commentthreads);

      this.context = context;
    }

    _createClass(Resource$Commentthreads, [{
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/commentThreads').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/commentThreads').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/commentThreads').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Commentthreads;
  }();

  youtube_v3.Resource$Commentthreads = Resource$Commentthreads;

  var Resource$I18nlanguages =
  /*#__PURE__*/
  function () {
    function Resource$I18nlanguages(context) {
      _classCallCheck(this, Resource$I18nlanguages);

      this.context = context;
    }

    _createClass(Resource$I18nlanguages, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/i18nLanguages').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$I18nlanguages;
  }();

  youtube_v3.Resource$I18nlanguages = Resource$I18nlanguages;

  var Resource$I18nregions =
  /*#__PURE__*/
  function () {
    function Resource$I18nregions(context) {
      _classCallCheck(this, Resource$I18nregions);

      this.context = context;
    }

    _createClass(Resource$I18nregions, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/i18nRegions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$I18nregions;
  }();

  youtube_v3.Resource$I18nregions = Resource$I18nregions;

  var Resource$Livebroadcasts =
  /*#__PURE__*/
  function () {
    function Resource$Livebroadcasts(context) {
      _classCallCheck(this, Resource$Livebroadcasts);

      this.context = context;
    }

    _createClass(Resource$Livebroadcasts, [{
      key: "bind",
      value: function bind(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveBroadcasts/bind').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['id', 'part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "transition",
      value: function transition(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveBroadcasts/transition').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['broadcastStatus', 'id', 'part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Livebroadcasts;
  }();

  youtube_v3.Resource$Livebroadcasts = Resource$Livebroadcasts;

  var Resource$Livechatbans =
  /*#__PURE__*/
  function () {
    function Resource$Livechatbans(context) {
      _classCallCheck(this, Resource$Livechatbans);

      this.context = context;
    }

    _createClass(Resource$Livechatbans, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveChat/bans').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveChat/bans').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Livechatbans;
  }();

  youtube_v3.Resource$Livechatbans = Resource$Livechatbans;

  var Resource$Livechatmessages =
  /*#__PURE__*/
  function () {
    function Resource$Livechatmessages(context) {
      _classCallCheck(this, Resource$Livechatmessages);

      this.context = context;
    }

    _createClass(Resource$Livechatmessages, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveChat/messages').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveChat/messages').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveChat/messages').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['liveChatId', 'part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Livechatmessages;
  }();

  youtube_v3.Resource$Livechatmessages = Resource$Livechatmessages;

  var Resource$Livechatmoderators =
  /*#__PURE__*/
  function () {
    function Resource$Livechatmoderators(context) {
      _classCallCheck(this, Resource$Livechatmoderators);

      this.context = context;
    }

    _createClass(Resource$Livechatmoderators, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveChat/moderators').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveChat/moderators').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveChat/moderators').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['liveChatId', 'part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Livechatmoderators;
  }();

  youtube_v3.Resource$Livechatmoderators = Resource$Livechatmoderators;

  var Resource$Livestreams =
  /*#__PURE__*/
  function () {
    function Resource$Livestreams(context) {
      _classCallCheck(this, Resource$Livestreams);

      this.context = context;
    }

    _createClass(Resource$Livestreams, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Livestreams;
  }();

  youtube_v3.Resource$Livestreams = Resource$Livestreams;

  var Resource$Members =
  /*#__PURE__*/
  function () {
    function Resource$Members(context) {
      _classCallCheck(this, Resource$Members);

      this.context = context;
    }

    _createClass(Resource$Members, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/members').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Members;
  }();

  youtube_v3.Resource$Members = Resource$Members;

  var Resource$Membershipslevels =
  /*#__PURE__*/
  function () {
    function Resource$Membershipslevels(context) {
      _classCallCheck(this, Resource$Membershipslevels);

      this.context = context;
    }

    _createClass(Resource$Membershipslevels, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/membershipsLevels').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Membershipslevels;
  }();

  youtube_v3.Resource$Membershipslevels = Resource$Membershipslevels;

  var Resource$Playlistitems =
  /*#__PURE__*/
  function () {
    function Resource$Playlistitems(context) {
      _classCallCheck(this, Resource$Playlistitems);

      this.context = context;
    }

    _createClass(Resource$Playlistitems, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Playlistitems;
  }();

  youtube_v3.Resource$Playlistitems = Resource$Playlistitems;

  var Resource$Playlists =
  /*#__PURE__*/
  function () {
    function Resource$Playlists(context) {
      _classCallCheck(this, Resource$Playlists);

      this.context = context;
    }

    _createClass(Resource$Playlists, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Playlists;
  }();

  youtube_v3.Resource$Playlists = Resource$Playlists;

  var Resource$Search =
  /*#__PURE__*/
  function () {
    function Resource$Search(context) {
      _classCallCheck(this, Resource$Search);

      this.context = context;
    }

    _createClass(Resource$Search, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/search').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Search;
  }();

  youtube_v3.Resource$Search = Resource$Search;

  var Resource$Subscriptions =
  /*#__PURE__*/
  function () {
    function Resource$Subscriptions(context) {
      _classCallCheck(this, Resource$Subscriptions);

      this.context = context;
    }

    _createClass(Resource$Subscriptions, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/subscriptions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/subscriptions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/subscriptions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Subscriptions;
  }();

  youtube_v3.Resource$Subscriptions = Resource$Subscriptions;

  var Resource$Superchatevents =
  /*#__PURE__*/
  function () {
    function Resource$Superchatevents(context) {
      _classCallCheck(this, Resource$Superchatevents);

      this.context = context;
    }

    _createClass(Resource$Superchatevents, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/superChatEvents').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Superchatevents;
  }();

  youtube_v3.Resource$Superchatevents = Resource$Superchatevents;

  var Resource$Tests =
  /*#__PURE__*/
  function () {
    function Resource$Tests(context) {
      _classCallCheck(this, Resource$Tests);

      this.context = context;
    }

    _createClass(Resource$Tests, [{
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/tests').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Tests;
  }();

  youtube_v3.Resource$Tests = Resource$Tests;

  var Resource$Thirdpartylinks =
  /*#__PURE__*/
  function () {
    function Resource$Thirdpartylinks(context) {
      _classCallCheck(this, Resource$Thirdpartylinks);

      this.context = context;
    }

    _createClass(Resource$Thirdpartylinks, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['linkingToken', 'type'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Thirdpartylinks;
  }();

  youtube_v3.Resource$Thirdpartylinks = Resource$Thirdpartylinks;

  var Resource$Thumbnails =
  /*#__PURE__*/
  function () {
    function Resource$Thumbnails(context) {
      _classCallCheck(this, Resource$Thumbnails);

      this.context = context;
    }

    _createClass(Resource$Thumbnails, [{
      key: "set",
      value: function set(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/thumbnails/set').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          mediaUrl: (rootUrl + '/upload/youtube/v3/thumbnails/set').replace(/([^:]\/)\/+/g, '$1'),
          requiredParams: ['videoId'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Thumbnails;
  }();

  youtube_v3.Resource$Thumbnails = Resource$Thumbnails;

  var Resource$Videoabusereportreasons =
  /*#__PURE__*/
  function () {
    function Resource$Videoabusereportreasons(context) {
      _classCallCheck(this, Resource$Videoabusereportreasons);

      this.context = context;
    }

    _createClass(Resource$Videoabusereportreasons, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/videoAbuseReportReasons').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Videoabusereportreasons;
  }();

  youtube_v3.Resource$Videoabusereportreasons = Resource$Videoabusereportreasons;

  var Resource$Videocategories =
  /*#__PURE__*/
  function () {
    function Resource$Videocategories(context) {
      _classCallCheck(this, Resource$Videocategories);

      this.context = context;
    }

    _createClass(Resource$Videocategories, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/videoCategories').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Videocategories;
  }();

  youtube_v3.Resource$Videocategories = Resource$Videocategories;

  var Resource$Videos =
  /*#__PURE__*/
  function () {
    function Resource$Videos(context) {
      _classCallCheck(this, Resource$Videos);

      this.context = context;
    }

    _createClass(Resource$Videos, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getRating",
      value: function getRating(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/videos/getRating').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['id'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          mediaUrl: (rootUrl + '/upload/youtube/v3/videos').replace(/([^:]\/)\/+/g, '$1'),
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "rate",
      value: function rate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/videos/rate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['id', 'rating'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "reportAbuse",
      value: function reportAbuse(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/videos/reportAbuse').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['part'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Videos;
  }();

  youtube_v3.Resource$Videos = Resource$Videos;

  var Resource$Watermarks =
  /*#__PURE__*/
  function () {
    function Resource$Watermarks(context) {
      _classCallCheck(this, Resource$Watermarks);

      this.context = context;
    }

    _createClass(Resource$Watermarks, [{
      key: "set",
      value: function set(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/watermarks/set').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          mediaUrl: (rootUrl + '/upload/youtube/v3/watermarks/set').replace(/([^:]\/)\/+/g, '$1'),
          requiredParams: ['channelId'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "unset",
      value: function unset(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/youtube/v3/watermarks/unset').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['channelId'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Watermarks;
  }();

  youtube_v3.Resource$Watermarks = Resource$Watermarks;
})(youtube_v3 = exports.youtube_v3 || (exports.youtube_v3 = {}));