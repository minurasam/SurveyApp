"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.safebrowsing_v4 = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/class-name-casing */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-disable no-irregular-whitespace */

var googleapis_common_1 = require("googleapis-common");

var safebrowsing_v4;

(function (safebrowsing_v4) {
  /**
   * Safe Browsing API
   *
   * Enables client applications to check web resources (most commonly URLs) against Google-generated lists of unsafe web resources. The Safe Browsing APIs are for non-commercial use only. If you need to use APIs to detect malicious URLs for commercial purposes – meaning “for sale or revenue-generating purposes” – please refer to the Web Risk API.
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const safebrowsing = google.safebrowsing('v4');
   * ```
   */
  var Safebrowsing = function Safebrowsing(options, google) {
    _classCallCheck(this, Safebrowsing);

    this.context = {
      _options: options || {},
      google: google
    };
    this.encodedFullHashes = new Resource$Encodedfullhashes(this.context);
    this.encodedUpdates = new Resource$Encodedupdates(this.context);
    this.fullHashes = new Resource$Fullhashes(this.context);
    this.threatHits = new Resource$Threathits(this.context);
    this.threatLists = new Resource$Threatlists(this.context);
    this.threatListUpdates = new Resource$Threatlistupdates(this.context);
    this.threatMatches = new Resource$Threatmatches(this.context);
  };

  safebrowsing_v4.Safebrowsing = Safebrowsing;

  var Resource$Encodedfullhashes =
  /*#__PURE__*/
  function () {
    function Resource$Encodedfullhashes(context) {
      _classCallCheck(this, Resource$Encodedfullhashes);

      this.context = context;
    }

    _createClass(Resource$Encodedfullhashes, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://safebrowsing.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v4/encodedFullHashes/{encodedRequest}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['encodedRequest'],
          pathParams: ['encodedRequest'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Encodedfullhashes;
  }();

  safebrowsing_v4.Resource$Encodedfullhashes = Resource$Encodedfullhashes;

  var Resource$Encodedupdates =
  /*#__PURE__*/
  function () {
    function Resource$Encodedupdates(context) {
      _classCallCheck(this, Resource$Encodedupdates);

      this.context = context;
    }

    _createClass(Resource$Encodedupdates, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://safebrowsing.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v4/encodedUpdates/{encodedRequest}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['encodedRequest'],
          pathParams: ['encodedRequest'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Encodedupdates;
  }();

  safebrowsing_v4.Resource$Encodedupdates = Resource$Encodedupdates;

  var Resource$Fullhashes =
  /*#__PURE__*/
  function () {
    function Resource$Fullhashes(context) {
      _classCallCheck(this, Resource$Fullhashes);

      this.context = context;
    }

    _createClass(Resource$Fullhashes, [{
      key: "find",
      value: function find(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://safebrowsing.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v4/fullHashes:find').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Fullhashes;
  }();

  safebrowsing_v4.Resource$Fullhashes = Resource$Fullhashes;

  var Resource$Threathits =
  /*#__PURE__*/
  function () {
    function Resource$Threathits(context) {
      _classCallCheck(this, Resource$Threathits);

      this.context = context;
    }

    _createClass(Resource$Threathits, [{
      key: "create",
      value: function create(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://safebrowsing.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v4/threatHits').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Threathits;
  }();

  safebrowsing_v4.Resource$Threathits = Resource$Threathits;

  var Resource$Threatlists =
  /*#__PURE__*/
  function () {
    function Resource$Threatlists(context) {
      _classCallCheck(this, Resource$Threatlists);

      this.context = context;
    }

    _createClass(Resource$Threatlists, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://safebrowsing.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v4/threatLists').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Threatlists;
  }();

  safebrowsing_v4.Resource$Threatlists = Resource$Threatlists;

  var Resource$Threatlistupdates =
  /*#__PURE__*/
  function () {
    function Resource$Threatlistupdates(context) {
      _classCallCheck(this, Resource$Threatlistupdates);

      this.context = context;
    }

    _createClass(Resource$Threatlistupdates, [{
      key: "fetch",
      value: function fetch(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://safebrowsing.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v4/threatListUpdates:fetch').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Threatlistupdates;
  }();

  safebrowsing_v4.Resource$Threatlistupdates = Resource$Threatlistupdates;

  var Resource$Threatmatches =
  /*#__PURE__*/
  function () {
    function Resource$Threatmatches(context) {
      _classCallCheck(this, Resource$Threatmatches);

      this.context = context;
    }

    _createClass(Resource$Threatmatches, [{
      key: "find",
      value: function find(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://safebrowsing.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v4/threatMatches:find').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Threatmatches;
  }();

  safebrowsing_v4.Resource$Threatmatches = Resource$Threatmatches;
})(safebrowsing_v4 = exports.safebrowsing_v4 || (exports.safebrowsing_v4 = {}));