"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.adexchangebuyer2_v2beta1 = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/class-name-casing */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-disable no-irregular-whitespace */

var googleapis_common_1 = require("googleapis-common");

var adexchangebuyer2_v2beta1;

(function (adexchangebuyer2_v2beta1) {
  /**
   * Ad Exchange Buyer API II
   *
   * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const adexchangebuyer2 = google.adexchangebuyer2('v2beta1');
   * ```
   */
  var Adexchangebuyer2 = function Adexchangebuyer2(options, google) {
    _classCallCheck(this, Adexchangebuyer2);

    this.context = {
      _options: options || {},
      google: google
    };
    this.accounts = new Resource$Accounts(this.context);
    this.bidders = new Resource$Bidders(this.context);
  };

  adexchangebuyer2_v2beta1.Adexchangebuyer2 = Adexchangebuyer2;

  var Resource$Accounts = function Resource$Accounts(context) {
    _classCallCheck(this, Resource$Accounts);

    this.context = context;
    this.clients = new Resource$Accounts$Clients(this.context);
    this.creatives = new Resource$Accounts$Creatives(this.context);
    this.finalizedProposals = new Resource$Accounts$Finalizedproposals(this.context);
    this.products = new Resource$Accounts$Products(this.context);
    this.proposals = new Resource$Accounts$Proposals(this.context);
    this.publisherProfiles = new Resource$Accounts$Publisherprofiles(this.context);
  };

  adexchangebuyer2_v2beta1.Resource$Accounts = Resource$Accounts;

  var Resource$Accounts$Clients =
  /*#__PURE__*/
  function () {
    function Resource$Accounts$Clients(context) {
      _classCallCheck(this, Resource$Accounts$Clients);

      this.context = context;
      this.invitations = new Resource$Accounts$Clients$Invitations(this.context);
      this.users = new Resource$Accounts$Clients$Users(this.context);
    }

    _createClass(Resource$Accounts$Clients, [{
      key: "create",
      value: function create(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/clients').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId'],
          pathParams: ['accountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'clientAccountId'],
          pathParams: ['accountId', 'clientAccountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/clients').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId'],
          pathParams: ['accountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'clientAccountId'],
          pathParams: ['accountId', 'clientAccountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Accounts$Clients;
  }();

  adexchangebuyer2_v2beta1.Resource$Accounts$Clients = Resource$Accounts$Clients;

  var Resource$Accounts$Clients$Invitations =
  /*#__PURE__*/
  function () {
    function Resource$Accounts$Clients$Invitations(context) {
      _classCallCheck(this, Resource$Accounts$Clients$Invitations);

      this.context = context;
    }

    _createClass(Resource$Accounts$Clients$Invitations, [{
      key: "create",
      value: function create(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'clientAccountId'],
          pathParams: ['accountId', 'clientAccountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'clientAccountId', 'invitationId'],
          pathParams: ['accountId', 'clientAccountId', 'invitationId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'clientAccountId'],
          pathParams: ['accountId', 'clientAccountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Accounts$Clients$Invitations;
  }();

  adexchangebuyer2_v2beta1.Resource$Accounts$Clients$Invitations = Resource$Accounts$Clients$Invitations;

  var Resource$Accounts$Clients$Users =
  /*#__PURE__*/
  function () {
    function Resource$Accounts$Clients$Users(context) {
      _classCallCheck(this, Resource$Accounts$Clients$Users);

      this.context = context;
    }

    _createClass(Resource$Accounts$Clients$Users, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'clientAccountId', 'userId'],
          pathParams: ['accountId', 'clientAccountId', 'userId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'clientAccountId'],
          pathParams: ['accountId', 'clientAccountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'clientAccountId', 'userId'],
          pathParams: ['accountId', 'clientAccountId', 'userId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Accounts$Clients$Users;
  }();

  adexchangebuyer2_v2beta1.Resource$Accounts$Clients$Users = Resource$Accounts$Clients$Users;

  var Resource$Accounts$Creatives =
  /*#__PURE__*/
  function () {
    function Resource$Accounts$Creatives(context) {
      _classCallCheck(this, Resource$Accounts$Creatives);

      this.context = context;
      this.dealAssociations = new Resource$Accounts$Creatives$Dealassociations(this.context);
    }

    _createClass(Resource$Accounts$Creatives, [{
      key: "create",
      value: function create(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId'],
          pathParams: ['accountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'creativeId'],
          pathParams: ['accountId', 'creativeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId'],
          pathParams: ['accountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "stopWatching",
      value: function stopWatching(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'creativeId'],
          pathParams: ['accountId', 'creativeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'creativeId'],
          pathParams: ['accountId', 'creativeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "watch",
      value: function watch(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}:watch').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'creativeId'],
          pathParams: ['accountId', 'creativeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Accounts$Creatives;
  }();

  adexchangebuyer2_v2beta1.Resource$Accounts$Creatives = Resource$Accounts$Creatives;

  var Resource$Accounts$Creatives$Dealassociations =
  /*#__PURE__*/
  function () {
    function Resource$Accounts$Creatives$Dealassociations(context) {
      _classCallCheck(this, Resource$Accounts$Creatives$Dealassociations);

      this.context = context;
    }

    _createClass(Resource$Accounts$Creatives$Dealassociations, [{
      key: "add",
      value: function add(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'creativeId'],
          pathParams: ['accountId', 'creativeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'creativeId'],
          pathParams: ['accountId', 'creativeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "remove",
      value: function remove(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'creativeId'],
          pathParams: ['accountId', 'creativeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Accounts$Creatives$Dealassociations;
  }();

  adexchangebuyer2_v2beta1.Resource$Accounts$Creatives$Dealassociations = Resource$Accounts$Creatives$Dealassociations;

  var Resource$Accounts$Finalizedproposals =
  /*#__PURE__*/
  function () {
    function Resource$Accounts$Finalizedproposals(context) {
      _classCallCheck(this, Resource$Accounts$Finalizedproposals);

      this.context = context;
    }

    _createClass(Resource$Accounts$Finalizedproposals, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/finalizedProposals').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId'],
          pathParams: ['accountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Accounts$Finalizedproposals;
  }();

  adexchangebuyer2_v2beta1.Resource$Accounts$Finalizedproposals = Resource$Accounts$Finalizedproposals;

  var Resource$Accounts$Products =
  /*#__PURE__*/
  function () {
    function Resource$Accounts$Products(context) {
      _classCallCheck(this, Resource$Accounts$Products);

      this.context = context;
    }

    _createClass(Resource$Accounts$Products, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/products/{productId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'productId'],
          pathParams: ['accountId', 'productId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/products').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId'],
          pathParams: ['accountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Accounts$Products;
  }();

  adexchangebuyer2_v2beta1.Resource$Accounts$Products = Resource$Accounts$Products;

  var Resource$Accounts$Proposals =
  /*#__PURE__*/
  function () {
    function Resource$Accounts$Proposals(context) {
      _classCallCheck(this, Resource$Accounts$Proposals);

      this.context = context;
    }

    _createClass(Resource$Accounts$Proposals, [{
      key: "accept",
      value: function accept(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}:accept').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'proposalId'],
          pathParams: ['accountId', 'proposalId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "addNote",
      value: function addNote(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}:addNote').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'proposalId'],
          pathParams: ['accountId', 'proposalId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "cancelNegotiation",
      value: function cancelNegotiation(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}:cancelNegotiation').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'proposalId'],
          pathParams: ['accountId', 'proposalId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "completeSetup",
      value: function completeSetup(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}:completeSetup').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'proposalId'],
          pathParams: ['accountId', 'proposalId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "create",
      value: function create(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId'],
          pathParams: ['accountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'proposalId'],
          pathParams: ['accountId', 'proposalId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId'],
          pathParams: ['accountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "pause",
      value: function pause(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}:pause').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'proposalId'],
          pathParams: ['accountId', 'proposalId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "resume",
      value: function resume(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}:resume').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'proposalId'],
          pathParams: ['accountId', 'proposalId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'proposalId'],
          pathParams: ['accountId', 'proposalId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Accounts$Proposals;
  }();

  adexchangebuyer2_v2beta1.Resource$Accounts$Proposals = Resource$Accounts$Proposals;

  var Resource$Accounts$Publisherprofiles =
  /*#__PURE__*/
  function () {
    function Resource$Accounts$Publisherprofiles(context) {
      _classCallCheck(this, Resource$Accounts$Publisherprofiles);

      this.context = context;
    }

    _createClass(Resource$Accounts$Publisherprofiles, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/publisherProfiles/{publisherProfileId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'publisherProfileId'],
          pathParams: ['accountId', 'publisherProfileId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/accounts/{accountId}/publisherProfiles').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId'],
          pathParams: ['accountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Accounts$Publisherprofiles;
  }();

  adexchangebuyer2_v2beta1.Resource$Accounts$Publisherprofiles = Resource$Accounts$Publisherprofiles;

  var Resource$Bidders = function Resource$Bidders(context) {
    _classCallCheck(this, Resource$Bidders);

    this.context = context;
    this.accounts = new Resource$Bidders$Accounts(this.context);
    this.filterSets = new Resource$Bidders$Filtersets(this.context);
  };

  adexchangebuyer2_v2beta1.Resource$Bidders = Resource$Bidders;

  var Resource$Bidders$Accounts = function Resource$Bidders$Accounts(context) {
    _classCallCheck(this, Resource$Bidders$Accounts);

    this.context = context;
    this.filterSets = new Resource$Bidders$Accounts$Filtersets(this.context);
  };

  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts = Resource$Bidders$Accounts;

  var Resource$Bidders$Accounts$Filtersets =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Accounts$Filtersets(context) {
      _classCallCheck(this, Resource$Bidders$Accounts$Filtersets);

      this.context = context;
      this.bidMetrics = new Resource$Bidders$Accounts$Filtersets$Bidmetrics(this.context);
      this.bidResponseErrors = new Resource$Bidders$Accounts$Filtersets$Bidresponseerrors(this.context);
      this.bidResponsesWithoutBids = new Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids(this.context);
      this.filteredBidRequests = new Resource$Bidders$Accounts$Filtersets$Filteredbidrequests(this.context);
      this.filteredBids = new Resource$Bidders$Accounts$Filtersets$Filteredbids(this.context);
      this.impressionMetrics = new Resource$Bidders$Accounts$Filtersets$Impressionmetrics(this.context);
      this.losingBids = new Resource$Bidders$Accounts$Filtersets$Losingbids(this.context);
      this.nonBillableWinningBids = new Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids(this.context);
    }

    _createClass(Resource$Bidders$Accounts$Filtersets, [{
      key: "create",
      value: function create(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+ownerName}/filterSets').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['ownerName'],
          pathParams: ['ownerName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+ownerName}/filterSets').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['ownerName'],
          pathParams: ['ownerName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Accounts$Filtersets;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets = Resource$Bidders$Accounts$Filtersets;

  var Resource$Bidders$Accounts$Filtersets$Bidmetrics =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Accounts$Filtersets$Bidmetrics(context) {
      _classCallCheck(this, Resource$Bidders$Accounts$Filtersets$Bidmetrics);

      this.context = context;
    }

    _createClass(Resource$Bidders$Accounts$Filtersets$Bidmetrics, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/bidMetrics').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Accounts$Filtersets$Bidmetrics;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Bidmetrics = Resource$Bidders$Accounts$Filtersets$Bidmetrics;

  var Resource$Bidders$Accounts$Filtersets$Bidresponseerrors =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Accounts$Filtersets$Bidresponseerrors(context) {
      _classCallCheck(this, Resource$Bidders$Accounts$Filtersets$Bidresponseerrors);

      this.context = context;
    }

    _createClass(Resource$Bidders$Accounts$Filtersets$Bidresponseerrors, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/bidResponseErrors').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Accounts$Filtersets$Bidresponseerrors;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Bidresponseerrors = Resource$Bidders$Accounts$Filtersets$Bidresponseerrors;

  var Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids(context) {
      _classCallCheck(this, Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids);

      this.context = context;
    }

    _createClass(Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/bidResponsesWithoutBids').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids = Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids;

  var Resource$Bidders$Accounts$Filtersets$Filteredbidrequests =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Accounts$Filtersets$Filteredbidrequests(context) {
      _classCallCheck(this, Resource$Bidders$Accounts$Filtersets$Filteredbidrequests);

      this.context = context;
    }

    _createClass(Resource$Bidders$Accounts$Filtersets$Filteredbidrequests, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBidRequests').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Accounts$Filtersets$Filteredbidrequests;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Filteredbidrequests = Resource$Bidders$Accounts$Filtersets$Filteredbidrequests;

  var Resource$Bidders$Accounts$Filtersets$Filteredbids =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Accounts$Filtersets$Filteredbids(context) {
      _classCallCheck(this, Resource$Bidders$Accounts$Filtersets$Filteredbids);

      this.context = context;
      this.creatives = new Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives(this.context);
      this.details = new Resource$Bidders$Accounts$Filtersets$Filteredbids$Details(this.context);
    }

    _createClass(Resource$Bidders$Accounts$Filtersets$Filteredbids, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBids').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Accounts$Filtersets$Filteredbids;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Filteredbids = Resource$Bidders$Accounts$Filtersets$Filteredbids;

  var Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives(context) {
      _classCallCheck(this, Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives);

      this.context = context;
    }

    _createClass(Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/creatives').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName', 'creativeStatusId'],
          pathParams: ['creativeStatusId', 'filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives = Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives;

  var Resource$Bidders$Accounts$Filtersets$Filteredbids$Details =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Accounts$Filtersets$Filteredbids$Details(context) {
      _classCallCheck(this, Resource$Bidders$Accounts$Filtersets$Filteredbids$Details);

      this.context = context;
    }

    _createClass(Resource$Bidders$Accounts$Filtersets$Filteredbids$Details, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/details').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName', 'creativeStatusId'],
          pathParams: ['creativeStatusId', 'filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Accounts$Filtersets$Filteredbids$Details;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Filteredbids$Details = Resource$Bidders$Accounts$Filtersets$Filteredbids$Details;

  var Resource$Bidders$Accounts$Filtersets$Impressionmetrics =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Accounts$Filtersets$Impressionmetrics(context) {
      _classCallCheck(this, Resource$Bidders$Accounts$Filtersets$Impressionmetrics);

      this.context = context;
    }

    _createClass(Resource$Bidders$Accounts$Filtersets$Impressionmetrics, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/impressionMetrics').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Accounts$Filtersets$Impressionmetrics;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Impressionmetrics = Resource$Bidders$Accounts$Filtersets$Impressionmetrics;

  var Resource$Bidders$Accounts$Filtersets$Losingbids =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Accounts$Filtersets$Losingbids(context) {
      _classCallCheck(this, Resource$Bidders$Accounts$Filtersets$Losingbids);

      this.context = context;
    }

    _createClass(Resource$Bidders$Accounts$Filtersets$Losingbids, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/losingBids').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Accounts$Filtersets$Losingbids;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Losingbids = Resource$Bidders$Accounts$Filtersets$Losingbids;

  var Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids(context) {
      _classCallCheck(this, Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids);

      this.context = context;
    }

    _createClass(Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/nonBillableWinningBids').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids = Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids;

  var Resource$Bidders$Filtersets =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Filtersets(context) {
      _classCallCheck(this, Resource$Bidders$Filtersets);

      this.context = context;
      this.bidMetrics = new Resource$Bidders$Filtersets$Bidmetrics(this.context);
      this.bidResponseErrors = new Resource$Bidders$Filtersets$Bidresponseerrors(this.context);
      this.bidResponsesWithoutBids = new Resource$Bidders$Filtersets$Bidresponseswithoutbids(this.context);
      this.filteredBidRequests = new Resource$Bidders$Filtersets$Filteredbidrequests(this.context);
      this.filteredBids = new Resource$Bidders$Filtersets$Filteredbids(this.context);
      this.impressionMetrics = new Resource$Bidders$Filtersets$Impressionmetrics(this.context);
      this.losingBids = new Resource$Bidders$Filtersets$Losingbids(this.context);
      this.nonBillableWinningBids = new Resource$Bidders$Filtersets$Nonbillablewinningbids(this.context);
    }

    _createClass(Resource$Bidders$Filtersets, [{
      key: "create",
      value: function create(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+ownerName}/filterSets').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['ownerName'],
          pathParams: ['ownerName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+ownerName}/filterSets').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['ownerName'],
          pathParams: ['ownerName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Filtersets;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets = Resource$Bidders$Filtersets;

  var Resource$Bidders$Filtersets$Bidmetrics =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Filtersets$Bidmetrics(context) {
      _classCallCheck(this, Resource$Bidders$Filtersets$Bidmetrics);

      this.context = context;
    }

    _createClass(Resource$Bidders$Filtersets$Bidmetrics, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/bidMetrics').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Filtersets$Bidmetrics;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Bidmetrics = Resource$Bidders$Filtersets$Bidmetrics;

  var Resource$Bidders$Filtersets$Bidresponseerrors =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Filtersets$Bidresponseerrors(context) {
      _classCallCheck(this, Resource$Bidders$Filtersets$Bidresponseerrors);

      this.context = context;
    }

    _createClass(Resource$Bidders$Filtersets$Bidresponseerrors, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/bidResponseErrors').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Filtersets$Bidresponseerrors;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Bidresponseerrors = Resource$Bidders$Filtersets$Bidresponseerrors;

  var Resource$Bidders$Filtersets$Bidresponseswithoutbids =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Filtersets$Bidresponseswithoutbids(context) {
      _classCallCheck(this, Resource$Bidders$Filtersets$Bidresponseswithoutbids);

      this.context = context;
    }

    _createClass(Resource$Bidders$Filtersets$Bidresponseswithoutbids, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/bidResponsesWithoutBids').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Filtersets$Bidresponseswithoutbids;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Bidresponseswithoutbids = Resource$Bidders$Filtersets$Bidresponseswithoutbids;

  var Resource$Bidders$Filtersets$Filteredbidrequests =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Filtersets$Filteredbidrequests(context) {
      _classCallCheck(this, Resource$Bidders$Filtersets$Filteredbidrequests);

      this.context = context;
    }

    _createClass(Resource$Bidders$Filtersets$Filteredbidrequests, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBidRequests').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Filtersets$Filteredbidrequests;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Filteredbidrequests = Resource$Bidders$Filtersets$Filteredbidrequests;

  var Resource$Bidders$Filtersets$Filteredbids =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Filtersets$Filteredbids(context) {
      _classCallCheck(this, Resource$Bidders$Filtersets$Filteredbids);

      this.context = context;
      this.creatives = new Resource$Bidders$Filtersets$Filteredbids$Creatives(this.context);
      this.details = new Resource$Bidders$Filtersets$Filteredbids$Details(this.context);
    }

    _createClass(Resource$Bidders$Filtersets$Filteredbids, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBids').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Filtersets$Filteredbids;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Filteredbids = Resource$Bidders$Filtersets$Filteredbids;

  var Resource$Bidders$Filtersets$Filteredbids$Creatives =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Filtersets$Filteredbids$Creatives(context) {
      _classCallCheck(this, Resource$Bidders$Filtersets$Filteredbids$Creatives);

      this.context = context;
    }

    _createClass(Resource$Bidders$Filtersets$Filteredbids$Creatives, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/creatives').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName', 'creativeStatusId'],
          pathParams: ['creativeStatusId', 'filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Filtersets$Filteredbids$Creatives;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Filteredbids$Creatives = Resource$Bidders$Filtersets$Filteredbids$Creatives;

  var Resource$Bidders$Filtersets$Filteredbids$Details =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Filtersets$Filteredbids$Details(context) {
      _classCallCheck(this, Resource$Bidders$Filtersets$Filteredbids$Details);

      this.context = context;
    }

    _createClass(Resource$Bidders$Filtersets$Filteredbids$Details, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/details').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName', 'creativeStatusId'],
          pathParams: ['creativeStatusId', 'filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Filtersets$Filteredbids$Details;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Filteredbids$Details = Resource$Bidders$Filtersets$Filteredbids$Details;

  var Resource$Bidders$Filtersets$Impressionmetrics =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Filtersets$Impressionmetrics(context) {
      _classCallCheck(this, Resource$Bidders$Filtersets$Impressionmetrics);

      this.context = context;
    }

    _createClass(Resource$Bidders$Filtersets$Impressionmetrics, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/impressionMetrics').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Filtersets$Impressionmetrics;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Impressionmetrics = Resource$Bidders$Filtersets$Impressionmetrics;

  var Resource$Bidders$Filtersets$Losingbids =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Filtersets$Losingbids(context) {
      _classCallCheck(this, Resource$Bidders$Filtersets$Losingbids);

      this.context = context;
    }

    _createClass(Resource$Bidders$Filtersets$Losingbids, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/losingBids').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Filtersets$Losingbids;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Losingbids = Resource$Bidders$Filtersets$Losingbids;

  var Resource$Bidders$Filtersets$Nonbillablewinningbids =
  /*#__PURE__*/
  function () {
    function Resource$Bidders$Filtersets$Nonbillablewinningbids(context) {
      _classCallCheck(this, Resource$Bidders$Filtersets$Nonbillablewinningbids);

      this.context = context;
    }

    _createClass(Resource$Bidders$Filtersets$Nonbillablewinningbids, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2beta1/{+filterSetName}/nonBillableWinningBids').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['filterSetName'],
          pathParams: ['filterSetName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Bidders$Filtersets$Nonbillablewinningbids;
  }();

  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Nonbillablewinningbids = Resource$Bidders$Filtersets$Nonbillablewinningbids;
})(adexchangebuyer2_v2beta1 = exports.adexchangebuyer2_v2beta1 || (exports.adexchangebuyer2_v2beta1 = {}));