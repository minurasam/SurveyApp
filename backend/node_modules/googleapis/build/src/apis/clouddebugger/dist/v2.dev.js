"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clouddebugger_v2 = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/class-name-casing */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-disable no-irregular-whitespace */

var googleapis_common_1 = require("googleapis-common");

var clouddebugger_v2;

(function (clouddebugger_v2) {
  /**
   * Cloud Debugger API
   *
   * Examines the call stack and variables of a running application without stopping or slowing it down.
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const clouddebugger = google.clouddebugger('v2');
   * ```
   */
  var Clouddebugger = function Clouddebugger(options, google) {
    _classCallCheck(this, Clouddebugger);

    this.context = {
      _options: options || {},
      google: google
    };
    this.controller = new Resource$Controller(this.context);
    this["debugger"] = new Resource$Debugger(this.context);
  };

  clouddebugger_v2.Clouddebugger = Clouddebugger;

  var Resource$Controller = function Resource$Controller(context) {
    _classCallCheck(this, Resource$Controller);

    this.context = context;
    this.debuggees = new Resource$Controller$Debuggees(this.context);
  };

  clouddebugger_v2.Resource$Controller = Resource$Controller;

  var Resource$Controller$Debuggees =
  /*#__PURE__*/
  function () {
    function Resource$Controller$Debuggees(context) {
      _classCallCheck(this, Resource$Controller$Debuggees);

      this.context = context;
      this.breakpoints = new Resource$Controller$Debuggees$Breakpoints(this.context);
    }

    _createClass(Resource$Controller$Debuggees, [{
      key: "register",
      value: function register(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/controller/debuggees/register').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Controller$Debuggees;
  }();

  clouddebugger_v2.Resource$Controller$Debuggees = Resource$Controller$Debuggees;

  var Resource$Controller$Debuggees$Breakpoints =
  /*#__PURE__*/
  function () {
    function Resource$Controller$Debuggees$Breakpoints(context) {
      _classCallCheck(this, Resource$Controller$Debuggees$Breakpoints);

      this.context = context;
    }

    _createClass(Resource$Controller$Debuggees$Breakpoints, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/controller/debuggees/{debuggeeId}/breakpoints').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['debuggeeId'],
          pathParams: ['debuggeeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/controller/debuggees/{debuggeeId}/breakpoints/{id}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['debuggeeId', 'id'],
          pathParams: ['debuggeeId', 'id'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Controller$Debuggees$Breakpoints;
  }();

  clouddebugger_v2.Resource$Controller$Debuggees$Breakpoints = Resource$Controller$Debuggees$Breakpoints;

  var Resource$Debugger = function Resource$Debugger(context) {
    _classCallCheck(this, Resource$Debugger);

    this.context = context;
    this.debuggees = new Resource$Debugger$Debuggees(this.context);
  };

  clouddebugger_v2.Resource$Debugger = Resource$Debugger;

  var Resource$Debugger$Debuggees =
  /*#__PURE__*/
  function () {
    function Resource$Debugger$Debuggees(context) {
      _classCallCheck(this, Resource$Debugger$Debuggees);

      this.context = context;
      this.breakpoints = new Resource$Debugger$Debuggees$Breakpoints(this.context);
    }

    _createClass(Resource$Debugger$Debuggees, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/debugger/debuggees').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Debugger$Debuggees;
  }();

  clouddebugger_v2.Resource$Debugger$Debuggees = Resource$Debugger$Debuggees;

  var Resource$Debugger$Debuggees$Breakpoints =
  /*#__PURE__*/
  function () {
    function Resource$Debugger$Debuggees$Breakpoints(context) {
      _classCallCheck(this, Resource$Debugger$Debuggees$Breakpoints);

      this.context = context;
    }

    _createClass(Resource$Debugger$Debuggees$Breakpoints, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['debuggeeId', 'breakpointId'],
          pathParams: ['breakpointId', 'debuggeeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['debuggeeId', 'breakpointId'],
          pathParams: ['breakpointId', 'debuggeeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['debuggeeId'],
          pathParams: ['debuggeeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "set",
      value: function set(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/set').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['debuggeeId'],
          pathParams: ['debuggeeId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Debugger$Debuggees$Breakpoints;
  }();

  clouddebugger_v2.Resource$Debugger$Debuggees$Breakpoints = Resource$Debugger$Debuggees$Breakpoints;
})(clouddebugger_v2 = exports.clouddebugger_v2 || (exports.clouddebugger_v2 = {}));