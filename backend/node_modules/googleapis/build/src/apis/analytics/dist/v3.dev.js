"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.analytics_v3 = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/class-name-casing */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-disable no-irregular-whitespace */

var googleapis_common_1 = require("googleapis-common");

var analytics_v3;

(function (analytics_v3) {
  /**
   * Google Analytics API
   *
   * Views and manages your Google Analytics data.
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const analytics = google.analytics('v3');
   * ```
   */
  var Analytics = function Analytics(options, google) {
    _classCallCheck(this, Analytics);

    this.context = {
      _options: options || {},
      google: google
    };
    this.data = new Resource$Data(this.context);
    this.management = new Resource$Management(this.context);
    this.metadata = new Resource$Metadata(this.context);
    this.provisioning = new Resource$Provisioning(this.context);
    this.userDeletion = new Resource$Userdeletion(this.context);
  };

  analytics_v3.Analytics = Analytics;

  var Resource$Data = function Resource$Data(context) {
    _classCallCheck(this, Resource$Data);

    this.context = context;
    this.ga = new Resource$Data$Ga(this.context);
    this.mcf = new Resource$Data$Mcf(this.context);
    this.realtime = new Resource$Data$Realtime(this.context);
  };

  analytics_v3.Resource$Data = Resource$Data;

  var Resource$Data$Ga =
  /*#__PURE__*/
  function () {
    function Resource$Data$Ga(context) {
      _classCallCheck(this, Resource$Data$Ga);

      this.context = context;
    }

    _createClass(Resource$Data$Ga, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/data/ga').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['ids', 'start-date', 'end-date', 'metrics'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Data$Ga;
  }();

  analytics_v3.Resource$Data$Ga = Resource$Data$Ga;

  var Resource$Data$Mcf =
  /*#__PURE__*/
  function () {
    function Resource$Data$Mcf(context) {
      _classCallCheck(this, Resource$Data$Mcf);

      this.context = context;
    }

    _createClass(Resource$Data$Mcf, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/data/mcf').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['ids', 'start-date', 'end-date', 'metrics'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Data$Mcf;
  }();

  analytics_v3.Resource$Data$Mcf = Resource$Data$Mcf;

  var Resource$Data$Realtime =
  /*#__PURE__*/
  function () {
    function Resource$Data$Realtime(context) {
      _classCallCheck(this, Resource$Data$Realtime);

      this.context = context;
    }

    _createClass(Resource$Data$Realtime, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/data/realtime').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['ids', 'metrics'],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Data$Realtime;
  }();

  analytics_v3.Resource$Data$Realtime = Resource$Data$Realtime;

  var Resource$Management = function Resource$Management(context) {
    _classCallCheck(this, Resource$Management);

    this.context = context;
    this.accounts = new Resource$Management$Accounts(this.context);
    this.accountSummaries = new Resource$Management$Accountsummaries(this.context);
    this.accountUserLinks = new Resource$Management$Accountuserlinks(this.context);
    this.clientId = new Resource$Management$Clientid(this.context);
    this.customDataSources = new Resource$Management$Customdatasources(this.context);
    this.customDimensions = new Resource$Management$Customdimensions(this.context);
    this.customMetrics = new Resource$Management$Custommetrics(this.context);
    this.experiments = new Resource$Management$Experiments(this.context);
    this.filters = new Resource$Management$Filters(this.context);
    this.goals = new Resource$Management$Goals(this.context);
    this.profileFilterLinks = new Resource$Management$Profilefilterlinks(this.context);
    this.profiles = new Resource$Management$Profiles(this.context);
    this.profileUserLinks = new Resource$Management$Profileuserlinks(this.context);
    this.remarketingAudience = new Resource$Management$Remarketingaudience(this.context);
    this.segments = new Resource$Management$Segments(this.context);
    this.unsampledReports = new Resource$Management$Unsampledreports(this.context);
    this.uploads = new Resource$Management$Uploads(this.context);
    this.webproperties = new Resource$Management$Webproperties(this.context);
    this.webPropertyAdWordsLinks = new Resource$Management$Webpropertyadwordslinks(this.context);
    this.webpropertyUserLinks = new Resource$Management$Webpropertyuserlinks(this.context);
  };

  analytics_v3.Resource$Management = Resource$Management;

  var Resource$Management$Accounts =
  /*#__PURE__*/
  function () {
    function Resource$Management$Accounts(context) {
      _classCallCheck(this, Resource$Management$Accounts);

      this.context = context;
    }

    _createClass(Resource$Management$Accounts, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Accounts;
  }();

  analytics_v3.Resource$Management$Accounts = Resource$Management$Accounts;

  var Resource$Management$Accountsummaries =
  /*#__PURE__*/
  function () {
    function Resource$Management$Accountsummaries(context) {
      _classCallCheck(this, Resource$Management$Accountsummaries);

      this.context = context;
    }

    _createClass(Resource$Management$Accountsummaries, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accountSummaries').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Accountsummaries;
  }();

  analytics_v3.Resource$Management$Accountsummaries = Resource$Management$Accountsummaries;

  var Resource$Management$Accountuserlinks =
  /*#__PURE__*/
  function () {
    function Resource$Management$Accountuserlinks(context) {
      _classCallCheck(this, Resource$Management$Accountuserlinks);

      this.context = context;
    }

    _createClass(Resource$Management$Accountuserlinks, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/entityUserLinks/{linkId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['accountId', 'linkId'],
          pathParams: ['accountId', 'linkId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/entityUserLinks').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId'],
          pathParams: ['accountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/entityUserLinks').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId'],
          pathParams: ['accountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/entityUserLinks/{linkId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'linkId'],
          pathParams: ['accountId', 'linkId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Accountuserlinks;
  }();

  analytics_v3.Resource$Management$Accountuserlinks = Resource$Management$Accountuserlinks;

  var Resource$Management$Clientid =
  /*#__PURE__*/
  function () {
    function Resource$Management$Clientid(context) {
      _classCallCheck(this, Resource$Management$Clientid);

      this.context = context;
    }

    _createClass(Resource$Management$Clientid, [{
      key: "hashClientId",
      value: function hashClientId(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/clientId:hashClientId').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Clientid;
  }();

  analytics_v3.Resource$Management$Clientid = Resource$Management$Clientid;

  var Resource$Management$Customdatasources =
  /*#__PURE__*/
  function () {
    function Resource$Management$Customdatasources(context) {
      _classCallCheck(this, Resource$Management$Customdatasources);

      this.context = context;
    }

    _createClass(Resource$Management$Customdatasources, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Customdatasources;
  }();

  analytics_v3.Resource$Management$Customdatasources = Resource$Management$Customdatasources;

  var Resource$Management$Customdimensions =
  /*#__PURE__*/
  function () {
    function Resource$Management$Customdimensions(context) {
      _classCallCheck(this, Resource$Management$Customdimensions);

      this.context = context;
    }

    _createClass(Resource$Management$Customdimensions, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'customDimensionId'],
          pathParams: ['accountId', 'customDimensionId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "patch",
      value: function patch(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'customDimensionId'],
          pathParams: ['accountId', 'customDimensionId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'customDimensionId'],
          pathParams: ['accountId', 'customDimensionId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Customdimensions;
  }();

  analytics_v3.Resource$Management$Customdimensions = Resource$Management$Customdimensions;

  var Resource$Management$Custommetrics =
  /*#__PURE__*/
  function () {
    function Resource$Management$Custommetrics(context) {
      _classCallCheck(this, Resource$Management$Custommetrics);

      this.context = context;
    }

    _createClass(Resource$Management$Custommetrics, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'customMetricId'],
          pathParams: ['accountId', 'customMetricId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "patch",
      value: function patch(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'customMetricId'],
          pathParams: ['accountId', 'customMetricId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'customMetricId'],
          pathParams: ['accountId', 'customMetricId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Custommetrics;
  }();

  analytics_v3.Resource$Management$Custommetrics = Resource$Management$Custommetrics;

  var Resource$Management$Experiments =
  /*#__PURE__*/
  function () {
    function Resource$Management$Experiments(context) {
      _classCallCheck(this, Resource$Management$Experiments);

      this.context = context;
    }

    _createClass(Resource$Management$Experiments, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],
          pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],
          pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId'],
          pathParams: ['accountId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId'],
          pathParams: ['accountId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "patch",
      value: function patch(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],
          pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],
          pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Experiments;
  }();

  analytics_v3.Resource$Management$Experiments = Resource$Management$Experiments;

  var Resource$Management$Filters =
  /*#__PURE__*/
  function () {
    function Resource$Management$Filters(context) {
      _classCallCheck(this, Resource$Management$Filters);

      this.context = context;
    }

    _createClass(Resource$Management$Filters, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/filters/{filterId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['accountId', 'filterId'],
          pathParams: ['accountId', 'filterId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/filters/{filterId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'filterId'],
          pathParams: ['accountId', 'filterId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/filters').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId'],
          pathParams: ['accountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/filters').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId'],
          pathParams: ['accountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "patch",
      value: function patch(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/filters/{filterId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['accountId', 'filterId'],
          pathParams: ['accountId', 'filterId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/filters/{filterId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'filterId'],
          pathParams: ['accountId', 'filterId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Filters;
  }();

  analytics_v3.Resource$Management$Filters = Resource$Management$Filters;

  var Resource$Management$Goals =
  /*#__PURE__*/
  function () {
    function Resource$Management$Goals(context) {
      _classCallCheck(this, Resource$Management$Goals);

      this.context = context;
    }

    _createClass(Resource$Management$Goals, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'goalId'],
          pathParams: ['accountId', 'goalId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId'],
          pathParams: ['accountId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId'],
          pathParams: ['accountId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "patch",
      value: function patch(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'goalId'],
          pathParams: ['accountId', 'goalId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'goalId'],
          pathParams: ['accountId', 'goalId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Goals;
  }();

  analytics_v3.Resource$Management$Goals = Resource$Management$Goals;

  var Resource$Management$Profilefilterlinks =
  /*#__PURE__*/
  function () {
    function Resource$Management$Profilefilterlinks(context) {
      _classCallCheck(this, Resource$Management$Profilefilterlinks);

      this.context = context;
    }

    _createClass(Resource$Management$Profilefilterlinks, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],
          pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],
          pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId'],
          pathParams: ['accountId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId'],
          pathParams: ['accountId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "patch",
      value: function patch(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],
          pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],
          pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Profilefilterlinks;
  }();

  analytics_v3.Resource$Management$Profilefilterlinks = Resource$Management$Profilefilterlinks;

  var Resource$Management$Profiles =
  /*#__PURE__*/
  function () {
    function Resource$Management$Profiles(context) {
      _classCallCheck(this, Resource$Management$Profiles);

      this.context = context;
    }

    _createClass(Resource$Management$Profiles, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId'],
          pathParams: ['accountId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId'],
          pathParams: ['accountId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "patch",
      value: function patch(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId'],
          pathParams: ['accountId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId'],
          pathParams: ['accountId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Profiles;
  }();

  analytics_v3.Resource$Management$Profiles = Resource$Management$Profiles;

  var Resource$Management$Profileuserlinks =
  /*#__PURE__*/
  function () {
    function Resource$Management$Profileuserlinks(context) {
      _classCallCheck(this, Resource$Management$Profileuserlinks);

      this.context = context;
    }

    _createClass(Resource$Management$Profileuserlinks, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],
          pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId'],
          pathParams: ['accountId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId'],
          pathParams: ['accountId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],
          pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Profileuserlinks;
  }();

  analytics_v3.Resource$Management$Profileuserlinks = Resource$Management$Profileuserlinks;

  var Resource$Management$Remarketingaudience =
  /*#__PURE__*/
  function () {
    function Resource$Management$Remarketingaudience(context) {
      _classCallCheck(this, Resource$Management$Remarketingaudience);

      this.context = context;
    }

    _createClass(Resource$Management$Remarketingaudience, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],
          pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],
          pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "patch",
      value: function patch(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],
          pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],
          pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Remarketingaudience;
  }();

  analytics_v3.Resource$Management$Remarketingaudience = Resource$Management$Remarketingaudience;

  var Resource$Management$Segments =
  /*#__PURE__*/
  function () {
    function Resource$Management$Segments(context) {
      _classCallCheck(this, Resource$Management$Segments);

      this.context = context;
    }

    _createClass(Resource$Management$Segments, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/segments').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Segments;
  }();

  analytics_v3.Resource$Management$Segments = Resource$Management$Segments;

  var Resource$Management$Unsampledreports =
  /*#__PURE__*/
  function () {
    function Resource$Management$Unsampledreports(context) {
      _classCallCheck(this, Resource$Management$Unsampledreports);

      this.context = context;
    }

    _createClass(Resource$Management$Unsampledreports, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'unsampledReportId'],
          pathParams: ['accountId', 'profileId', 'unsampledReportId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'unsampledReportId'],
          pathParams: ['accountId', 'profileId', 'unsampledReportId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId'],
          pathParams: ['accountId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'profileId'],
          pathParams: ['accountId', 'profileId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Unsampledreports;
  }();

  analytics_v3.Resource$Management$Unsampledreports = Resource$Management$Unsampledreports;

  var Resource$Management$Uploads =
  /*#__PURE__*/
  function () {
    function Resource$Management$Uploads(context) {
      _classCallCheck(this, Resource$Management$Uploads);

      this.context = context;
    }

    _createClass(Resource$Management$Uploads, [{
      key: "deleteUploadData",
      value: function deleteUploadData(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/deleteUploadData').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId'],
          pathParams: ['accountId', 'customDataSourceId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads/{uploadId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId', 'uploadId'],
          pathParams: ['accountId', 'customDataSourceId', 'uploadId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId'],
          pathParams: ['accountId', 'customDataSourceId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "uploadData",
      value: function uploadData(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          mediaUrl: (rootUrl + '/upload/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads').replace(/([^:]\/)\/+/g, '$1'),
          requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId'],
          pathParams: ['accountId', 'customDataSourceId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Uploads;
  }();

  analytics_v3.Resource$Management$Uploads = Resource$Management$Uploads;

  var Resource$Management$Webproperties =
  /*#__PURE__*/
  function () {
    function Resource$Management$Webproperties(context) {
      _classCallCheck(this, Resource$Management$Webproperties);

      this.context = context;
    }

    _createClass(Resource$Management$Webproperties, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId'],
          pathParams: ['accountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId'],
          pathParams: ['accountId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "patch",
      value: function patch(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Webproperties;
  }();

  analytics_v3.Resource$Management$Webproperties = Resource$Management$Webproperties;

  var Resource$Management$Webpropertyadwordslinks =
  /*#__PURE__*/
  function () {
    function Resource$Management$Webpropertyadwordslinks(context) {
      _classCallCheck(this, Resource$Management$Webpropertyadwordslinks);

      this.context = context;
    }

    _createClass(Resource$Management$Webpropertyadwordslinks, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],
          pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],
          pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "patch",
      value: function patch(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],
          pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],
          pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Webpropertyadwordslinks;
  }();

  analytics_v3.Resource$Management$Webpropertyadwordslinks = Resource$Management$Webpropertyadwordslinks;

  var Resource$Management$Webpropertyuserlinks =
  /*#__PURE__*/
  function () {
    function Resource$Management$Webpropertyuserlinks(context) {
      _classCallCheck(this, Resource$Management$Webpropertyuserlinks);

      this.context = context;
    }

    _createClass(Resource$Management$Webpropertyuserlinks, [{
      key: "delete",
      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'linkId'],
          pathParams: ['accountId', 'linkId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "insert",
      value: function insert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId'],
          pathParams: ['accountId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['accountId', 'webPropertyId', 'linkId'],
          pathParams: ['accountId', 'linkId', 'webPropertyId'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Management$Webpropertyuserlinks;
  }();

  analytics_v3.Resource$Management$Webpropertyuserlinks = Resource$Management$Webpropertyuserlinks;

  var Resource$Metadata = function Resource$Metadata(context) {
    _classCallCheck(this, Resource$Metadata);

    this.context = context;
    this.columns = new Resource$Metadata$Columns(this.context);
  };

  analytics_v3.Resource$Metadata = Resource$Metadata;

  var Resource$Metadata$Columns =
  /*#__PURE__*/
  function () {
    function Resource$Metadata$Columns(context) {
      _classCallCheck(this, Resource$Metadata$Columns);

      this.context = context;
    }

    _createClass(Resource$Metadata$Columns, [{
      key: "list",
      value: function list(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/metadata/{reportType}/columns').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['reportType'],
          pathParams: ['reportType'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Metadata$Columns;
  }();

  analytics_v3.Resource$Metadata$Columns = Resource$Metadata$Columns;

  var Resource$Provisioning =
  /*#__PURE__*/
  function () {
    function Resource$Provisioning(context) {
      _classCallCheck(this, Resource$Provisioning);

      this.context = context;
    }

    _createClass(Resource$Provisioning, [{
      key: "createAccountTicket",
      value: function createAccountTicket(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/provisioning/createAccountTicket').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "createAccountTree",
      value: function createAccountTree(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/provisioning/createAccountTree').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Provisioning;
  }();

  analytics_v3.Resource$Provisioning = Resource$Provisioning;

  var Resource$Userdeletion = function Resource$Userdeletion(context) {
    _classCallCheck(this, Resource$Userdeletion);

    this.context = context;
    this.userDeletionRequest = new Resource$Userdeletion$Userdeletionrequest(this.context);
  };

  analytics_v3.Resource$Userdeletion = Resource$Userdeletion;

  var Resource$Userdeletion$Userdeletionrequest =
  /*#__PURE__*/
  function () {
    function Resource$Userdeletion$Userdeletionrequest(context) {
      _classCallCheck(this, Resource$Userdeletion$Userdeletionrequest);

      this.context = context;
    }

    _createClass(Resource$Userdeletion$Userdeletionrequest, [{
      key: "upsert",
      value: function upsert(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/analytics/v3/userDeletion/userDeletionRequests:upsert').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: [],
          pathParams: [],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Userdeletion$Userdeletionrequest;
  }();

  analytics_v3.Resource$Userdeletion$Userdeletionrequest = Resource$Userdeletion$Userdeletionrequest;
})(analytics_v3 = exports.analytics_v3 || (exports.analytics_v3 = {}));