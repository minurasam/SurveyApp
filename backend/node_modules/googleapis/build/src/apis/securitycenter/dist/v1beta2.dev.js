"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.securitycenter_v1beta2 = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/class-name-casing */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-disable no-irregular-whitespace */

var googleapis_common_1 = require("googleapis-common");

var securitycenter_v1beta2;

(function (securitycenter_v1beta2) {
  /**
   * Security Command Center API
   *
   * Security Command Center API provides access to temporal views of assets and findings within an organization.
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const securitycenter = google.securitycenter('v1beta2');
   * ```
   */
  var Securitycenter = function Securitycenter(options, google) {
    _classCallCheck(this, Securitycenter);

    this.context = {
      _options: options || {},
      google: google
    };
    this.folders = new Resource$Folders(this.context);
    this.organizations = new Resource$Organizations(this.context);
    this.projects = new Resource$Projects(this.context);
  };

  securitycenter_v1beta2.Securitycenter = Securitycenter;

  var Resource$Folders =
  /*#__PURE__*/
  function () {
    function Resource$Folders(context) {
      _classCallCheck(this, Resource$Folders);

      this.context = context;
      this.containerThreatDetectionSettings = new Resource$Folders$Containerthreatdetectionsettings(this.context);
      this.eventThreatDetectionSettings = new Resource$Folders$Eventthreatdetectionsettings(this.context);
      this.securityHealthAnalyticsSettings = new Resource$Folders$Securityhealthanalyticssettings(this.context);
      this.webSecurityScannerSettings = new Resource$Folders$Websecurityscannersettings(this.context);
    }

    _createClass(Resource$Folders, [{
      key: "getContainerThreatDetectionSettings",
      value: function getContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getEventThreatDetectionSettings",
      value: function getEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getSecurityHealthAnalyticsSettings",
      value: function getSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getWebSecurityScannerSettings",
      value: function getWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateContainerThreatDetectionSettings",
      value: function updateContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateEventThreatDetectionSettings",
      value: function updateEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateSecurityHealthAnalyticsSettings",
      value: function updateSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateWebSecurityScannerSettings",
      value: function updateWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Folders;
  }();

  securitycenter_v1beta2.Resource$Folders = Resource$Folders;

  var Resource$Folders$Containerthreatdetectionsettings =
  /*#__PURE__*/
  function () {
    function Resource$Folders$Containerthreatdetectionsettings(context) {
      _classCallCheck(this, Resource$Folders$Containerthreatdetectionsettings);

      this.context = context;
    }

    _createClass(Resource$Folders$Containerthreatdetectionsettings, [{
      key: "calculate",
      value: function calculate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Folders$Containerthreatdetectionsettings;
  }();

  securitycenter_v1beta2.Resource$Folders$Containerthreatdetectionsettings = Resource$Folders$Containerthreatdetectionsettings;

  var Resource$Folders$Eventthreatdetectionsettings =
  /*#__PURE__*/
  function () {
    function Resource$Folders$Eventthreatdetectionsettings(context) {
      _classCallCheck(this, Resource$Folders$Eventthreatdetectionsettings);

      this.context = context;
    }

    _createClass(Resource$Folders$Eventthreatdetectionsettings, [{
      key: "calculate",
      value: function calculate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Folders$Eventthreatdetectionsettings;
  }();

  securitycenter_v1beta2.Resource$Folders$Eventthreatdetectionsettings = Resource$Folders$Eventthreatdetectionsettings;

  var Resource$Folders$Securityhealthanalyticssettings =
  /*#__PURE__*/
  function () {
    function Resource$Folders$Securityhealthanalyticssettings(context) {
      _classCallCheck(this, Resource$Folders$Securityhealthanalyticssettings);

      this.context = context;
    }

    _createClass(Resource$Folders$Securityhealthanalyticssettings, [{
      key: "calculate",
      value: function calculate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Folders$Securityhealthanalyticssettings;
  }();

  securitycenter_v1beta2.Resource$Folders$Securityhealthanalyticssettings = Resource$Folders$Securityhealthanalyticssettings;

  var Resource$Folders$Websecurityscannersettings =
  /*#__PURE__*/
  function () {
    function Resource$Folders$Websecurityscannersettings(context) {
      _classCallCheck(this, Resource$Folders$Websecurityscannersettings);

      this.context = context;
    }

    _createClass(Resource$Folders$Websecurityscannersettings, [{
      key: "calculate",
      value: function calculate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Folders$Websecurityscannersettings;
  }();

  securitycenter_v1beta2.Resource$Folders$Websecurityscannersettings = Resource$Folders$Websecurityscannersettings;

  var Resource$Organizations =
  /*#__PURE__*/
  function () {
    function Resource$Organizations(context) {
      _classCallCheck(this, Resource$Organizations);

      this.context = context;
      this.containerThreatDetectionSettings = new Resource$Organizations$Containerthreatdetectionsettings(this.context);
      this.eventThreatDetectionSettings = new Resource$Organizations$Eventthreatdetectionsettings(this.context);
      this.securityHealthAnalyticsSettings = new Resource$Organizations$Securityhealthanalyticssettings(this.context);
      this.webSecurityScannerSettings = new Resource$Organizations$Websecurityscannersettings(this.context);
    }

    _createClass(Resource$Organizations, [{
      key: "getContainerThreatDetectionSettings",
      value: function getContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getEventThreatDetectionSettings",
      value: function getEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getSecurityCenterSettings",
      value: function getSecurityCenterSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getSecurityHealthAnalyticsSettings",
      value: function getSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getSubscription",
      value: function getSubscription(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getWebSecurityScannerSettings",
      value: function getWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateContainerThreatDetectionSettings",
      value: function updateContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateEventThreatDetectionSettings",
      value: function updateEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateSecurityHealthAnalyticsSettings",
      value: function updateSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateWebSecurityScannerSettings",
      value: function updateWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Organizations;
  }();

  securitycenter_v1beta2.Resource$Organizations = Resource$Organizations;

  var Resource$Organizations$Containerthreatdetectionsettings =
  /*#__PURE__*/
  function () {
    function Resource$Organizations$Containerthreatdetectionsettings(context) {
      _classCallCheck(this, Resource$Organizations$Containerthreatdetectionsettings);

      this.context = context;
    }

    _createClass(Resource$Organizations$Containerthreatdetectionsettings, [{
      key: "calculate",
      value: function calculate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Organizations$Containerthreatdetectionsettings;
  }();

  securitycenter_v1beta2.Resource$Organizations$Containerthreatdetectionsettings = Resource$Organizations$Containerthreatdetectionsettings;

  var Resource$Organizations$Eventthreatdetectionsettings =
  /*#__PURE__*/
  function () {
    function Resource$Organizations$Eventthreatdetectionsettings(context) {
      _classCallCheck(this, Resource$Organizations$Eventthreatdetectionsettings);

      this.context = context;
    }

    _createClass(Resource$Organizations$Eventthreatdetectionsettings, [{
      key: "calculate",
      value: function calculate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Organizations$Eventthreatdetectionsettings;
  }();

  securitycenter_v1beta2.Resource$Organizations$Eventthreatdetectionsettings = Resource$Organizations$Eventthreatdetectionsettings;

  var Resource$Organizations$Securityhealthanalyticssettings =
  /*#__PURE__*/
  function () {
    function Resource$Organizations$Securityhealthanalyticssettings(context) {
      _classCallCheck(this, Resource$Organizations$Securityhealthanalyticssettings);

      this.context = context;
    }

    _createClass(Resource$Organizations$Securityhealthanalyticssettings, [{
      key: "calculate",
      value: function calculate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Organizations$Securityhealthanalyticssettings;
  }();

  securitycenter_v1beta2.Resource$Organizations$Securityhealthanalyticssettings = Resource$Organizations$Securityhealthanalyticssettings;

  var Resource$Organizations$Websecurityscannersettings =
  /*#__PURE__*/
  function () {
    function Resource$Organizations$Websecurityscannersettings(context) {
      _classCallCheck(this, Resource$Organizations$Websecurityscannersettings);

      this.context = context;
    }

    _createClass(Resource$Organizations$Websecurityscannersettings, [{
      key: "calculate",
      value: function calculate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Organizations$Websecurityscannersettings;
  }();

  securitycenter_v1beta2.Resource$Organizations$Websecurityscannersettings = Resource$Organizations$Websecurityscannersettings;

  var Resource$Projects =
  /*#__PURE__*/
  function () {
    function Resource$Projects(context) {
      _classCallCheck(this, Resource$Projects);

      this.context = context;
      this.containerThreatDetectionSettings = new Resource$Projects$Containerthreatdetectionsettings(this.context);
      this.eventThreatDetectionSettings = new Resource$Projects$Eventthreatdetectionsettings(this.context);
      this.locations = new Resource$Projects$Locations(this.context);
      this.securityHealthAnalyticsSettings = new Resource$Projects$Securityhealthanalyticssettings(this.context);
      this.webSecurityScannerSettings = new Resource$Projects$Websecurityscannersettings(this.context);
    }

    _createClass(Resource$Projects, [{
      key: "getContainerThreatDetectionSettings",
      value: function getContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getEventThreatDetectionSettings",
      value: function getEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getSecurityHealthAnalyticsSettings",
      value: function getSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getWebSecurityScannerSettings",
      value: function getWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateContainerThreatDetectionSettings",
      value: function updateContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateEventThreatDetectionSettings",
      value: function updateEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateSecurityHealthAnalyticsSettings",
      value: function updateSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateWebSecurityScannerSettings",
      value: function updateWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Projects;
  }();

  securitycenter_v1beta2.Resource$Projects = Resource$Projects;

  var Resource$Projects$Containerthreatdetectionsettings =
  /*#__PURE__*/
  function () {
    function Resource$Projects$Containerthreatdetectionsettings(context) {
      _classCallCheck(this, Resource$Projects$Containerthreatdetectionsettings);

      this.context = context;
    }

    _createClass(Resource$Projects$Containerthreatdetectionsettings, [{
      key: "calculate",
      value: function calculate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Projects$Containerthreatdetectionsettings;
  }();

  securitycenter_v1beta2.Resource$Projects$Containerthreatdetectionsettings = Resource$Projects$Containerthreatdetectionsettings;

  var Resource$Projects$Eventthreatdetectionsettings =
  /*#__PURE__*/
  function () {
    function Resource$Projects$Eventthreatdetectionsettings(context) {
      _classCallCheck(this, Resource$Projects$Eventthreatdetectionsettings);

      this.context = context;
    }

    _createClass(Resource$Projects$Eventthreatdetectionsettings, [{
      key: "calculate",
      value: function calculate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Projects$Eventthreatdetectionsettings;
  }();

  securitycenter_v1beta2.Resource$Projects$Eventthreatdetectionsettings = Resource$Projects$Eventthreatdetectionsettings;

  var Resource$Projects$Locations = function Resource$Projects$Locations(context) {
    _classCallCheck(this, Resource$Projects$Locations);

    this.context = context;
    this.clusters = new Resource$Projects$Locations$Clusters(this.context);
  };

  securitycenter_v1beta2.Resource$Projects$Locations = Resource$Projects$Locations;

  var Resource$Projects$Locations$Clusters =
  /*#__PURE__*/
  function () {
    function Resource$Projects$Locations$Clusters(context) {
      _classCallCheck(this, Resource$Projects$Locations$Clusters);

      this.context = context;
      this.containerThreatDetectionSettings = new Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings(this.context);
    }

    _createClass(Resource$Projects$Locations$Clusters, [{
      key: "getContainerThreatDetectionSettings",
      value: function getContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "updateContainerThreatDetectionSettings",
      value: function updateContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Projects$Locations$Clusters;
  }();

  securitycenter_v1beta2.Resource$Projects$Locations$Clusters = Resource$Projects$Locations$Clusters;

  var Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings =
  /*#__PURE__*/
  function () {
    function Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings(context) {
      _classCallCheck(this, Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings);

      this.context = context;
    }

    _createClass(Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings, [{
      key: "calculate",
      value: function calculate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings;
  }();

  securitycenter_v1beta2.Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings = Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings;

  var Resource$Projects$Securityhealthanalyticssettings =
  /*#__PURE__*/
  function () {
    function Resource$Projects$Securityhealthanalyticssettings(context) {
      _classCallCheck(this, Resource$Projects$Securityhealthanalyticssettings);

      this.context = context;
    }

    _createClass(Resource$Projects$Securityhealthanalyticssettings, [{
      key: "calculate",
      value: function calculate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Projects$Securityhealthanalyticssettings;
  }();

  securitycenter_v1beta2.Resource$Projects$Securityhealthanalyticssettings = Resource$Projects$Securityhealthanalyticssettings;

  var Resource$Projects$Websecurityscannersettings =
  /*#__PURE__*/
  function () {
    function Resource$Projects$Websecurityscannersettings(context) {
      _classCallCheck(this, Resource$Projects$Websecurityscannersettings);

      this.context = context;
    }

    _createClass(Resource$Projects$Websecurityscannersettings, [{
      key: "calculate",
      value: function calculate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Projects$Websecurityscannersettings;
  }();

  securitycenter_v1beta2.Resource$Projects$Websecurityscannersettings = Resource$Projects$Websecurityscannersettings;
})(securitycenter_v1beta2 = exports.securitycenter_v1beta2 || (exports.securitycenter_v1beta2 = {}));