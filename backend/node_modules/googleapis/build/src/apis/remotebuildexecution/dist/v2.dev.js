"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.remotebuildexecution_v2 = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/class-name-casing */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-disable no-irregular-whitespace */

var googleapis_common_1 = require("googleapis-common");

var remotebuildexecution_v2;

(function (remotebuildexecution_v2) {
  /**
   * Remote Build Execution API
   *
   * Supplies a Remote Execution API service for tools such as bazel.
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const remotebuildexecution = google.remotebuildexecution('v2');
   * ```
   */
  var Remotebuildexecution = function Remotebuildexecution(options, google) {
    _classCallCheck(this, Remotebuildexecution);

    this.context = {
      _options: options || {},
      google: google
    };
    this.actionResults = new Resource$Actionresults(this.context);
    this.actions = new Resource$Actions(this.context);
    this.blobs = new Resource$Blobs(this.context);
    this.operations = new Resource$Operations(this.context);
    this.v2 = new Resource$V2(this.context);
  };

  remotebuildexecution_v2.Remotebuildexecution = Remotebuildexecution;

  var Resource$Actionresults =
  /*#__PURE__*/
  function () {
    function Resource$Actionresults(context) {
      _classCallCheck(this, Resource$Actionresults);

      this.context = context;
    }

    _createClass(Resource$Actionresults, [{
      key: "get",
      value: function get(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/{+instanceName}/actionResults/{hash}/{sizeBytes}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['instanceName', 'hash', 'sizeBytes'],
          pathParams: ['hash', 'instanceName', 'sizeBytes'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "update",
      value: function update(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/{+instanceName}/actionResults/{hash}/{sizeBytes}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT'
          }, options),
          params: params,
          requiredParams: ['instanceName', 'hash', 'sizeBytes'],
          pathParams: ['hash', 'instanceName', 'sizeBytes'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Actionresults;
  }();

  remotebuildexecution_v2.Resource$Actionresults = Resource$Actionresults;

  var Resource$Actions =
  /*#__PURE__*/
  function () {
    function Resource$Actions(context) {
      _classCallCheck(this, Resource$Actions);

      this.context = context;
    }

    _createClass(Resource$Actions, [{
      key: "execute",
      value: function execute(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/{+instanceName}/actions:execute').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['instanceName'],
          pathParams: ['instanceName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Actions;
  }();

  remotebuildexecution_v2.Resource$Actions = Resource$Actions;

  var Resource$Blobs =
  /*#__PURE__*/
  function () {
    function Resource$Blobs(context) {
      _classCallCheck(this, Resource$Blobs);

      this.context = context;
    }

    _createClass(Resource$Blobs, [{
      key: "batchRead",
      value: function batchRead(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/{+instanceName}/blobs:batchRead').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['instanceName'],
          pathParams: ['instanceName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "batchUpdate",
      value: function batchUpdate(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/{+instanceName}/blobs:batchUpdate').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['instanceName'],
          pathParams: ['instanceName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "findMissing",
      value: function findMissing(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/{+instanceName}/blobs:findMissing').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['instanceName'],
          pathParams: ['instanceName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }, {
      key: "getTree",
      value: function getTree(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/{+instanceName}/blobs/{hash}/{sizeBytes}:getTree').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['instanceName', 'hash', 'sizeBytes'],
          pathParams: ['hash', 'instanceName', 'sizeBytes'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Blobs;
  }();

  remotebuildexecution_v2.Resource$Blobs = Resource$Blobs;

  var Resource$Operations =
  /*#__PURE__*/
  function () {
    function Resource$Operations(context) {
      _classCallCheck(this, Resource$Operations);

      this.context = context;
    }

    _createClass(Resource$Operations, [{
      key: "waitExecution",
      value: function waitExecution(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/{+name}:waitExecution').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST'
          }, options),
          params: params,
          requiredParams: ['name'],
          pathParams: ['name'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$Operations;
  }();

  remotebuildexecution_v2.Resource$Operations = Resource$Operations;

  var Resource$V2 =
  /*#__PURE__*/
  function () {
    function Resource$V2(context) {
      _classCallCheck(this, Resource$V2);

      this.context = context;
    }

    _createClass(Resource$V2, [{
      key: "getCapabilities",
      value: function getCapabilities(paramsOrCallback, optionsOrCallback, callback) {
        var params = paramsOrCallback || {};
        var options = optionsOrCallback || {};

        if (typeof paramsOrCallback === 'function') {
          callback = paramsOrCallback;
          params = {};
          options = {};
        }

        if (typeof optionsOrCallback === 'function') {
          callback = optionsOrCallback;
          options = {};
        }

        var rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';
        var parameters = {
          options: Object.assign({
            url: (rootUrl + '/v2/{+instanceName}/capabilities').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET'
          }, options),
          params: params,
          requiredParams: ['instanceName'],
          pathParams: ['instanceName'],
          context: this.context
        };

        if (callback) {
          googleapis_common_1.createAPIRequest(parameters, callback);
        } else {
          return googleapis_common_1.createAPIRequest(parameters);
        }
      }
    }]);

    return Resource$V2;
  }();

  remotebuildexecution_v2.Resource$V2 = Resource$V2;
})(remotebuildexecution_v2 = exports.remotebuildexecution_v2 || (exports.remotebuildexecution_v2 = {}));