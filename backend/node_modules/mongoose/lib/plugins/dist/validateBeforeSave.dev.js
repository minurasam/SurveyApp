'use strict';
/*!
 * ignore
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function (schema) {
  var unshift = true;
  schema.pre('save', false, function validateBeforeSave(next, options) {
    var _this = this; // Nested docs have their own presave


    if (this.ownerDocument) {
      return next();
    }

    var hasValidateBeforeSaveOption = options && _typeof(options) === 'object' && 'validateBeforeSave' in options;
    var shouldValidate;

    if (hasValidateBeforeSaveOption) {
      shouldValidate = !!options.validateBeforeSave;
    } else {
      shouldValidate = this.$__schema.options.validateBeforeSave;
    } // Validate


    if (shouldValidate) {
      var hasValidateModifiedOnlyOption = options && _typeof(options) === 'object' && 'validateModifiedOnly' in options;
      var validateOptions = hasValidateModifiedOnlyOption ? {
        validateModifiedOnly: options.validateModifiedOnly
      } : null;
      this.validate(validateOptions, function (error) {
        return _this.$__schema.s.hooks.execPost('save:error', _this, [_this], {
          error: error
        }, function (error) {
          _this.$op = 'save';
          next(error);
        });
      });
    } else {
      next();
    }
  }, null, unshift);
};