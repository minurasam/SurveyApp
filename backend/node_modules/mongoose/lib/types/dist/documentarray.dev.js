'use strict';
/*!
 * Module dependencies.
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var CoreMongooseArray = require('./core_array');

var Document = require('../document');

var ObjectId = require('./objectid');

var castObjectId = require('../cast/objectid');

var getDiscriminatorByValue = require('../helpers/discriminator/getDiscriminatorByValue');

var internalToObjectOptions = require('../options').internalToObjectOptions;

var util = require('util');

var utils = require('../utils');

var arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;

var arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;

var arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;

var arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;

var documentArrayParent = require('../helpers/symbols').documentArrayParent;

var _basePush = Array.prototype.push;

var CoreDocumentArray =
/*#__PURE__*/
function (_CoreMongooseArray) {
  _inherits(CoreDocumentArray, _CoreMongooseArray);

  function CoreDocumentArray() {
    _classCallCheck(this, CoreDocumentArray);

    return _possibleConstructorReturn(this, _getPrototypeOf(CoreDocumentArray).apply(this, arguments));
  }

  _createClass(CoreDocumentArray, [{
    key: "toBSON",

    /*!
     * ignore
     */
    value: function toBSON() {
      return this.toObject(internalToObjectOptions);
    }
    /*!
     * ignore
     */

  }, {
    key: "map",
    value: function map() {
      var ret = _get(_getPrototypeOf(CoreDocumentArray.prototype), "map", this).apply(this, arguments);

      ret[arraySchemaSymbol] = null;
      ret[arrayPathSymbol] = null;
      ret[arrayParentSymbol] = null;
      return ret;
    }
    /**
     * Overrides MongooseArray#cast
     *
     * @method _cast
     * @api private
     * @receiver MongooseDocumentArray
     */

  }, {
    key: "_cast",
    value: function _cast(value, index) {
      if (this[arraySchemaSymbol] == null) {
        return value;
      }

      var Constructor = this[arraySchemaSymbol].casterConstructor;
      var isInstance = Constructor.$isMongooseDocumentArray ? value && value.isMongooseDocumentArray : value instanceof Constructor;

      if (isInstance || // Hack re: #5001, see #5005
      value && value.constructor && value.constructor.baseCasterConstructor === Constructor) {
        if (!(value[documentArrayParent] && value.__parentArray)) {
          // value may have been created using array.create()
          value[documentArrayParent] = this[arrayParentSymbol];
          value.__parentArray = this;
        }

        value.$setIndex(index);
        return value;
      }

      if (value === undefined || value === null) {
        return null;
      } // handle cast('string') or cast(ObjectId) etc.
      // only objects are permitted so we can safely assume that
      // non-objects are to be interpreted as _id


      if (Buffer.isBuffer(value) || value instanceof ObjectId || !utils.isObject(value)) {
        value = {
          _id: value
        };
      }

      if (value && Constructor.discriminators && Constructor.schema && Constructor.schema.options && Constructor.schema.options.discriminatorKey) {
        if (typeof value[Constructor.schema.options.discriminatorKey] === 'string' && Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {
          Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];
        } else {
          var constructorByValue = getDiscriminatorByValue(Constructor.discriminators, value[Constructor.schema.options.discriminatorKey]);

          if (constructorByValue) {
            Constructor = constructorByValue;
          }
        }
      }

      if (Constructor.$isMongooseDocumentArray) {
        return Constructor.cast(value, this, undefined, undefined, index);
      }

      return new Constructor(value, this, undefined, undefined, index);
    }
    /**
     * Searches array items for the first document with a matching _id.
     *
     * ####Example:
     *
     *     const embeddedDoc = m.array.id(some_id);
     *
     * @return {EmbeddedDocument|null} the subdocument or null if not found.
     * @param {ObjectId|String|Number|Buffer} id
     * @TODO cast to the _id based on schema for proper comparison
     * @method id
     * @api public
     * @receiver MongooseDocumentArray
     */

  }, {
    key: "id",
    value: function id(_id2) {
      var casted;
      var sid;

      var _id;

      try {
        casted = castObjectId(_id2).toString();
      } catch (e) {
        casted = null;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var val = _step.value;

          if (!val) {
            continue;
          }

          _id = val.get('_id');

          if (_id === null || typeof _id === 'undefined') {
            continue;
          } else if (_id instanceof Document) {
            sid || (sid = String(_id2));

            if (sid == _id._id) {
              return val;
            }
          } else if (!(_id2 instanceof ObjectId) && !(_id instanceof ObjectId)) {
            if (_id2 == _id || utils.deepEqual(_id2, _id)) {
              return val;
            }
          } else if (casted == _id) {
            return val;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return null;
    }
    /**
     * Returns a native js Array of plain js objects
     *
     * ####NOTE:
     *
     * _Each sub-document is converted to a plain object by calling its `#toObject` method._
     *
     * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion
     * @return {Array}
     * @method toObject
     * @api public
     * @receiver MongooseDocumentArray
     */

  }, {
    key: "toObject",
    value: function toObject(options) {
      // `[].concat` coerces the return value into a vanilla JS array, rather
      // than a Mongoose array.
      return [].concat(this.map(function (doc) {
        if (doc == null) {
          return null;
        }

        if (typeof doc.toObject !== 'function') {
          return doc;
        }

        return doc.toObject(options);
      }));
    }
  }, {
    key: "slice",
    value: function slice() {
      var arr = _get(_getPrototypeOf(CoreDocumentArray.prototype), "slice", this).apply(this, arguments);

      arr[arrayParentSymbol] = this[arrayParentSymbol];
      arr[arrayPathSymbol] = this[arrayPathSymbol];
      return arr;
    }
    /**
     * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.
     *
     * @param {Object} [args...]
     * @api public
     * @method push
     * @memberOf MongooseDocumentArray
     */

  }, {
    key: "push",
    value: function push() {
      var ret = _get(_getPrototypeOf(CoreDocumentArray.prototype), "push", this).apply(this, arguments);

      _updateParentPopulated(this);

      return ret;
    }
    /**
     * Pulls items from the array atomically.
     *
     * @param {Object} [args...]
     * @api public
     * @method pull
     * @memberOf MongooseDocumentArray
     */

  }, {
    key: "pull",
    value: function pull() {
      var ret = _get(_getPrototypeOf(CoreDocumentArray.prototype), "pull", this).apply(this, arguments);

      _updateParentPopulated(this);

      return ret;
    }
    /**
     * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.
     */

  }, {
    key: "shift",
    value: function shift() {
      var ret = _get(_getPrototypeOf(CoreDocumentArray.prototype), "shift", this).apply(this, arguments);

      _updateParentPopulated(this);

      return ret;
    }
    /**
     * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.
     */

  }, {
    key: "splice",
    value: function splice() {
      var ret = _get(_getPrototypeOf(CoreDocumentArray.prototype), "splice", this).apply(this, arguments);

      _updateParentPopulated(this);

      return ret;
    }
    /**
     * Helper for console.log
     *
     * @method inspect
     * @api public
     * @receiver MongooseDocumentArray
     */

  }, {
    key: "inspect",
    value: function inspect() {
      return this.toObject();
    }
    /**
     * Creates a subdocument casted to this schema.
     *
     * This is the same subdocument constructor used for casting.
     *
     * @param {Object} obj the value to cast to this arrays SubDocument schema
     * @method create
     * @api public
     * @receiver MongooseDocumentArray
     */

  }, {
    key: "create",
    value: function create(obj) {
      var Constructor = this[arraySchemaSymbol].casterConstructor;

      if (obj && Constructor.discriminators && Constructor.schema && Constructor.schema.options && Constructor.schema.options.discriminatorKey) {
        if (typeof obj[Constructor.schema.options.discriminatorKey] === 'string' && Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {
          Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];
        } else {
          var constructorByValue = getDiscriminatorByValue(Constructor.discriminators, obj[Constructor.schema.options.discriminatorKey]);

          if (constructorByValue) {
            Constructor = constructorByValue;
          }
        }
      }

      return new Constructor(obj, this);
    }
    /*!
     * ignore
     */

  }, {
    key: "notify",
    value: function notify(event) {
      var _this = this;

      return function notify(val, _arr) {
        _arr = _arr || _this;
        var i = _arr.length;

        while (i--) {
          if (_arr[i] == null) {
            continue;
          }

          switch (event) {
            // only swap for save event for now, we may change this to all event types later
            case 'save':
              val = _this[i];
              break;

            default:
              // NO-OP
              break;
          }

          if (_arr[i].isMongooseArray) {
            notify(val, _arr[i]);
          } else if (_arr[i]) {
            _arr[i].emit(event, val);
          }
        }
      };
    }
  }, {
    key: "_markModified",
    value: function _markModified(elem, embeddedPath) {
      var parent = this[arrayParentSymbol];
      var dirtyPath;

      if (parent) {
        dirtyPath = this[arrayPathSymbol];

        if (arguments.length) {
          if (embeddedPath != null) {
            // an embedded doc bubbled up the change
            var index = elem.__index;
            dirtyPath = dirtyPath + '.' + index + '.' + embeddedPath;
          } else {
            // directly set an index
            dirtyPath = dirtyPath + '.' + elem;
          }
        }

        if (dirtyPath != null && dirtyPath.endsWith('.$')) {
          return this;
        }

        parent.markModified(dirtyPath, arguments.length > 0 ? elem : parent);
      }

      return this;
    }
  }, {
    key: "isMongooseDocumentArray",
    get: function get() {
      return true;
    }
  }]);

  return CoreDocumentArray;
}(CoreMongooseArray);

if (util.inspect.custom) {
  CoreDocumentArray.prototype[util.inspect.custom] = CoreDocumentArray.prototype.inspect;
}
/*!
 * If this is a document array, each element may contain single
 * populated paths, so we need to modify the top-level document's
 * populated cache. See gh-8247, gh-8265.
 */


function _updateParentPopulated(arr) {
  var parent = arr[arrayParentSymbol];
  if (!parent || parent.$__.populated == null) return;
  var populatedPaths = Object.keys(parent.$__.populated).filter(function (p) {
    return p.startsWith(arr[arrayPathSymbol] + '.');
  });
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    var _loop = function _loop() {
      var path = _step2.value;
      var remnant = path.slice((arr[arrayPathSymbol] + '.').length);

      if (!Array.isArray(parent.$__.populated[path].value)) {
        return "continue";
      }

      parent.$__.populated[path].value = arr.map(function (val) {
        return val.populated(remnant);
      });
    };

    for (var _iterator2 = populatedPaths[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _ret = _loop();

      if (_ret === "continue") continue;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
}
/**
 * DocumentArray constructor
 *
 * @param {Array} values
 * @param {String} path the path to this array
 * @param {Document} doc parent document
 * @api private
 * @return {MongooseDocumentArray}
 * @inherits MongooseArray
 * @see http://bit.ly/f6CnZU
 */


function MongooseDocumentArray(values, path, doc) {
  // TODO: replace this with `new CoreDocumentArray().concat()` when we remove
  // support for node 4.x and 5.x, see https://i.imgur.com/UAAHk4S.png
  var arr = new CoreDocumentArray();
  arr[arrayAtomicsSymbol] = {};
  arr[arraySchemaSymbol] = void 0;

  if (Array.isArray(values)) {
    if (values[arrayPathSymbol] === path && values[arrayParentSymbol] === doc) {
      arr[arrayAtomicsSymbol] = Object.assign({}, values[arrayAtomicsSymbol]);
    }

    values.forEach(function (v) {
      _basePush.call(arr, v);
    });
  }

  arr[arrayPathSymbol] = path; // Because doc comes from the context of another function, doc === global
  // can happen if there was a null somewhere up the chain (see #3020 && #3034)
  // RB Jun 17, 2015 updated to check for presence of expected paths instead
  // to make more proof against unusual node environments

  if (doc && doc instanceof Document) {
    arr[arrayParentSymbol] = doc;
    arr[arraySchemaSymbol] = doc.schema.path(path); // `schema.path()` doesn't drill into nested arrays properly yet, see
    // gh-6398, gh-6602. This is a workaround because nested arrays are
    // always plain non-document arrays, so once you get to a document array
    // nesting is done. Matryoshka code.

    while (arr != null && arr[arraySchemaSymbol] != null && arr[arraySchemaSymbol].$isMongooseArray && !arr[arraySchemaSymbol].$isMongooseDocumentArray) {
      arr[arraySchemaSymbol] = arr[arraySchemaSymbol].casterConstructor;
    }
  }

  return arr;
}
/*!
 * Module exports.
 */


module.exports = MongooseDocumentArray;