'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Document = require('../document');

var EmbeddedDocument = require('./embedded');

var MongooseError = require('../error/mongooseError');

var ObjectId = require('./objectid');

var cleanModifiedSubpaths = require('../helpers/document/cleanModifiedSubpaths');

var get = require('../helpers/get');

var internalToObjectOptions = require('../options').internalToObjectOptions;

var utils = require('../utils');

var util = require('util');

var arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;

var arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;

var arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;

var arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;

var populateModelSymbol = require('../helpers/symbols').populateModelSymbol;

var slicedSymbol = Symbol('mongoose#Array#sliced');
var _basePush = Array.prototype.push;
var validatorsSymbol = Symbol('mongoose#MongooseCoreArray#validators');
/*!
 * ignore
 */

var CoreMongooseArray =
/*#__PURE__*/
function (_Array) {
  _inherits(CoreMongooseArray, _Array);

  function CoreMongooseArray() {
    _classCallCheck(this, CoreMongooseArray);

    return _possibleConstructorReturn(this, _getPrototypeOf(CoreMongooseArray).apply(this, arguments));
  }

  _createClass(CoreMongooseArray, [{
    key: "$__getAtomics",

    /**
     * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.
     *
     * If no atomics exist, we return all array values after conversion.
     *
     * @return {Array}
     * @method $__getAtomics
     * @memberOf MongooseArray
     * @instance
     * @api private
     */
    value: function $__getAtomics() {
      var ret = [];
      var keys = Object.keys(this[arrayAtomicsSymbol] || {});
      var i = keys.length;
      var opts = Object.assign({}, internalToObjectOptions, {
        _isNested: true
      });

      if (i === 0) {
        ret[0] = ['$set', this.toObject(opts)];
        return ret;
      }

      while (i--) {
        var op = keys[i];
        var val = this[arrayAtomicsSymbol][op]; // the atomic values which are arrays are not MongooseArrays. we
        // need to convert their elements as if they were MongooseArrays
        // to handle populated arrays versus DocumentArrays properly.

        if (utils.isMongooseObject(val)) {
          val = val.toObject(opts);
        } else if (Array.isArray(val)) {
          val = this.toObject.call(val, opts);
        } else if (val != null && Array.isArray(val.$each)) {
          val.$each = this.toObject.call(val.$each, opts);
        } else if (val != null && typeof val.valueOf === 'function') {
          val = val.valueOf();
        }

        if (op === '$addToSet') {
          val = {
            $each: val
          };
        }

        ret.push([op, val]);
      }

      return ret;
    }
    /*!
     * ignore
     */

  }, {
    key: "$atomics",
    value: function $atomics() {
      return this[arrayAtomicsSymbol];
    }
    /*!
     * ignore
     */

  }, {
    key: "$parent",
    value: function $parent() {
      return this[arrayParentSymbol];
    }
    /*!
     * ignore
     */

  }, {
    key: "$path",
    value: function $path() {
      return this[arrayPathSymbol];
    }
    /**
     * Atomically shifts the array at most one time per document `save()`.
     *
     * ####NOTE:
     *
     * _Calling this multiple times on an array before saving sends the same command as calling it once._
     * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._
     *
     *      doc.array = [1,2,3];
     *
     *      const shifted = doc.array.$shift();
     *      console.log(shifted); // 1
     *      console.log(doc.array); // [2,3]
     *
     *      // no affect
     *      shifted = doc.array.$shift();
     *      console.log(doc.array); // [2,3]
     *
     *      doc.save(function (err) {
     *        if (err) return handleError(err);
     *
     *        // we saved, now $shift works again
     *        shifted = doc.array.$shift();
     *        console.log(shifted ); // 2
     *        console.log(doc.array); // [3]
     *      })
     *
     * @api public
     * @memberOf MongooseArray
     * @instance
     * @method $shift
     * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop
     */

  }, {
    key: "$shift",
    value: function $shift() {
      this._registerAtomic('$pop', -1);

      this._markModified(); // only allow shifting once


      if (this._shifted) {
        return;
      }

      this._shifted = true;
      return [].shift.call(this);
    }
    /**
     * Pops the array atomically at most one time per document `save()`.
     *
     * #### NOTE:
     *
     * _Calling this mulitple times on an array before saving sends the same command as calling it once._
     * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._
     *
     *      doc.array = [1,2,3];
     *
     *      const popped = doc.array.$pop();
     *      console.log(popped); // 3
     *      console.log(doc.array); // [1,2]
     *
     *      // no affect
     *      popped = doc.array.$pop();
     *      console.log(doc.array); // [1,2]
     *
     *      doc.save(function (err) {
     *        if (err) return handleError(err);
     *
     *        // we saved, now $pop works again
     *        popped = doc.array.$pop();
     *        console.log(popped); // 2
     *        console.log(doc.array); // [1]
     *      })
     *
     * @api public
     * @method $pop
     * @memberOf MongooseArray
     * @instance
     * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop
     * @method $pop
     * @memberOf MongooseArray
     */

  }, {
    key: "$pop",
    value: function $pop() {
      this._registerAtomic('$pop', 1);

      this._markModified(); // only allow popping once


      if (this._popped) {
        return;
      }

      this._popped = true;
      return [].pop.call(this);
    }
    /*!
     * ignore
     */

  }, {
    key: "$schema",
    value: function $schema() {
      return this[arraySchemaSymbol];
    }
    /**
     * Casts a member based on this arrays schema.
     *
     * @param {any} value
     * @return value the casted value
     * @method _cast
     * @api private
     * @memberOf MongooseArray
     */

  }, {
    key: "_cast",
    value: function _cast(value) {
      var populated = false;
      var Model;

      if (this[arrayParentSymbol]) {
        populated = this[arrayParentSymbol].populated(this[arrayPathSymbol], true);
      }

      if (populated && value !== null && value !== undefined) {
        // cast to the populated Models schema
        Model = populated.options[populateModelSymbol]; // only objects are permitted so we can safely assume that
        // non-objects are to be interpreted as _id

        if (Buffer.isBuffer(value) || value instanceof ObjectId || !utils.isObject(value)) {
          value = {
            _id: value
          };
        } // gh-2399
        // we should cast model only when it's not a discriminator


        var isDisc = value.$__schema && value.$__schema.discriminatorMapping && value.$__schema.discriminatorMapping.key !== undefined;

        if (!isDisc) {
          value = new Model(value);
        }

        return this[arraySchemaSymbol].caster.applySetters(value, this[arrayParentSymbol], true);
      }

      return this[arraySchemaSymbol].caster.applySetters(value, this[arrayParentSymbol], false);
    }
    /**
     * Internal helper for .map()
     *
     * @api private
     * @return {Number}
     * @method _mapCast
     * @memberOf MongooseArray
     */

  }, {
    key: "_mapCast",
    value: function _mapCast(val, index) {
      return this._cast(val, this.length + index);
    }
    /**
     * Marks this array as modified.
     *
     * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)
     *
     * @param {EmbeddedDocument} embeddedDoc the embedded doc that invoked this method on the Array
     * @param {String} embeddedPath the path which changed in the embeddedDoc
     * @method _markModified
     * @api private
     * @memberOf MongooseArray
     */

  }, {
    key: "_markModified",
    value: function _markModified(elem) {
      var parent = this[arrayParentSymbol];
      var dirtyPath;

      if (parent) {
        dirtyPath = this[arrayPathSymbol];

        if (arguments.length) {
          dirtyPath = dirtyPath + '.' + elem;
        }

        if (dirtyPath != null && dirtyPath.endsWith('.$')) {
          return this;
        }

        parent.markModified(dirtyPath, arguments.length > 0 ? elem : parent);
      }

      return this;
    }
    /**
     * Register an atomic operation with the parent.
     *
     * @param {Array} op operation
     * @param {any} val
     * @method _registerAtomic
     * @api private
     * @memberOf MongooseArray
     */

  }, {
    key: "_registerAtomic",
    value: function _registerAtomic(op, val) {
      if (this[slicedSymbol]) {
        return;
      }

      if (op === '$set') {
        // $set takes precedence over all other ops.
        // mark entire array modified.
        this[arrayAtomicsSymbol] = {
          $set: val
        };
        cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]);

        this._markModified();

        return this;
      }

      var atomics = this[arrayAtomicsSymbol]; // reset pop/shift after save

      if (op === '$pop' && !('$pop' in atomics)) {
        var _this = this;

        this[arrayParentSymbol].once('save', function () {
          _this._popped = _this._shifted = null;
        });
      } // check for impossible $atomic combos (Mongo denies more than one
      // $atomic op on a single path


      if (this[arrayAtomicsSymbol].$set || Object.keys(atomics).length && !(op in atomics)) {
        // a different op was previously registered.
        // save the entire thing.
        this[arrayAtomicsSymbol] = {
          $set: this
        };
        return this;
      }

      var selector;

      if (op === '$pullAll' || op === '$addToSet') {
        atomics[op] || (atomics[op] = []);
        atomics[op] = atomics[op].concat(val);
      } else if (op === '$pullDocs') {
        var pullOp = atomics['$pull'] || (atomics['$pull'] = {});

        if (val[0] instanceof EmbeddedDocument) {
          selector = pullOp['$or'] || (pullOp['$or'] = []);
          Array.prototype.push.apply(selector, val.map(function (v) {
            return v.toObject({
              transform: false,
              virtuals: false
            });
          }));
        } else {
          selector = pullOp['_id'] || (pullOp['_id'] = {
            $in: []
          });
          selector['$in'] = selector['$in'].concat(val);
        }
      } else if (op === '$push') {
        atomics.$push = atomics.$push || {
          $each: []
        };

        if (val != null && utils.hasUserDefinedProperty(val, '$each')) {
          atomics.$push = val;
        } else {
          atomics.$push.$each = atomics.$push.$each.concat(val);
        }
      } else {
        atomics[op] = val;
      }

      return this;
    }
    /**
     * Adds values to the array if not already present.
     *
     * ####Example:
     *
     *     console.log(doc.array) // [2,3,4]
     *     const added = doc.array.addToSet(4,5);
     *     console.log(doc.array) // [2,3,4,5]
     *     console.log(added)     // [5]
     *
     * @param {any} [args...]
     * @return {Array} the values that were added
     * @memberOf MongooseArray
     * @api public
     * @method addToSet
     */

  }, {
    key: "addToSet",
    value: function addToSet() {
      _checkManualPopulation(this, arguments);

      var values = [].map.call(arguments, this._mapCast, this);
      values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);
      var added = [];
      var type = '';

      if (values[0] instanceof EmbeddedDocument) {
        type = 'doc';
      } else if (values[0] instanceof Date) {
        type = 'date';
      }

      values.forEach(function (v) {
        var found;
        var val = +v;

        switch (type) {
          case 'doc':
            found = this.some(function (doc) {
              return doc.equals(v);
            });
            break;

          case 'date':
            found = this.some(function (d) {
              return +d === val;
            });
            break;

          default:
            found = ~this.indexOf(v);
        }

        if (!found) {
          [].push.call(this, v);

          this._registerAtomic('$addToSet', v);

          this._markModified();

          [].push.call(added, v);
        }
      }, this);
      return added;
    }
    /**
     * Returns the number of pending atomic operations to send to the db for this array.
     *
     * @api private
     * @return {Number}
     * @method hasAtomics
     * @memberOf MongooseArray
     */

  }, {
    key: "hasAtomics",
    value: function hasAtomics() {
      if (!utils.isPOJO(this[arrayAtomicsSymbol])) {
        return 0;
      }

      return Object.keys(this[arrayAtomicsSymbol]).length;
    }
    /**
     * Return whether or not the `obj` is included in the array.
     *
     * @param {Object} obj the item to check
     * @return {Boolean}
     * @api public
     * @method includes
     * @memberOf MongooseArray
     */

  }, {
    key: "includes",
    value: function includes(obj, fromIndex) {
      var ret = this.indexOf(obj, fromIndex);
      return ret !== -1;
    }
    /**
     * Return the index of `obj` or `-1` if not found.
     *
     * @param {Object} obj the item to look for
     * @return {Number}
     * @api public
     * @method indexOf
     * @memberOf MongooseArray
     */

  }, {
    key: "indexOf",
    value: function indexOf(obj, fromIndex) {
      if (obj instanceof ObjectId) {
        obj = obj.toString();
      }

      fromIndex = fromIndex == null ? 0 : fromIndex;
      var len = this.length;

      for (var i = fromIndex; i < len; ++i) {
        if (obj == this[i]) {
          return i;
        }
      }

      return -1;
    }
    /**
     * Helper for console.log
     *
     * @api public
     * @method inspect
     * @memberOf MongooseArray
     */

  }, {
    key: "inspect",
    value: function inspect() {
      return JSON.stringify(this);
    }
    /**
     * Pushes items to the array non-atomically.
     *
     * ####NOTE:
     *
     * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._
     *
     * @param {any} [args...]
     * @api public
     * @method nonAtomicPush
     * @memberOf MongooseArray
     */

  }, {
    key: "nonAtomicPush",
    value: function nonAtomicPush() {
      var values = [].map.call(arguments, this._mapCast, this);
      var ret = [].push.apply(this, values);

      this._registerAtomic('$set', this);

      this._markModified();

      return ret;
    }
    /**
     * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.
     *
     * ####Note:
     *
     * _marks the entire array as modified which will pass the entire thing to $set potentially overwritting any changes that happen between when you retrieved the object and when you save it._
     *
     * @see MongooseArray#$pop #types_array_MongooseArray-%24pop
     * @api public
     * @method pop
     * @memberOf MongooseArray
     */

  }, {
    key: "pop",
    value: function pop() {
      var ret = [].pop.call(this);

      this._registerAtomic('$set', this);

      this._markModified();

      return ret;
    }
    /**
     * Pulls items from the array atomically. Equality is determined by casting
     * the provided value to an embedded document and comparing using
     * [the `Document.equals()` function.](./api.html#document_Document-equals)
     *
     * ####Examples:
     *
     *     doc.array.pull(ObjectId)
     *     doc.array.pull({ _id: 'someId' })
     *     doc.array.pull(36)
     *     doc.array.pull('tag 1', 'tag 2')
     *
     * To remove a document from a subdocument array we may pass an object with a matching `_id`.
     *
     *     doc.subdocs.push({ _id: 4815162342 })
     *     doc.subdocs.pull({ _id: 4815162342 }) // removed
     *
     * Or we may passing the _id directly and let mongoose take care of it.
     *
     *     doc.subdocs.push({ _id: 4815162342 })
     *     doc.subdocs.pull(4815162342); // works
     *
     * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.
     *
     * @param {any} [args...]
     * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull
     * @api public
     * @method pull
     * @memberOf MongooseArray
     */

  }, {
    key: "pull",
    value: function pull() {
      var values = [].map.call(arguments, this._cast, this);
      var cur = this[arrayParentSymbol].get(this[arrayPathSymbol]);
      var i = cur.length;
      var mem;

      while (i--) {
        mem = cur[i];

        if (mem instanceof Document) {
          var some = values.some(function (v) {
            return mem.equals(v);
          });

          if (some) {
            [].splice.call(cur, i, 1);
          }
        } else if (~cur.indexOf.call(values, mem)) {
          [].splice.call(cur, i, 1);
        }
      }

      if (values[0] instanceof EmbeddedDocument) {
        this._registerAtomic('$pullDocs', values.map(function (v) {
          return v.$__getValue('_id') || v;
        }));
      } else {
        this._registerAtomic('$pullAll', values);
      }

      this._markModified(); // Might have modified child paths and then pulled, like
      // `doc.children[1].name = 'test';` followed by
      // `doc.children.remove(doc.children[0]);`. In this case we fall back
      // to a `$set` on the whole array. See #3511


      if (cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]) > 0) {
        this._registerAtomic('$set', this);
      }

      return this;
    }
    /**
     * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.
     *
     * ####Example:
     *
     *     const schema = Schema({ nums: [Number] });
     *     const Model = mongoose.model('Test', schema);
     *
     *     const doc = await Model.create({ nums: [3, 4] });
     *     doc.nums.push(5); // Add 5 to the end of the array
     *     await doc.save();
     *
     *     // You can also pass an object with `$each` as the
     *     // first parameter to use MongoDB's `$position`
     *     doc.nums.push({
     *       $each: [1, 2],
     *       $position: 0
     *     });
     *     doc.nums; // [1, 2, 3, 4, 5]
     *
     * @param {Object} [args...]
     * @api public
     * @method push
     * @memberOf MongooseArray
     */

  }, {
    key: "push",
    value: function push() {
      var values = arguments;
      var atomic = values;
      var isOverwrite = values[0] != null && utils.hasUserDefinedProperty(values[0], '$each');

      if (isOverwrite) {
        atomic = values[0];
        values = values[0].$each;
      }

      if (this[arraySchemaSymbol] == null) {
        return _basePush.apply(this, values);
      }

      _checkManualPopulation(this, values);

      var parent = this[arrayParentSymbol];
      values = [].map.call(values, this._mapCast, this);
      values = this[arraySchemaSymbol].applySetters(values, parent, undefined, undefined, {
        skipDocumentArrayCast: true
      });
      var ret;
      var atomics = this[arrayAtomicsSymbol];

      if (isOverwrite) {
        atomic.$each = values;

        if (get(atomics, '$push.$each.length', 0) > 0 && atomics.$push.$position != atomics.$position) {
          throw new MongooseError('Cannot call `Array#push()` multiple times ' + 'with different `$position`');
        }

        if (atomic.$position != null) {
          [].splice.apply(this, [atomic.$position, 0].concat(values));
          ret = this.length;
        } else {
          ret = [].push.apply(this, values);
        }
      } else {
        if (get(atomics, '$push.$each.length', 0) > 0 && atomics.$push.$position != null) {
          throw new MongooseError('Cannot call `Array#push()` multiple times ' + 'with different `$position`');
        }

        atomic = values;
        ret = [].push.apply(this, values);
      }

      this._registerAtomic('$push', atomic);

      this._markModified();

      return ret;
    }
    /**
     * Alias of [pull](#mongoosearray_MongooseArray-pull)
     *
     * @see MongooseArray#pull #types_array_MongooseArray-pull
     * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull
     * @api public
     * @memberOf MongooseArray
     * @instance
     * @method remove
     */

  }, {
    key: "remove",
    value: function remove() {
      return this.pull.apply(this, arguments);
    }
    /**
     * Sets the casted `val` at index `i` and marks the array modified.
     *
     * ####Example:
     *
     *     // given documents based on the following
     *     const Doc = mongoose.model('Doc', new Schema({ array: [Number] }));
     *
     *     const doc = new Doc({ array: [2,3,4] })
     *
     *     console.log(doc.array) // [2,3,4]
     *
     *     doc.array.set(1,"5");
     *     console.log(doc.array); // [2,5,4] // properly cast to number
     *     doc.save() // the change is saved
     *
     *     // VS not using array#set
     *     doc.array[1] = "5";
     *     console.log(doc.array); // [2,"5",4] // no casting
     *     doc.save() // change is not saved
     *
     * @return {Array} this
     * @api public
     * @method set
     * @memberOf MongooseArray
     */

  }, {
    key: "set",
    value: function set(i, val) {
      var value = this._cast(val, i);

      this[i] = value;

      this._markModified(i);

      return this;
    }
    /**
     * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.
     *
     * ####Example:
     *
     *     doc.array = [2,3];
     *     const res = doc.array.shift();
     *     console.log(res) // 2
     *     console.log(doc.array) // [3]
     *
     * ####Note:
     *
     * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._
     *
     * @api public
     * @method shift
     * @memberOf MongooseArray
     */

  }, {
    key: "shift",
    value: function shift() {
      var ret = [].shift.call(this);

      this._registerAtomic('$set', this);

      this._markModified();

      return ret;
    }
    /**
     * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.
     *
     * ####NOTE:
     *
     * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._
     *
     * @api public
     * @method sort
     * @memberOf MongooseArray
     * @see https://masteringjs.io/tutorials/fundamentals/array-sort
     */

  }, {
    key: "sort",
    value: function sort() {
      var ret = [].sort.apply(this, arguments);

      this._registerAtomic('$set', this);

      return ret;
    }
    /**
     * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.
     *
     * ####Note:
     *
     * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._
     *
     * @api public
     * @method splice
     * @memberOf MongooseArray
     * @see https://masteringjs.io/tutorials/fundamentals/array-splice
     */

  }, {
    key: "splice",
    value: function splice() {
      var ret;

      _checkManualPopulation(this, Array.prototype.slice.call(arguments, 2));

      if (arguments.length) {
        var vals;

        if (this[arraySchemaSymbol] == null) {
          vals = arguments;
        } else {
          vals = [];

          for (var i = 0; i < arguments.length; ++i) {
            vals[i] = i < 2 ? arguments[i] : this._cast(arguments[i], arguments[0] + (i - 2));
          }
        }

        ret = [].splice.apply(this, vals);

        this._registerAtomic('$set', this);
      }

      return ret;
    }
    /*!
     * ignore
     */

  }, {
    key: "slice",
    value: function slice() {
      var ret = _get(_getPrototypeOf(CoreMongooseArray.prototype), "slice", this).apply(this, arguments);

      ret[arrayParentSymbol] = this[arrayParentSymbol];
      ret[arraySchemaSymbol] = this[arraySchemaSymbol];
      ret[arrayAtomicsSymbol] = this[arrayAtomicsSymbol];
      ret[arrayPathSymbol] = this[arrayPathSymbol];
      ret[slicedSymbol] = true;
      return ret;
    }
    /*!
     * ignore
     */

  }, {
    key: "filter",
    value: function filter() {
      var ret = _get(_getPrototypeOf(CoreMongooseArray.prototype), "filter", this).apply(this, arguments);

      ret[arrayParentSymbol] = this[arrayParentSymbol];
      ret[arraySchemaSymbol] = this[arraySchemaSymbol];
      ret[arrayAtomicsSymbol] = this[arrayAtomicsSymbol];
      ret[arrayPathSymbol] = this[arrayPathSymbol];
      return ret;
    }
    /*!
     * ignore
     */

  }, {
    key: "toBSON",
    value: function toBSON() {
      return this.toObject(internalToObjectOptions);
    }
    /**
     * Returns a native js Array.
     *
     * @param {Object} options
     * @return {Array}
     * @api public
     * @method toObject
     * @memberOf MongooseArray
     */

  }, {
    key: "toObject",
    value: function toObject(options) {
      if (options && options.depopulate) {
        options = utils.clone(options);
        options._isNested = true; // Ensure return value is a vanilla array, because in Node.js 6+ `map()`
        // is smart enough to use the inherited array's constructor.

        return [].concat(this).map(function (doc) {
          return doc instanceof Document ? doc.toObject(options) : doc;
        });
      }

      return [].concat(this);
    }
    /**
     * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.
     *
     * ####Note:
     *
     * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwriting any changes that happen between when you retrieved the object and when you save it._
     *
     * @api public
     * @method unshift
     * @memberOf MongooseArray
     */

  }, {
    key: "unshift",
    value: function unshift() {
      _checkManualPopulation(this, arguments);

      var values;

      if (this[arraySchemaSymbol] == null) {
        values = arguments;
      } else {
        values = [].map.call(arguments, this._cast, this);
        values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);
      }

      [].unshift.apply(this, values);

      this._registerAtomic('$set', this);

      this._markModified();

      return this.length;
    }
  }, {
    key: "isMongooseArray",
    get: function get() {
      return true;
    }
  }, {
    key: "validators",
    get: function get() {
      return this[validatorsSymbol];
    },
    set: function set(v) {
      this[validatorsSymbol] = v;
    }
  }]);

  return CoreMongooseArray;
}(_wrapNativeSuper(Array));

if (util.inspect.custom) {
  CoreMongooseArray.prototype[util.inspect.custom] = CoreMongooseArray.prototype.inspect;
}
/*!
 * ignore
 */


function _isAllSubdocs(docs, ref) {
  if (!ref) {
    return false;
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = docs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var arg = _step.value;

      if (arg == null) {
        return false;
      }

      var model = arg.constructor;

      if (!(arg instanceof Document) || model.modelName !== ref && model.baseModelName !== ref) {
        return false;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return true;
}
/*!
 * ignore
 */


function _checkManualPopulation(arr, docs) {
  var ref = arr == null ? null : get(arr[arraySchemaSymbol], 'caster.options.ref', null);

  if (arr.length === 0 && docs.length > 0) {
    if (_isAllSubdocs(docs, ref)) {
      arr[arrayParentSymbol].populated(arr[arrayPathSymbol], [], _defineProperty({}, populateModelSymbol, docs[0].constructor));
    }
  }
}

module.exports = CoreMongooseArray;