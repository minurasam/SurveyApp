/*!
 * Module dependencies.
 */
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MongooseError = require('./');

var ValidatorError =
/*#__PURE__*/
function (_MongooseError) {
  _inherits(ValidatorError, _MongooseError);

  /**
   * Schema validator error
   *
   * @param {Object} properties
   * @api private
   */
  function ValidatorError(properties) {
    var _this;

    _classCallCheck(this, ValidatorError);

    var msg = properties.message;

    if (!msg) {
      msg = MongooseError.messages.general["default"];
    }

    var message = formatMessage(msg, properties);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(ValidatorError).call(this, message));
    properties = Object.assign({}, properties, {
      message: message
    });
    _this.properties = properties;
    _this.kind = properties.type;
    _this.path = properties.path;
    _this.value = properties.value;
    _this.reason = properties.reason;
    return _this;
  }
  /*!
   * toString helper
   * TODO remove? This defaults to `${this.name}: ${this.message}`
   */


  _createClass(ValidatorError, [{
    key: "toString",
    value: function toString() {
      return this.message;
    }
    /*!
     * Ensure `name` and `message` show up in toJSON output re: gh-9296
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return Object.assign({
        name: this.name,
        message: this.message
      }, this);
    }
  }]);

  return ValidatorError;
}(MongooseError);

Object.defineProperty(ValidatorError.prototype, 'name', {
  value: 'ValidatorError'
});
/*!
 * The object used to define this validator. Not enumerable to hide
 * it from `require('util').inspect()` output re: gh-3925
 */

Object.defineProperty(ValidatorError.prototype, 'properties', {
  enumerable: false,
  writable: true,
  value: null
}); // Exposed for testing

ValidatorError.prototype.formatMessage = formatMessage;
/*!
 * Formats error messages
 */

function formatMessage(msg, properties) {
  if (typeof msg === 'function') {
    return msg(properties);
  }

  var propertyNames = Object.keys(properties);

  for (var _i = 0, _propertyNames = propertyNames; _i < _propertyNames.length; _i++) {
    var propertyName = _propertyNames[_i];

    if (propertyName === 'message') {
      continue;
    }

    msg = msg.replace('{' + propertyName.toUpperCase() + '}', properties[propertyName]);
  }

  return msg;
}
/*!
 * exports
 */


module.exports = ValidatorError;