'use strict';

module.exports = getVirtual;
/*!
 * ignore
 */

function getVirtual(schema, name) {
  if (schema.virtuals[name]) {
    return {
      virtual: schema.virtuals[name],
      path: void 0
    };
  }

  var parts = name.split('.');
  var cur = '';
  var nestedSchemaPath = '';

  for (var i = 0; i < parts.length; ++i) {
    cur += (cur.length > 0 ? '.' : '') + parts[i];

    if (schema.virtuals[cur]) {
      if (i === parts.length - 1) {
        return {
          virtual: schema.virtuals[cur],
          path: nestedSchemaPath
        };
      }

      continue;
    }

    if (schema.nested[cur]) {
      continue;
    }

    if (schema.paths[cur] && schema.paths[cur].schema) {
      schema = schema.paths[cur].schema;
      var rest = parts.slice(i + 1).join('.');

      if (schema.virtuals[rest]) {
        if (i === parts.length - 2) {
          return {
            virtual: schema.virtuals[rest],
            nestedSchemaPath: [nestedSchemaPath, cur].filter(function (v) {
              return !!v;
            }).join('.')
          };
        }

        continue;
      }

      if (i + 1 < parts.length && schema.discriminators) {
        for (var _i = 0, _Object$keys = Object.keys(schema.discriminators); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];
          var res = getVirtual(schema.discriminators[key], rest);

          if (res != null) {
            var _path = [nestedSchemaPath, cur, res.nestedSchemaPath].filter(function (v) {
              return !!v;
            }).join('.');

            return {
              virtual: res.virtual,
              nestedSchemaPath: _path
            };
          }
        }
      }

      nestedSchemaPath += (nestedSchemaPath.length > 0 ? '.' : '') + cur;
      cur = '';
      continue;
    }

    if (schema.discriminators) {
      for (var _i2 = 0, _Object$keys2 = Object.keys(schema.discriminators); _i2 < _Object$keys2.length; _i2++) {
        var discriminatorKey = _Object$keys2[_i2];
        var virtualFromDiscriminator = getVirtual(schema.discriminators[discriminatorKey], name);
        if (virtualFromDiscriminator) return virtualFromDiscriminator;
      }
    }

    return null;
  }
}