'use strict';

var modifiedPaths = require('./modifiedPaths');

module.exports = function updatedPathsByArrayFilter(update) {
  var updatedPaths = modifiedPaths(update);
  return Object.keys(updatedPaths).reduce(function (cur, path) {
    var matches = path.match(/\$\[[^\]]+\]/g);

    if (matches == null) {
      return cur;
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = matches[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var match = _step.value;
        var firstMatch = path.indexOf(match);

        if (firstMatch !== path.lastIndexOf(match)) {
          throw new Error("Path '".concat(path, "' contains the same array filter multiple times"));
        }

        cur[match.substring(2, match.length - 1)] = path.substr(0, firstMatch - 1).replace(/\$\[[^\]]+\]/g, '0');
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return cur;
  }, {});
};