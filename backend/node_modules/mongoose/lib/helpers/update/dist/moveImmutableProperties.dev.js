'use strict';

var get = require('../get');
/**
 * Given an update, move all $set on immutable properties to $setOnInsert.
 * This should only be called for upserts, because $setOnInsert bypasses the
 * strictness check for immutable properties.
 */


module.exports = function moveImmutableProperties(schema, update, ctx) {
  if (update == null) {
    return;
  }

  var keys = Object.keys(update);

  for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {
    var key = _keys[_i];
    var isDollarKey = key.startsWith('$');

    if (key === '$set') {
      var updatedPaths = Object.keys(update[key]);

      for (var _i2 = 0, _updatedPaths = updatedPaths; _i2 < _updatedPaths.length; _i2++) {
        var path = _updatedPaths[_i2];

        _walkUpdatePath(schema, update[key], path, update, ctx);
      }
    } else if (!isDollarKey) {
      _walkUpdatePath(schema, update, key, update, ctx);
    }
  }
};

function _walkUpdatePath(schema, op, path, update, ctx) {
  var schematype = schema.path(path);

  if (schematype == null) {
    return;
  }

  var immutable = get(schematype, 'options.immutable', null);

  if (immutable == null) {
    return;
  }

  if (typeof immutable === 'function') {
    immutable = immutable.call(ctx, ctx);
  }

  if (!immutable) {
    return;
  }

  update.$setOnInsert = update.$setOnInsert || {};
  update.$setOnInsert[path] = op[path];
  delete op[path];
}