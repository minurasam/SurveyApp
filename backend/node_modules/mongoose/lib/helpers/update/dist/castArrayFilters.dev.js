'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var castFilterPath = require('../query/castFilterPath');

var cleanPositionalOperators = require('../schema/cleanPositionalOperators');

var getPath = require('../schema/getPath');

var updatedPathsByArrayFilter = require('./updatedPathsByArrayFilter');

module.exports = function castArrayFilters(query) {
  var arrayFilters = query.options.arrayFilters;

  if (!Array.isArray(arrayFilters)) {
    return;
  }

  var update = query.getUpdate();
  var schema = query.schema;
  var strictQuery = schema.options.strictQuery;
  var updatedPathsByFilter = updatedPathsByArrayFilter(update);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = arrayFilters[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var filter = _step.value;

      if (filter == null) {
        throw new Error("Got null array filter in ".concat(arrayFilters));
      }

      for (var _i = 0, _Object$keys = Object.keys(filter); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];

        if (filter[key] == null) {
          continue;
        }

        var dot = key.indexOf('.');
        var filterPath = dot === -1 ? updatedPathsByFilter[key] + '.0' : updatedPathsByFilter[key.substr(0, dot)] + '.0' + key.substr(dot);

        if (filterPath == null) {
          throw new Error("Filter path not found for ".concat(key));
        } // If there are multiple array filters in the path being updated, make sure
        // to replace them so we can get the schema path.


        filterPath = cleanPositionalOperators(filterPath);
        var schematype = getPath(schema, filterPath);

        if (schematype == null) {
          if (!strictQuery) {
            return;
          } // For now, treat `strictQuery = true` and `strictQuery = 'throw'` as
          // equivalent for casting array filters. `strictQuery = true` doesn't
          // quite work in this context because we never want to silently strip out
          // array filters, even if the path isn't in the schema.


          throw new Error("Could not find path \"".concat(filterPath, "\" in schema"));
        }

        if (_typeof(filter[key]) === 'object') {
          filter[key] = castFilterPath(query, schematype, filter[key]);
        } else {
          filter[key] = schematype.castForQuery(filter[key]);
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};