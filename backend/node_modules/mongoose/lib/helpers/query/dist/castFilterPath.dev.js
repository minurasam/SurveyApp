'use strict';

var isOperator = require('./isOperator');

module.exports = function castFilterPath(query, schematype, val) {
  var ctx = query;
  var any$conditionals = Object.keys(val).some(isOperator);

  if (!any$conditionals) {
    return schematype.castForQueryWrapper({
      val: val,
      context: ctx
    });
  }

  var ks = Object.keys(val);
  var k = ks.length;

  while (k--) {
    var $cond = ks[k];
    var nested = val[$cond];

    if ($cond === '$not') {
      if (nested && schematype && !schematype.caster) {
        var _keys = Object.keys(nested);

        if (_keys.length && isOperator(_keys[0])) {
          for (var _i = 0, _Object$keys = Object.keys(nested); _i < _Object$keys.length; _i++) {
            var key = _Object$keys[_i];
            nested[key] = schematype.castForQueryWrapper({
              $conditional: key,
              val: nested[key],
              context: ctx
            });
          }
        } else {
          val[$cond] = schematype.castForQueryWrapper({
            $conditional: $cond,
            val: nested,
            context: ctx
          });
        }

        continue;
      } // cast(schematype.caster ? schematype.caster.schema : schema, nested, options, context);

    } else {
      val[$cond] = schematype.castForQueryWrapper({
        $conditional: $cond,
        val: nested,
        context: ctx
      });
    }
  }

  return val;
};