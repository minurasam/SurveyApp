'use strict';
/**
 * Convert a string or array into a projection object, retaining all
 * `-` and `+` paths.
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function parseProjection(v, retainMinusPaths) {
  var type = _typeof(v);

  if (type === 'string') {
    v = v.split(/\s+/);
  }

  if (!Array.isArray(v) && Object.prototype.toString.call(v) !== '[object Arguments]') {
    return v;
  }

  var len = v.length;
  var ret = {};

  for (var i = 0; i < len; ++i) {
    var field = v[i];

    if (!field) {
      continue;
    }

    var include = '-' == field[0] ? 0 : 1;

    if (!retainMinusPaths && include === 0) {
      field = field.substring(1);
    }

    ret[field] = include;
  }

  return ret;
};