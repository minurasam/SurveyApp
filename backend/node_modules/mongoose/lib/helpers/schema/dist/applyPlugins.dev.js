'use strict';

module.exports = function applyPlugins(schema, plugins, options, cacheKey) {
  if (schema[cacheKey]) {
    return;
  }

  schema[cacheKey] = true;

  if (!options || !options.skipTopLevel) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var plugin = _step.value;
        schema.plugin(plugin[0], plugin[1]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  options = Object.assign({}, options);
  delete options.skipTopLevel;

  if (options.applyPluginsToChildSchemas !== false) {
    for (var _i = 0, _Object$keys = Object.keys(schema.paths); _i < _Object$keys.length; _i++) {
      var path = _Object$keys[_i];
      var type = schema.paths[path];

      if (type.schema != null) {
        applyPlugins(type.schema, plugins, options, cacheKey); // Recompile schema because plugins may have changed it, see gh-7572

        type.caster.prototype.$__setSchema(type.schema);
      }
    }
  }

  var discriminators = schema.discriminators;

  if (discriminators == null) {
    return;
  }

  var applyPluginsToDiscriminators = options.applyPluginsToDiscriminators;
  var keys = Object.keys(discriminators);

  for (var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++) {
    var discriminatorKey = _keys[_i2];
    var discriminatorSchema = discriminators[discriminatorKey];
    applyPlugins(discriminatorSchema, plugins, {
      skipTopLevel: !applyPluginsToDiscriminators
    }, cacheKey);
  }
};