"use strict"; // Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultTransporter = void 0;

var gaxios_1 = require("gaxios");

var options_1 = require("./options"); // eslint-disable-next-line @typescript-eslint/no-var-requires


var pkg = require('../../package.json');

var PRODUCT_NAME = 'google-api-nodejs-client';

var DefaultTransporter =
/*#__PURE__*/
function () {
  function DefaultTransporter() {
    _classCallCheck(this, DefaultTransporter);
  }

  _createClass(DefaultTransporter, [{
    key: "configure",

    /**
     * Configures request options before making a request.
     * @param opts GaxiosOptions options.
     * @return Configured options.
     */
    value: function configure() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      opts.headers = opts.headers || {};

      if (typeof window === 'undefined') {
        // set transporter user agent if not in browser
        var uaValue = opts.headers['User-Agent'];

        if (!uaValue) {
          opts.headers['User-Agent'] = DefaultTransporter.USER_AGENT;
        } else if (!uaValue.includes("".concat(PRODUCT_NAME, "/"))) {
          opts.headers['User-Agent'] = "".concat(uaValue, " ").concat(DefaultTransporter.USER_AGENT);
        } // track google-auth-library-nodejs version:


        var authVersion = "auth/".concat(pkg.version);

        if (opts.headers['x-goog-api-client'] && !opts.headers['x-goog-api-client'].includes(authVersion)) {
          opts.headers['x-goog-api-client'] = "".concat(opts.headers['x-goog-api-client'], " ").concat(authVersion);
        } else if (!opts.headers['x-goog-api-client']) {
          var nodeVersion = process.version.replace(/^v/, '');
          opts.headers['x-goog-api-client'] = "gl-node/".concat(nodeVersion, " ").concat(authVersion);
        }
      }

      return opts;
    }
  }, {
    key: "request",
    value: function request(opts, callback) {
      var _this = this;

      // ensure the user isn't passing in request-style options
      opts = this.configure(opts);

      try {
        options_1.validate(opts);
      } catch (e) {
        if (callback) {
          return callback(e);
        } else {
          throw e;
        }
      }

      if (callback) {
        gaxios_1.request(opts).then(function (r) {
          callback(null, r);
        }, function (e) {
          callback(_this.processError(e));
        });
      } else {
        return gaxios_1.request(opts)["catch"](function (e) {
          throw _this.processError(e);
        });
      }
    }
    /**
     * Changes the error to include details from the body.
     */

  }, {
    key: "processError",
    value: function processError(e) {
      var res = e.response;
      var err = e;
      var body = res ? res.data : null;

      if (res && body && body.error && res.status !== 200) {
        if (typeof body.error === 'string') {
          err.message = body.error;
          err.code = res.status.toString();
        } else if (Array.isArray(body.error.errors)) {
          err.message = body.error.errors.map(function (err2) {
            return err2.message;
          }).join('\n');
          err.code = body.error.code;
          err.errors = body.error.errors;
        } else {
          err.message = body.error.message;
          err.code = body.error.code || res.status;
        }
      } else if (res && res.status >= 400) {
        // Consider all 4xx and 5xx responses errors.
        err.message = body;
        err.code = res.status.toString();
      }

      return err;
    }
  }]);

  return DefaultTransporter;
}();

exports.DefaultTransporter = DefaultTransporter;
/**
 * Default user agent.
 */

DefaultTransporter.USER_AGENT = "".concat(PRODUCT_NAME, "/").concat(pkg.version);