"use strict"; // Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StsCredentials = void 0;

var querystring = require("querystring");

var transporters_1 = require("../transporters");

var oauth2common_1 = require("./oauth2common");
/**
 * Implements the OAuth 2.0 token exchange based on
 * https://tools.ietf.org/html/rfc8693
 */


var StsCredentials =
/*#__PURE__*/
function (_oauth2common_1$OAuth) {
  _inherits(StsCredentials, _oauth2common_1$OAuth);

  /**
   * Initializes an STS credentials instance.
   * @param tokenExchangeEndpoint The token exchange endpoint.
   * @param clientAuthentication The client authentication credentials if
   *   available.
   */
  function StsCredentials(tokenExchangeEndpoint, clientAuthentication) {
    var _this;

    _classCallCheck(this, StsCredentials);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(StsCredentials).call(this, clientAuthentication));
    _this.tokenExchangeEndpoint = tokenExchangeEndpoint;
    _this.transporter = new transporters_1.DefaultTransporter();
    return _this;
  }
  /**
   * Exchanges the provided token for another type of token based on the
   * rfc8693 spec.
   * @param stsCredentialsOptions The token exchange options used to populate
   *   the token exchange request.
   * @param additionalHeaders Optional additional headers to pass along the
   *   request.
   * @param options Optional additional GCP-specific non-spec defined options
   *   to send with the request.
   *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`
   * @return A promise that resolves with the token exchange response containing
   *   the requested token and its expiration time.
   */


  _createClass(StsCredentials, [{
    key: "exchangeToken",
    value: function exchangeToken(stsCredentialsOptions, additionalHeaders, // eslint-disable-next-line @typescript-eslint/no-explicit-any
    options) {
      var _a, _b, _c, values, headers, opts, response, stsSuccessfulResponse;

      return regeneratorRuntime.async(function exchangeToken$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              values = {
                grant_type: stsCredentialsOptions.grantType,
                resource: stsCredentialsOptions.resource,
                audience: stsCredentialsOptions.audience,
                scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),
                requested_token_type: stsCredentialsOptions.requestedTokenType,
                subject_token: stsCredentialsOptions.subjectToken,
                subject_token_type: stsCredentialsOptions.subjectTokenType,
                actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,
                actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,
                // Non-standard GCP-specific options.
                options: options && JSON.stringify(options)
              }; // Remove undefined fields.

              Object.keys(values).forEach(function (key) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                if (typeof values[key] === 'undefined') {
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  delete values[key];
                }
              });
              headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
              }; // Inject additional STS headers if available.

              Object.assign(headers, additionalHeaders || {});
              opts = {
                url: this.tokenExchangeEndpoint,
                method: 'POST',
                headers: headers,
                data: querystring.stringify(values),
                responseType: 'json'
              }; // Apply OAuth client authentication.

              this.applyClientAuthenticationOptions(opts);
              _context.prev = 6;
              _context.next = 9;
              return regeneratorRuntime.awrap(this.transporter.request(opts));

            case 9:
              response = _context.sent;
              // Successful response.
              stsSuccessfulResponse = response.data;
              stsSuccessfulResponse.res = response;
              return _context.abrupt("return", stsSuccessfulResponse);

            case 15:
              _context.prev = 15;
              _context.t0 = _context["catch"](6);

              if (!_context.t0.response) {
                _context.next = 19;
                break;
              }

              throw oauth2common_1.getErrorFromOAuthErrorResponse(_context.t0.response.data, // Preserve other fields from the original error.
              _context.t0);

            case 19:
              throw _context.t0;

            case 20:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[6, 15]]);
    }
  }]);

  return StsCredentials;
}(oauth2common_1.OAuthClientAuthHandler);

exports.StsCredentials = StsCredentials;