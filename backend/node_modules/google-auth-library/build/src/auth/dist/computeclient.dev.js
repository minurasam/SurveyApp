"use strict"; // Copyright 2013 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Compute = void 0;

var arrify = require("arrify");

var gcpMetadata = require("gcp-metadata");

var oauth2client_1 = require("./oauth2client");

var Compute =
/*#__PURE__*/
function (_oauth2client_1$OAuth) {
  _inherits(Compute, _oauth2client_1$OAuth);

  /**
   * Google Compute Engine service account credentials.
   *
   * Retrieve access token from the metadata server.
   * See: https://developers.google.com/compute/docs/authentication
   */
  function Compute() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Compute);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Compute).call(this, options)); // Start with an expired refresh token, which will automatically be
    // refreshed before the first API call is made.

    _this.credentials = {
      expiry_date: 1,
      refresh_token: 'compute-placeholder'
    };
    _this.serviceAccountEmail = options.serviceAccountEmail || 'default';
    _this.scopes = arrify(options.scopes);
    return _this;
  }
  /**
   * Refreshes the access token.
   * @param refreshToken Unused parameter
   */


  _createClass(Compute, [{
    key: "refreshTokenNoCache",
    value: function refreshTokenNoCache( // eslint-disable-next-line @typescript-eslint/no-unused-vars
    refreshToken) {
      var tokenPath, data, instanceOptions, tokens;
      return regeneratorRuntime.async(function refreshTokenNoCache$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              tokenPath = "service-accounts/".concat(this.serviceAccountEmail, "/token");
              _context.prev = 1;
              instanceOptions = {
                property: tokenPath
              };

              if (this.scopes.length > 0) {
                instanceOptions.params = {
                  scopes: this.scopes.join(',')
                };
              }

              _context.next = 6;
              return regeneratorRuntime.awrap(gcpMetadata.instance(instanceOptions));

            case 6:
              data = _context.sent;
              _context.next = 14;
              break;

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](1);
              _context.t0.message = "Could not refresh access token: ".concat(_context.t0.message);
              this.wrapError(_context.t0);
              throw _context.t0;

            case 14:
              tokens = data;

              if (data && data.expires_in) {
                tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;
                delete tokens.expires_in;
              }

              this.emit('tokens', tokens);
              return _context.abrupt("return", {
                tokens: tokens,
                res: null
              });

            case 18:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[1, 9]]);
    }
    /**
     * Fetches an ID token.
     * @param targetAudience the audience for the fetched ID token.
     */

  }, {
    key: "fetchIdToken",
    value: function fetchIdToken(targetAudience) {
      var idTokenPath, idToken, instanceOptions;
      return regeneratorRuntime.async(function fetchIdToken$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              idTokenPath = "service-accounts/".concat(this.serviceAccountEmail, "/identity") + "?format=full&audience=".concat(targetAudience);
              _context2.prev = 1;
              instanceOptions = {
                property: idTokenPath
              };
              _context2.next = 5;
              return regeneratorRuntime.awrap(gcpMetadata.instance(instanceOptions));

            case 5:
              idToken = _context2.sent;
              _context2.next = 12;
              break;

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](1);
              _context2.t0.message = "Could not fetch ID token: ".concat(_context2.t0.message);
              throw _context2.t0;

            case 12:
              return _context2.abrupt("return", idToken);

            case 13:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[1, 8]]);
    }
  }, {
    key: "wrapError",
    value: function wrapError(e) {
      var res = e.response;

      if (res && res.status) {
        e.code = res.status.toString();

        if (res.status === 403) {
          e.message = 'A Forbidden error was returned while attempting to retrieve an access ' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have the correct permission scopes specified: ' + e.message;
        } else if (res.status === 404) {
          e.message = 'A Not Found error was returned while attempting to retrieve an access' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have any permission scopes specified: ' + e.message;
        }
      }
    }
  }]);

  return Compute;
}(oauth2client_1.OAuth2Client);

exports.Compute = Compute;