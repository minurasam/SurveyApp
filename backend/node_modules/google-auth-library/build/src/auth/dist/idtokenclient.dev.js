"use strict"; // Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IdTokenClient = void 0;

var oauth2client_1 = require("./oauth2client");

var IdTokenClient =
/*#__PURE__*/
function (_oauth2client_1$OAuth) {
  _inherits(IdTokenClient, _oauth2client_1$OAuth);

  /**
   * Google ID Token client
   *
   * Retrieve access token from the metadata server.
   * See: https://developers.google.com/compute/docs/authentication
   */
  function IdTokenClient(options) {
    var _this;

    _classCallCheck(this, IdTokenClient);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(IdTokenClient).call(this));
    _this.targetAudience = options.targetAudience;
    _this.idTokenProvider = options.idTokenProvider;
    return _this;
  }

  _createClass(IdTokenClient, [{
    key: "getRequestMetadataAsync",
    value: function getRequestMetadataAsync( // eslint-disable-next-line @typescript-eslint/no-unused-vars
    url) {
      var idToken, headers;
      return regeneratorRuntime.async(function getRequestMetadataAsync$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(!this.credentials.id_token || (this.credentials.expiry_date || 0) < Date.now())) {
                _context.next = 5;
                break;
              }

              _context.next = 3;
              return regeneratorRuntime.awrap(this.idTokenProvider.fetchIdToken(this.targetAudience));

            case 3:
              idToken = _context.sent;
              this.credentials = {
                id_token: idToken,
                expiry_date: this.getIdTokenExpiryDate(idToken)
              };

            case 5:
              headers = {
                Authorization: 'Bearer ' + this.credentials.id_token
              };
              return _context.abrupt("return", {
                headers: headers
              });

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "getIdTokenExpiryDate",
    value: function getIdTokenExpiryDate(idToken) {
      var payloadB64 = idToken.split('.')[1];

      if (payloadB64) {
        var payload = JSON.parse(Buffer.from(payloadB64, 'base64').toString('ascii'));
        return payload.exp * 1000;
      }
    }
  }]);

  return IdTokenClient;
}(oauth2client_1.OAuth2Client);

exports.IdTokenClient = IdTokenClient;