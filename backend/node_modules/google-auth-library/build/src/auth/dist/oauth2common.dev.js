"use strict"; // Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getErrorFromOAuthErrorResponse = exports.OAuthClientAuthHandler = void 0;

var querystring = require("querystring");

var crypto_1 = require("../crypto/crypto");
/** List of HTTP methods that accept request bodies. */


var METHODS_SUPPORTING_REQUEST_BODY = ['PUT', 'POST', 'PATCH'];
/**
 * Abstract class for handling client authentication in OAuth-based
 * operations.
 * When request-body client authentication is used, only application/json and
 * application/x-www-form-urlencoded content types for HTTP methods that support
 * request bodies are supported.
 */

var OAuthClientAuthHandler =
/*#__PURE__*/
function () {
  /**
   * Instantiates an OAuth client authentication handler.
   * @param clientAuthentication The client auth credentials.
   */
  function OAuthClientAuthHandler(clientAuthentication) {
    _classCallCheck(this, OAuthClientAuthHandler);

    this.clientAuthentication = clientAuthentication;
    this.crypto = crypto_1.createCrypto();
  }
  /**
   * Applies client authentication on the OAuth request's headers or POST
   * body but does not process the request.
   * @param opts The GaxiosOptions whose headers or data are to be modified
   *   depending on the client authentication mechanism to be used.
   * @param bearerToken The optional bearer token to use for authentication.
   *   When this is used, no client authentication credentials are needed.
   */


  _createClass(OAuthClientAuthHandler, [{
    key: "applyClientAuthenticationOptions",
    value: function applyClientAuthenticationOptions(opts, bearerToken) {
      // Inject authenticated header.
      this.injectAuthenticatedHeaders(opts, bearerToken); // Inject authenticated request body.

      if (!bearerToken) {
        this.injectAuthenticatedRequestBody(opts);
      }
    }
    /**
     * Applies client authentication on the request's header if either
     * basic authentication or bearer token authentication is selected.
     *
     * @param opts The GaxiosOptions whose headers or data are to be modified
     *   depending on the client authentication mechanism to be used.
     * @param bearerToken The optional bearer token to use for authentication.
     *   When this is used, no client authentication credentials are needed.
     */

  }, {
    key: "injectAuthenticatedHeaders",
    value: function injectAuthenticatedHeaders(opts, bearerToken) {
      var _a; // Bearer token prioritized higher than basic Auth.


      if (bearerToken) {
        opts.headers = opts.headers || {};
        Object.assign(opts.headers, {
          Authorization: "Bearer ".concat(bearerToken, "}")
        });
      } else if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'basic') {
        opts.headers = opts.headers || {};
        var clientId = this.clientAuthentication.clientId;
        var clientSecret = this.clientAuthentication.clientSecret || '';
        var base64EncodedCreds = this.crypto.encodeBase64StringUtf8("".concat(clientId, ":").concat(clientSecret));
        Object.assign(opts.headers, {
          Authorization: "Basic ".concat(base64EncodedCreds)
        });
      }
    }
    /**
     * Applies client authentication on the request's body if request-body
     * client authentication is selected.
     *
     * @param opts The GaxiosOptions whose headers or data are to be modified
     *   depending on the client authentication mechanism to be used.
     */

  }, {
    key: "injectAuthenticatedRequestBody",
    value: function injectAuthenticatedRequestBody(opts) {
      var _a;

      if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'request-body') {
        var method = (opts.method || 'GET').toUpperCase(); // Inject authenticated request body.

        if (METHODS_SUPPORTING_REQUEST_BODY.indexOf(method) !== -1) {
          // Get content-type.
          var contentType;
          var headers = opts.headers || {};

          for (var key in headers) {
            if (key.toLowerCase() === 'content-type' && headers[key]) {
              contentType = headers[key].toLowerCase();
              break;
            }
          }

          if (contentType === 'application/x-www-form-urlencoded') {
            opts.data = opts.data || '';
            var data = querystring.parse(opts.data);
            Object.assign(data, {
              client_id: this.clientAuthentication.clientId,
              client_secret: this.clientAuthentication.clientSecret || ''
            });
            opts.data = querystring.stringify(data);
          } else if (contentType === 'application/json') {
            opts.data = opts.data || {};
            Object.assign(opts.data, {
              client_id: this.clientAuthentication.clientId,
              client_secret: this.clientAuthentication.clientSecret || ''
            });
          } else {
            throw new Error("".concat(contentType, " content-types are not supported with ") + "".concat(this.clientAuthentication.confidentialClientType, " ") + 'client authentication');
          }
        } else {
          throw new Error("".concat(method, " HTTP method does not support ") + "".concat(this.clientAuthentication.confidentialClientType, " ") + 'client authentication');
        }
      }
    }
  }]);

  return OAuthClientAuthHandler;
}();

exports.OAuthClientAuthHandler = OAuthClientAuthHandler;
/**
 * Converts an OAuth error response to a native JavaScript Error.
 * @param resp The OAuth error response to convert to a native Error object.
 * @param err The optional original error. If provided, the error properties
 *   will be copied to the new error.
 * @return The converted native Error object.
 */

function getErrorFromOAuthErrorResponse(resp, err) {
  // Error response.
  var errorCode = resp.error;
  var errorDescription = resp.error_description;
  var errorUri = resp.error_uri;
  var message = "Error code ".concat(errorCode);

  if (typeof errorDescription !== 'undefined') {
    message += ": ".concat(errorDescription);
  }

  if (typeof errorUri !== 'undefined') {
    message += " - ".concat(errorUri);
  }

  var newError = new Error(message); // Copy properties from original error to newly generated error.

  if (err) {
    var keys = Object.keys(err);

    if (err.stack) {
      // Copy error.stack if available.
      keys.push('stack');
    }

    keys.forEach(function (key) {
      // Do not overwrite the message field.
      if (key !== 'message') {
        Object.defineProperty(newError, key, {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          value: err[key],
          writable: false,
          enumerable: true
        });
      }
    });
  }

  return newError;
}

exports.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;