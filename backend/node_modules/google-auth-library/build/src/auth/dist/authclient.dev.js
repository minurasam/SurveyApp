"use strict"; // Copyright 2012 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AuthClient = void 0;

var events_1 = require("events");

var transporters_1 = require("../transporters");

var AuthClient =
/*#__PURE__*/
function (_events_1$EventEmitte) {
  _inherits(AuthClient, _events_1$EventEmitte);

  function AuthClient() {
    var _this;

    _classCallCheck(this, AuthClient);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuthClient).apply(this, arguments));
    _this.transporter = new transporters_1.DefaultTransporter();
    _this.credentials = {};
    _this.eagerRefreshThresholdMillis = 5 * 60 * 1000;
    _this.forceRefreshOnFailure = false;
    return _this;
  }
  /**
   * Sets the auth credentials.
   */


  _createClass(AuthClient, [{
    key: "setCredentials",
    value: function setCredentials(credentials) {
      this.credentials = credentials;
    }
    /**
     * Append additional headers, e.g., x-goog-user-project, shared across the
     * classes inheriting AuthClient. This method should be used by any method
     * that overrides getRequestMetadataAsync(), which is a shared helper for
     * setting request information in both gRPC and HTTP API calls.
     *
     * @param headers objedcdt to append additional headers to.
     */

  }, {
    key: "addSharedMetadataHeaders",
    value: function addSharedMetadataHeaders(headers) {
      // quota_project_id, stored in application_default_credentials.json, is set in
      // the x-goog-user-project header, to indicate an alternate account for
      // billing and quota:
      if (!headers['x-goog-user-project'] && // don't override a value the user sets.
      this.quotaProjectId) {
        headers['x-goog-user-project'] = this.quotaProjectId;
      }

      return headers;
    }
  }]);

  return AuthClient;
}(events_1.EventEmitter);

exports.AuthClient = AuthClient;