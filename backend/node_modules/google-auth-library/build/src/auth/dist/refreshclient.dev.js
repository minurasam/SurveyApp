"use strict"; // Copyright 2015 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserRefreshClient = void 0;

var oauth2client_1 = require("./oauth2client");

var UserRefreshClient =
/*#__PURE__*/
function (_oauth2client_1$OAuth) {
  _inherits(UserRefreshClient, _oauth2client_1$OAuth);

  function UserRefreshClient(optionsOrClientId, clientSecret, refreshToken, eagerRefreshThresholdMillis, forceRefreshOnFailure) {
    var _this;

    _classCallCheck(this, UserRefreshClient);

    var opts = optionsOrClientId && _typeof(optionsOrClientId) === 'object' ? optionsOrClientId : {
      clientId: optionsOrClientId,
      clientSecret: clientSecret,
      refreshToken: refreshToken,
      eagerRefreshThresholdMillis: eagerRefreshThresholdMillis,
      forceRefreshOnFailure: forceRefreshOnFailure
    };
    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserRefreshClient).call(this, {
      clientId: opts.clientId,
      clientSecret: opts.clientSecret,
      eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,
      forceRefreshOnFailure: opts.forceRefreshOnFailure
    }));
    _this._refreshToken = opts.refreshToken;
    _this.credentials.refresh_token = opts.refreshToken;
    return _this;
  }
  /**
   * Refreshes the access token.
   * @param refreshToken An ignored refreshToken..
   * @param callback Optional callback.
   */


  _createClass(UserRefreshClient, [{
    key: "refreshTokenNoCache",
    value: function refreshTokenNoCache( // eslint-disable-next-line @typescript-eslint/no-unused-vars
    refreshToken) {
      return regeneratorRuntime.async(function refreshTokenNoCache$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", _get(_getPrototypeOf(UserRefreshClient.prototype), "refreshTokenNoCache", this).call(this, this._refreshToken));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
    /**
     * Create a UserRefreshClient credentials instance using the given input
     * options.
     * @param json The input object.
     */

  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!json) {
        throw new Error('Must pass in a JSON object containing the user refresh token');
      }

      if (json.type !== 'authorized_user') {
        throw new Error('The incoming JSON object does not have the "authorized_user" type');
      }

      if (!json.client_id) {
        throw new Error('The incoming JSON object does not contain a client_id field');
      }

      if (!json.client_secret) {
        throw new Error('The incoming JSON object does not contain a client_secret field');
      }

      if (!json.refresh_token) {
        throw new Error('The incoming JSON object does not contain a refresh_token field');
      }

      this._clientId = json.client_id;
      this._clientSecret = json.client_secret;
      this._refreshToken = json.refresh_token;
      this.credentials.refresh_token = json.refresh_token;
      this.quotaProjectId = json.quota_project_id;
    }
  }, {
    key: "fromStream",
    value: function fromStream(inputStream, callback) {
      if (callback) {
        this.fromStreamAsync(inputStream).then(function () {
          return callback();
        }, callback);
      } else {
        return this.fromStreamAsync(inputStream);
      }
    }
  }, {
    key: "fromStreamAsync",
    value: function fromStreamAsync(inputStream) {
      var _this2 = this;

      return regeneratorRuntime.async(function fromStreamAsync$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", new Promise(function (resolve, reject) {
                if (!inputStream) {
                  return reject(new Error('Must pass in a stream containing the user refresh token.'));
                }

                var s = '';
                inputStream.setEncoding('utf8').on('error', reject).on('data', function (chunk) {
                  return s += chunk;
                }).on('end', function () {
                  try {
                    var data = JSON.parse(s);

                    _this2.fromJSON(data);

                    return resolve();
                  } catch (err) {
                    return reject(err);
                  }
                });
              }));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      });
    }
  }]);

  return UserRefreshClient;
}(oauth2client_1.OAuth2Client);

exports.UserRefreshClient = UserRefreshClient;