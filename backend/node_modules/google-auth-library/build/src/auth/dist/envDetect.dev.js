"use strict"; // Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEnv = exports.clear = exports.GCPEnv = void 0;

var gcpMetadata = require("gcp-metadata");

var GCPEnv;

(function (GCPEnv) {
  GCPEnv["APP_ENGINE"] = "APP_ENGINE";
  GCPEnv["KUBERNETES_ENGINE"] = "KUBERNETES_ENGINE";
  GCPEnv["CLOUD_FUNCTIONS"] = "CLOUD_FUNCTIONS";
  GCPEnv["COMPUTE_ENGINE"] = "COMPUTE_ENGINE";
  GCPEnv["NONE"] = "NONE";
})(GCPEnv = exports.GCPEnv || (exports.GCPEnv = {}));

var envPromise;

function clear() {
  envPromise = undefined;
}

exports.clear = clear;

function getEnv() {
  return regeneratorRuntime.async(function getEnv$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!envPromise) {
            _context.next = 2;
            break;
          }

          return _context.abrupt("return", envPromise);

        case 2:
          envPromise = getEnvMemoized();
          return _context.abrupt("return", envPromise);

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
}

exports.getEnv = getEnv;

function getEnvMemoized() {
  var env;
  return regeneratorRuntime.async(function getEnvMemoized$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          env = GCPEnv.NONE;

          if (!isAppEngine()) {
            _context2.next = 5;
            break;
          }

          env = GCPEnv.APP_ENGINE;
          _context2.next = 22;
          break;

        case 5:
          if (!isCloudFunction()) {
            _context2.next = 9;
            break;
          }

          env = GCPEnv.CLOUD_FUNCTIONS;
          _context2.next = 22;
          break;

        case 9:
          _context2.next = 11;
          return regeneratorRuntime.awrap(isComputeEngine());

        case 11:
          if (!_context2.sent) {
            _context2.next = 21;
            break;
          }

          _context2.next = 14;
          return regeneratorRuntime.awrap(isKubernetesEngine());

        case 14:
          if (!_context2.sent) {
            _context2.next = 18;
            break;
          }

          env = GCPEnv.KUBERNETES_ENGINE;
          _context2.next = 19;
          break;

        case 18:
          env = GCPEnv.COMPUTE_ENGINE;

        case 19:
          _context2.next = 22;
          break;

        case 21:
          env = GCPEnv.NONE;

        case 22:
          return _context2.abrupt("return", env);

        case 23:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function isAppEngine() {
  return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);
}

function isCloudFunction() {
  return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);
}

function isKubernetesEngine() {
  return regeneratorRuntime.async(function isKubernetesEngine$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return regeneratorRuntime.awrap(gcpMetadata.instance('attributes/cluster-name'));

        case 3:
          return _context3.abrupt("return", true);

        case 6:
          _context3.prev = 6;
          _context3.t0 = _context3["catch"](0);
          return _context3.abrupt("return", false);

        case 9:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, [[0, 6]]);
}

function isComputeEngine() {
  return regeneratorRuntime.async(function isComputeEngine$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          return _context4.abrupt("return", gcpMetadata.isAvailable());

        case 1:
        case "end":
          return _context4.stop();
      }
    }
  });
}