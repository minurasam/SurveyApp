"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createQueryTester = exports.createQueryOperation = exports.createOperationTester = exports.createEqualsOperation = exports.createDefaultQueryOperation = exports.EqualsOperation = exports.$where = exports.$type = exports.$size = exports.$regex = exports.$or = exports.$options = exports.$not = exports.$nor = exports.$nin = exports.$ne = exports.$mod = exports.$lte = exports.$lt = exports.$in = exports.$gte = exports.$gt = exports.$exists = exports.$eq = exports.$elemMatch = exports.$and = exports.$all = exports.$Size = exports["default"] = void 0;

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var typeChecker = function typeChecker(type) {
  var typeString = "[object " + type + "]";
  return function (value) {
    return getClassName(value) === typeString;
  };
};

var getClassName = function getClassName(value) {
  return Object.prototype.toString.call(value);
};

var comparable = function comparable(value) {
  if (value instanceof Date) {
    return value.getTime();
  } else if (isArray(value)) {
    return value.map(comparable);
  } else if (value && typeof value.toJSON === "function") {
    return value.toJSON();
  }

  return value;
};

var isArray = typeChecker("Array");
var isObject = typeChecker("Object");
var isFunction = typeChecker("Function");

var isVanillaObject = function isVanillaObject(value) {
  return value && (value.constructor === Object || value.constructor === Array || value.constructor.toString() === "function Object() { [native code] }" || value.constructor.toString() === "function Array() { [native code] }") && !value.toJSON;
};

var equals = function equals(a, b) {
  if (a == null && a == b) {
    return true;
  }

  if (a === b) {
    return true;
  }

  if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {
    return false;
  }

  if (isArray(a)) {
    if (a.length !== b.length) {
      return false;
    }

    for (var i = 0, length = a.length; i < length; i++) {
      if (!equals(a[i], b[i])) return false;
    }

    return true;
  } else if (isObject(a)) {
    if (Object.keys(a).length !== Object.keys(b).length) {
      return false;
    }

    for (var key in a) {
      if (!equals(a[key], b[key])) return false;
    }

    return true;
  }

  return false;
};
/**
 * Walks through each value given the context - used for nested operations. E.g:
 * { "person.address": { $eq: "blarg" }}
 */


var walkKeyPathValues = function walkKeyPathValues(item, keyPath, next, depth, key, owner) {
  var currentKey = keyPath[depth]; // if array, then try matching. Might fall through for cases like:
  // { $eq: [1, 2, 3] }, [ 1, 2, 3 ].

  if (isArray(item) && isNaN(Number(currentKey))) {
    for (var i = 0, length = item.length; i < length; i++) {
      // if FALSE is returned, then terminate walker. For operations, this simply
      // means that the search critera was met.
      if (!walkKeyPathValues(item[i], keyPath, next, depth, i, item)) {
        return false;
      }
    }
  }

  if (depth === keyPath.length || item == null) {
    return next(item, key, owner);
  }

  return walkKeyPathValues(item[currentKey], keyPath, next, depth + 1, currentKey, item);
};

var BaseOperation =
/*#__PURE__*/
function () {
  function BaseOperation(params, owneryQuery, options) {
    _classCallCheck(this, BaseOperation);

    this.params = params;
    this.owneryQuery = owneryQuery;
    this.options = options;
    this.init();
  }

  _createClass(BaseOperation, [{
    key: "init",
    value: function init() {}
  }, {
    key: "reset",
    value: function reset() {
      this.done = false;
      this.keep = false;
    }
  }]);

  return BaseOperation;
}();

var NamedBaseOperation =
/*#__PURE__*/
function (_BaseOperation) {
  _inherits(NamedBaseOperation, _BaseOperation);

  function NamedBaseOperation(params, owneryQuery, options, name) {
    var _this;

    _classCallCheck(this, NamedBaseOperation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(NamedBaseOperation).call(this, params, owneryQuery, options));
    _this.name = name;
    return _this;
  }

  return NamedBaseOperation;
}(BaseOperation);

var GroupOperation =
/*#__PURE__*/
function (_BaseOperation2) {
  _inherits(GroupOperation, _BaseOperation2);

  function GroupOperation(params, owneryQuery, options, children) {
    var _this2;

    _classCallCheck(this, GroupOperation);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(GroupOperation).call(this, params, owneryQuery, options));
    _this2.children = children;
    return _this2;
  }
  /**
   */


  _createClass(GroupOperation, [{
    key: "reset",
    value: function reset() {
      this.keep = false;
      this.done = false;

      for (var i = 0, length = this.children.length; i < length; i++) {
        this.children[i].reset();
      }
    }
    /**
     */

  }, {
    key: "childrenNext",
    value: function childrenNext(item, key, owner) {
      var done = true;
      var keep = true;

      for (var i = 0, length = this.children.length; i < length; i++) {
        var childOperation = this.children[i];
        childOperation.next(item, key, owner);

        if (!childOperation.keep) {
          keep = false;
        }

        if (childOperation.done) {
          if (!childOperation.keep) {
            break;
          }
        } else {
          done = false;
        }
      }

      this.done = done;
      this.keep = keep;
    }
  }]);

  return GroupOperation;
}(BaseOperation);

var NamedGroupOperation =
/*#__PURE__*/
function (_GroupOperation) {
  _inherits(NamedGroupOperation, _GroupOperation);

  function NamedGroupOperation(params, owneryQuery, options, children, name) {
    var _this3;

    _classCallCheck(this, NamedGroupOperation);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(NamedGroupOperation).call(this, params, owneryQuery, options, children));
    _this3.name = name;
    return _this3;
  }

  return NamedGroupOperation;
}(GroupOperation);

var QueryOperation =
/*#__PURE__*/
function (_GroupOperation2) {
  _inherits(QueryOperation, _GroupOperation2);

  function QueryOperation() {
    _classCallCheck(this, QueryOperation);

    return _possibleConstructorReturn(this, _getPrototypeOf(QueryOperation).apply(this, arguments));
  }

  _createClass(QueryOperation, [{
    key: "next",

    /**
     */
    value: function next(item, key, parent) {
      this.childrenNext(item, key, parent);
    }
  }]);

  return QueryOperation;
}(GroupOperation);

var NestedOperation =
/*#__PURE__*/
function (_GroupOperation3) {
  _inherits(NestedOperation, _GroupOperation3);

  function NestedOperation(keyPath, params, owneryQuery, options, children) {
    var _this4;

    _classCallCheck(this, NestedOperation);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(NestedOperation).call(this, params, owneryQuery, options, children));
    _this4.keyPath = keyPath;
    /**
     */

    _this4._nextNestedValue = function (value, key, owner) {
      _this4.childrenNext(value, key, owner);

      return !_this4.done;
    };

    return _this4;
  }
  /**
   */


  _createClass(NestedOperation, [{
    key: "next",
    value: function next(item, key, parent) {
      walkKeyPathValues(item, this.keyPath, this._nextNestedValue, 0, key, parent);
    }
  }]);

  return NestedOperation;
}(GroupOperation);

var createTester = function createTester(a, compare) {
  if (a instanceof Function) {
    return a;
  }

  if (a instanceof RegExp) {
    return function (b) {
      var result = typeof b === "string" && a.test(b);
      a.lastIndex = 0;
      return result;
    };
  }

  var comparableA = comparable(a);
  return function (b) {
    return compare(comparableA, comparable(b));
  };
};

var EqualsOperation =
/*#__PURE__*/
function (_BaseOperation3) {
  _inherits(EqualsOperation, _BaseOperation3);

  function EqualsOperation() {
    _classCallCheck(this, EqualsOperation);

    return _possibleConstructorReturn(this, _getPrototypeOf(EqualsOperation).apply(this, arguments));
  }

  _createClass(EqualsOperation, [{
    key: "init",
    value: function init() {
      this._test = createTester(this.params, this.options.compare);
    }
  }, {
    key: "next",
    value: function next(item, key, parent) {
      if (!Array.isArray(parent) || parent.hasOwnProperty(key)) {
        if (this._test(item, key, parent)) {
          this.done = true;
          this.keep = true;
        }
      }
    }
  }]);

  return EqualsOperation;
}(BaseOperation);

exports.EqualsOperation = EqualsOperation;

var createEqualsOperation = function createEqualsOperation(params, owneryQuery, options) {
  return new EqualsOperation(params, owneryQuery, options);
};

exports.createEqualsOperation = createEqualsOperation;

var NopeOperation =
/*#__PURE__*/
function (_BaseOperation4) {
  _inherits(NopeOperation, _BaseOperation4);

  function NopeOperation() {
    _classCallCheck(this, NopeOperation);

    return _possibleConstructorReturn(this, _getPrototypeOf(NopeOperation).apply(this, arguments));
  }

  _createClass(NopeOperation, [{
    key: "next",
    value: function next() {
      this.done = true;
      this.keep = false;
    }
  }]);

  return NopeOperation;
}(BaseOperation);

var numericalOperationCreator = function numericalOperationCreator(createNumericalOperation) {
  return function (params, owneryQuery, options, name) {
    if (params == null) {
      return new NopeOperation(params, owneryQuery, options);
    }

    return createNumericalOperation(params, owneryQuery, options, name);
  };
};

var numericalOperation = function numericalOperation(createTester) {
  return numericalOperationCreator(function (params, owneryQuery, options) {
    var typeofParams = _typeof(comparable(params));

    var test = createTester(params);
    return new EqualsOperation(function (b) {
      return _typeof(comparable(b)) === typeofParams && test(b);
    }, owneryQuery, options);
  });
};

var createNamedOperation = function createNamedOperation(name, params, parentQuery, options) {
  var operationCreator = options.operations[name];

  if (!operationCreator) {
    throw new Error("Unsupported operation: ".concat(name));
  }

  return operationCreator(params, parentQuery, options, name);
};

var containsOperation = function containsOperation(query) {
  for (var key in query) {
    if (key.charAt(0) === "$") return true;
  }

  return false;
};

var createNestedOperation = function createNestedOperation(keyPath, nestedQuery, owneryQuery, options) {
  if (containsOperation(nestedQuery)) {
    var _createQueryOperation = createQueryOperations(nestedQuery, options),
        _createQueryOperation2 = _slicedToArray(_createQueryOperation, 2),
        selfOperations = _createQueryOperation2[0],
        nestedOperations = _createQueryOperation2[1];

    if (nestedOperations.length) {
      throw new Error("Property queries must contain only operations, or exact objects.");
    }

    return new NestedOperation(keyPath, nestedQuery, owneryQuery, options, selfOperations);
  }

  return new NestedOperation(keyPath, nestedQuery, owneryQuery, options, [new EqualsOperation(nestedQuery, owneryQuery, options)]);
};

var createQueryOperation = function createQueryOperation(query) {
  var owneryQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      compare = _ref.compare,
      operations = _ref.operations;

  var options = {
    compare: compare || equals,
    operations: Object.assign({}, operations || {})
  };

  var _createQueryOperation3 = createQueryOperations(query, options),
      _createQueryOperation4 = _slicedToArray(_createQueryOperation3, 2),
      selfOperations = _createQueryOperation4[0],
      nestedOperations = _createQueryOperation4[1];

  var ops = [];

  if (selfOperations.length) {
    ops.push(new NestedOperation([], query, owneryQuery, options, selfOperations));
  }

  ops.push.apply(ops, _toConsumableArray(nestedOperations));

  if (ops.length === 1) {
    return ops[0];
  }

  return new QueryOperation(query, owneryQuery, options, ops);
};

exports.createQueryOperation = createQueryOperation;

var createQueryOperations = function createQueryOperations(query, options) {
  var selfOperations = [];
  var nestedOperations = [];

  if (!isVanillaObject(query)) {
    selfOperations.push(new EqualsOperation(query, query, options));
    return [selfOperations, nestedOperations];
  }

  for (var key in query) {
    if (key.charAt(0) === "$") {
      var op = createNamedOperation(key, query[key], query, options); // probably just a flag for another operation (like $options)

      if (op != null) {
        selfOperations.push(op);
      }
    } else {
      nestedOperations.push(createNestedOperation(key.split("."), query[key], query, options));
    }
  }

  return [selfOperations, nestedOperations];
};

var createOperationTester = function createOperationTester(operation) {
  return function (item, key, owner) {
    operation.reset();
    operation.next(item, key, owner);
    return operation.keep;
  };
};

exports.createOperationTester = createOperationTester;

var createQueryTester = function createQueryTester(query) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return createOperationTester(createQueryOperation(query, null, options));
};

exports.createQueryTester = createQueryTester;

var $Ne =
/*#__PURE__*/
function (_NamedBaseOperation) {
  _inherits($Ne, _NamedBaseOperation);

  function $Ne() {
    _classCallCheck(this, $Ne);

    return _possibleConstructorReturn(this, _getPrototypeOf($Ne).apply(this, arguments));
  }

  _createClass($Ne, [{
    key: "init",
    value: function init() {
      this._test = createTester(this.params, this.options.compare);
    }
  }, {
    key: "reset",
    value: function reset() {
      _get(_getPrototypeOf($Ne.prototype), "reset", this).call(this);

      this.keep = true;
    }
  }, {
    key: "next",
    value: function next(item) {
      if (this._test(item)) {
        this.done = true;
        this.keep = false;
      }
    }
  }]);

  return $Ne;
}(NamedBaseOperation); // https://docs.mongodb.com/manual/reference/operator/query/elemMatch/


var $ElemMatch =
/*#__PURE__*/
function (_NamedBaseOperation2) {
  _inherits($ElemMatch, _NamedBaseOperation2);

  function $ElemMatch() {
    _classCallCheck(this, $ElemMatch);

    return _possibleConstructorReturn(this, _getPrototypeOf($ElemMatch).apply(this, arguments));
  }

  _createClass($ElemMatch, [{
    key: "init",
    value: function init() {
      this._queryOperation = createQueryOperation(this.params, this.owneryQuery, this.options);
    }
  }, {
    key: "reset",
    value: function reset() {
      _get(_getPrototypeOf($ElemMatch.prototype), "reset", this).call(this);

      this._queryOperation.reset();
    }
  }, {
    key: "next",
    value: function next(item) {
      if (isArray(item)) {
        for (var i = 0, length = item.length; i < length; i++) {
          // reset query operation since item being tested needs to pass _all_ query
          // operations for it to be a success
          this._queryOperation.reset(); // check item


          this._queryOperation.next(item[i], i, item);

          this.keep = this.keep || this._queryOperation.keep;
        }

        this.done = true;
      } else {
        this.done = false;
        this.keep = false;
      }
    }
  }]);

  return $ElemMatch;
}(NamedBaseOperation);

var $Not =
/*#__PURE__*/
function (_NamedBaseOperation3) {
  _inherits($Not, _NamedBaseOperation3);

  function $Not() {
    _classCallCheck(this, $Not);

    return _possibleConstructorReturn(this, _getPrototypeOf($Not).apply(this, arguments));
  }

  _createClass($Not, [{
    key: "init",
    value: function init() {
      this._queryOperation = createQueryOperation(this.params, this.owneryQuery, this.options);
    }
  }, {
    key: "reset",
    value: function reset() {
      this._queryOperation.reset();
    }
  }, {
    key: "next",
    value: function next(item, key, owner) {
      this._queryOperation.next(item, key, owner);

      this.done = this._queryOperation.done;
      this.keep = !this._queryOperation.keep;
    }
  }]);

  return $Not;
}(NamedBaseOperation);

var $Size =
/*#__PURE__*/
function (_NamedBaseOperation4) {
  _inherits($Size, _NamedBaseOperation4);

  function $Size() {
    _classCallCheck(this, $Size);

    return _possibleConstructorReturn(this, _getPrototypeOf($Size).apply(this, arguments));
  }

  _createClass($Size, [{
    key: "init",
    value: function init() {}
  }, {
    key: "next",
    value: function next(item) {
      if (isArray(item) && item.length === this.params) {
        this.done = true;
        this.keep = true;
      } // if (parent && parent.length === this.params) {
      //   this.done = true;
      //   this.keep = true;
      // }

    }
  }]);

  return $Size;
}(NamedBaseOperation);

exports.$Size = $Size;

var $Or =
/*#__PURE__*/
function (_NamedBaseOperation5) {
  _inherits($Or, _NamedBaseOperation5);

  function $Or() {
    _classCallCheck(this, $Or);

    return _possibleConstructorReturn(this, _getPrototypeOf($Or).apply(this, arguments));
  }

  _createClass($Or, [{
    key: "init",
    value: function init() {
      var _this5 = this;

      this._ops = this.params.map(function (op) {
        return createQueryOperation(op, null, _this5.options);
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      this.done = false;
      this.keep = false;

      for (var i = 0, length = this._ops.length; i < length; i++) {
        this._ops[i].reset();
      }
    }
  }, {
    key: "next",
    value: function next(item, key, owner) {
      var done = false;
      var success = false;

      for (var i = 0, length = this._ops.length; i < length; i++) {
        var op = this._ops[i];
        op.next(item, key, owner);

        if (op.keep) {
          done = true;
          success = op.keep;
          break;
        }
      }

      this.keep = success;
      this.done = done;
    }
  }]);

  return $Or;
}(NamedBaseOperation);

var $Nor =
/*#__PURE__*/
function (_$Or) {
  _inherits($Nor, _$Or);

  function $Nor() {
    _classCallCheck(this, $Nor);

    return _possibleConstructorReturn(this, _getPrototypeOf($Nor).apply(this, arguments));
  }

  _createClass($Nor, [{
    key: "next",
    value: function next(item, key, owner) {
      _get(_getPrototypeOf($Nor.prototype), "next", this).call(this, item, key, owner);

      this.keep = !this.keep;
    }
  }]);

  return $Nor;
}($Or);

var $In =
/*#__PURE__*/
function (_NamedBaseOperation6) {
  _inherits($In, _NamedBaseOperation6);

  function $In() {
    _classCallCheck(this, $In);

    return _possibleConstructorReturn(this, _getPrototypeOf($In).apply(this, arguments));
  }

  _createClass($In, [{
    key: "init",
    value: function init() {
      var _this6 = this;

      this._testers = this.params.map(function (value) {
        if (containsOperation(value)) {
          throw new Error("cannot nest $ under ".concat(_this6.constructor.name.toLowerCase()));
        }

        return createTester(value, _this6.options.compare);
      });
    }
  }, {
    key: "next",
    value: function next(item, key, owner) {
      var done = false;
      var success = false;

      for (var i = 0, length = this._testers.length; i < length; i++) {
        var test = this._testers[i];

        if (test(item)) {
          done = true;
          success = true;
          break;
        }
      }

      this.keep = success;
      this.done = done;
    }
  }]);

  return $In;
}(NamedBaseOperation);

var $Nin =
/*#__PURE__*/
function (_$In) {
  _inherits($Nin, _$In);

  function $Nin() {
    _classCallCheck(this, $Nin);

    return _possibleConstructorReturn(this, _getPrototypeOf($Nin).apply(this, arguments));
  }

  _createClass($Nin, [{
    key: "next",
    value: function next(item, key, owner) {
      _get(_getPrototypeOf($Nin.prototype), "next", this).call(this, item, key, owner);

      this.keep = !this.keep;
    }
  }]);

  return $Nin;
}($In);

var $Exists =
/*#__PURE__*/
function (_NamedBaseOperation7) {
  _inherits($Exists, _NamedBaseOperation7);

  function $Exists() {
    _classCallCheck(this, $Exists);

    return _possibleConstructorReturn(this, _getPrototypeOf($Exists).apply(this, arguments));
  }

  _createClass($Exists, [{
    key: "next",
    value: function next(item, key, owner) {
      if (owner.hasOwnProperty(key) === this.params) {
        this.done = true;
        this.keep = true;
      }
    }
  }]);

  return $Exists;
}(NamedBaseOperation);

var $And =
/*#__PURE__*/
function (_NamedGroupOperation) {
  _inherits($And, _NamedGroupOperation);

  function $And(params, owneryQuery, options, name) {
    _classCallCheck(this, $And);

    return _possibleConstructorReturn(this, _getPrototypeOf($And).call(this, params, owneryQuery, options, params.map(function (query) {
      return createQueryOperation(query, owneryQuery, options);
    }), name));
  }

  _createClass($And, [{
    key: "next",
    value: function next(item, key, owner) {
      this.childrenNext(item, key, owner);
    }
  }]);

  return $And;
}(NamedGroupOperation);

var $eq = function $eq(params, owneryQuery, options) {
  return new EqualsOperation(params, owneryQuery, options);
};

exports.$eq = $eq;

var $ne = function $ne(params, owneryQuery, options, name) {
  return new $Ne(params, owneryQuery, options, name);
};

exports.$ne = $ne;

var $or = function $or(params, owneryQuery, options, name) {
  return new $Or(params, owneryQuery, options, name);
};

exports.$or = $or;

var $nor = function $nor(params, owneryQuery, options, name) {
  return new $Nor(params, owneryQuery, options, name);
};

exports.$nor = $nor;

var $elemMatch = function $elemMatch(params, owneryQuery, options, name) {
  return new $ElemMatch(params, owneryQuery, options, name);
};

exports.$elemMatch = $elemMatch;

var $nin = function $nin(params, owneryQuery, options, name) {
  return new $Nin(params, owneryQuery, options, name);
};

exports.$nin = $nin;

var $in = function $in(params, owneryQuery, options, name) {
  return new $In(params, owneryQuery, options, name);
};

exports.$in = $in;
var $lt = numericalOperation(function (params) {
  return function (b) {
    return b < params;
  };
});
exports.$lt = $lt;
var $lte = numericalOperation(function (params) {
  return function (b) {
    return b <= params;
  };
});
exports.$lte = $lte;
var $gt = numericalOperation(function (params) {
  return function (b) {
    return b > params;
  };
});
exports.$gt = $gt;
var $gte = numericalOperation(function (params) {
  return function (b) {
    return b >= params;
  };
});
exports.$gte = $gte;

var $mod = function $mod(_ref2, owneryQuery, options) {
  var _ref3 = _slicedToArray(_ref2, 2),
      mod = _ref3[0],
      equalsValue = _ref3[1];

  return new EqualsOperation(function (b) {
    return comparable(b) % mod === equalsValue;
  }, owneryQuery, options);
};

exports.$mod = $mod;

var $exists = function $exists(params, owneryQuery, options, name) {
  return new $Exists(params, owneryQuery, options, name);
};

exports.$exists = $exists;

var $regex = function $regex(pattern, owneryQuery, options) {
  return new EqualsOperation(new RegExp(pattern, owneryQuery.$options), owneryQuery, options);
};

exports.$regex = $regex;

var $not = function $not(params, owneryQuery, options, name) {
  return new $Not(params, owneryQuery, options, name);
};

exports.$not = $not;
var typeAliases = {
  number: function number(v) {
    return typeof v === "number";
  },
  string: function string(v) {
    return typeof v === "string";
  },
  bool: function bool(v) {
    return typeof v === "boolean";
  },
  array: function array(v) {
    return Array.isArray(v);
  },
  "null": function _null(v) {
    return v === null;
  },
  timestamp: function timestamp(v) {
    return v instanceof Date;
  }
};

var $type = function $type(clazz, owneryQuery, options) {
  return new EqualsOperation(function (b) {
    if (typeof clazz === "string") {
      if (!typeAliases[clazz]) {
        throw new Error("Type alias does not exist");
      }

      return typeAliases[clazz](b);
    }

    return b != null ? b instanceof clazz || b.constructor === clazz : false;
  }, owneryQuery, options);
};

exports.$type = $type;

var $and = function $and(params, ownerQuery, options, name) {
  return new $And(params, ownerQuery, options, name);
};

exports.$and = $and;
var $all = $and;
exports.$all = $all;

var $size = function $size(params, ownerQuery, options) {
  return new $Size(params, ownerQuery, options, "$size");
};

exports.$size = $size;

var $options = function $options() {
  return null;
};

exports.$options = $options;

var $where = function $where(params, ownerQuery, options) {
  var test;

  if (isFunction(params)) {
    test = params;
  } else if (!process.env.CSP_ENABLED) {
    test = new Function("obj", "return " + params);
  } else {
    throw new Error("In CSP mode, sift does not support strings in \"$where\" condition");
  }

  return new EqualsOperation(function (b) {
    return test.bind(b)(b);
  }, ownerQuery, options);
};

exports.$where = $where;
var defaultOperations =
/*#__PURE__*/
Object.freeze({
  __proto__: null,
  $Size: $Size,
  $eq: $eq,
  $ne: $ne,
  $or: $or,
  $nor: $nor,
  $elemMatch: $elemMatch,
  $nin: $nin,
  $in: $in,
  $lt: $lt,
  $lte: $lte,
  $gt: $gt,
  $gte: $gte,
  $mod: $mod,
  $exists: $exists,
  $regex: $regex,
  $not: $not,
  $type: $type,
  $and: $and,
  $all: $all,
  $size: $size,
  $options: $options,
  $where: $where
});

var createDefaultQueryOperation = function createDefaultQueryOperation(query, ownerQuery) {
  var _ref4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      compare = _ref4.compare,
      operations = _ref4.operations;

  return createQueryOperation(query, ownerQuery, {
    compare: compare,
    operations: Object.assign({}, defaultOperations, operations || {})
  });
};

exports.createDefaultQueryOperation = createDefaultQueryOperation;

var createDefaultQueryTester = function createDefaultQueryTester(query) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var op = createDefaultQueryOperation(query, null, options);
  return createOperationTester(op);
};

var _default = createDefaultQueryTester;
exports["default"] = _default;