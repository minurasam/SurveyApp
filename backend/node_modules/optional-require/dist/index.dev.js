"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var assert = require("assert");

function findModuleNotFound(err, name) {
  // Check the first line of the error message
  var msg = err.message.split("\n")[0];
  return msg && ( // Check for "Cannot find module 'foo'"
  msg.includes("'".concat(name, "'")) // Check for "Your application tried to access foo (a peer dependency) ..." (Yarn v2 PnP)
  // https://github.com/yarnpkg/berry/blob/e81dc0d29bb2f41818d9c5c1c74bab1406fb979b/packages/yarnpkg-pnp/sources/loader/makeApi.ts#L680
  || msg.includes(" ".concat(name, " ")) // Check for "Your application tried to access foo. While ..." (Yarn v2 PnP)
  // https://github.com/yarnpkg/berry/blob/e81dc0d29bb2f41818d9c5c1c74bab1406fb979b/packages/yarnpkg-pnp/sources/loader/makeApi.ts#L704
  || msg.includes(" ".concat(name, ". ")) // Check for "Your application tried to access foo, but ..." (Yarn v2 PnP)
  // https://github.com/yarnpkg/berry/blob/e81dc0d29bb2f41818d9c5c1c74bab1406fb979b/packages/yarnpkg-pnp/sources/loader/makeApi.ts#L718
  || msg.includes(" ".concat(name, ", ")));
}

function _optionalRequire(callerRequire, resolve, path, message) {
  var opts;

  if (_typeof(message) === "object") {
    opts = message;
    assert(!(opts.hasOwnProperty("notFound") && opts.hasOwnProperty("default")), "optionalRequire: options set with both `notFound` and `default`");
  } else {
    opts = {
      message: message
    };
  }

  try {
    return resolve ? callerRequire.resolve(path) : callerRequire(path);
  } catch (e) {
    if (e.code !== "MODULE_NOT_FOUND" || !findModuleNotFound(e, path)) {
      // if the module we are requiring fail because it try to require a
      // module that's not found, then we have to report this as failed.
      if (typeof opts.fail === "function") {
        return opts.fail(e);
      }

      throw e;
    }

    if (opts.message) {
      var _message = typeof opts.message === "string" ? "".concat(opts.message, " - ") : "";

      var r = resolve ? "resolved" : "found";
      optionalRequire.log("".concat(_message, "optional module not ").concat(r), path);
    }

    if (typeof opts.notFound === "function") {
      return opts.notFound(e);
    }

    return opts["default"];
  }
}

var tryRequire = function tryRequire(callerRequire, path, message) {
  return _optionalRequire(callerRequire, false, path, message);
};

var tryResolve = function tryResolve(callerRequire, path, message) {
  return _optionalRequire(callerRequire, true, path, message);
};

function optionalRequire(callerRequire) {
  var x = function x(path, message) {
    return tryRequire(callerRequire, path, message);
  };

  x.resolve = function (path, message) {
    return tryResolve(callerRequire, path, message);
  };

  return x;
}

optionalRequire["try"] = tryRequire;
optionalRequire.tryResolve = tryResolve;
optionalRequire.resolve = tryResolve;

optionalRequire.log = function (message, path) {
  return console.log("Just FYI: ".concat(message, "; Path \"").concat(path, "\""));
};

module.exports = optionalRequire;