'use strict';

var co = require('co');

var expect = require('expect.js');

var describe = require('mocha').describe;

var it = require('mocha').it;

var Pool = require('../');

var wait = function wait(time) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, time);
  });
};

describe('idle timeout', function () {
  it('should timeout and remove the client', function (done) {
    var pool = new Pool({
      idleTimeoutMillis: 10
    });
    pool.query('SELECT NOW()');
    pool.on('remove', function () {
      expect(pool.idleCount).to.equal(0);
      expect(pool.totalCount).to.equal(0);
      done();
    });
  });
  it('times out and removes clients when others are also removed', co.wrap(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var pool, clientA, clientB, removal, timeout;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            pool = new Pool({
              idleTimeoutMillis: 10
            });
            _context.next = 3;
            return pool.connect();

          case 3:
            clientA = _context.sent;
            _context.next = 6;
            return pool.connect();

          case 6:
            clientB = _context.sent;
            clientA.release();
            clientB.release(new Error());
            removal = new Promise(function (resolve) {
              pool.on('remove', function () {
                expect(pool.idleCount).to.equal(0);
                expect(pool.totalCount).to.equal(0);
                resolve();
              });
            });
            timeout = wait(100).then(function () {
              return Promise.reject(new Error('Idle timeout failed to occur'));
            });
            _context.prev = 11;
            _context.next = 14;
            return Promise.race([removal, timeout]);

          case 14:
            _context.prev = 14;
            pool.end();
            return _context.finish(14);

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[11,, 14, 17]]);
  })));
  it('can remove idle clients and recreate them', co.wrap(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2() {
    var pool, results, i, query;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            pool = new Pool({
              idleTimeoutMillis: 1
            });
            results = [];
            i = 0;

          case 3:
            if (!(i < 20)) {
              _context2.next = 19;
              break;
            }

            query = pool.query('SELECT NOW()');
            expect(pool.idleCount).to.equal(0);
            expect(pool.totalCount).to.equal(1);
            _context2.t0 = results;
            _context2.next = 10;
            return query;

          case 10:
            _context2.t1 = _context2.sent;

            _context2.t0.push.call(_context2.t0, _context2.t1);

            _context2.next = 14;
            return wait(2);

          case 14:
            expect(pool.idleCount).to.equal(0);
            expect(pool.totalCount).to.equal(0);

          case 16:
            i++;
            _context2.next = 3;
            break;

          case 19:
            expect(results).to.have.length(20);

          case 20:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('does not time out clients which are used', co.wrap(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3() {
    var pool, results, i, client;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            pool = new Pool({
              idleTimeoutMillis: 1
            });
            results = [];
            i = 0;

          case 3:
            if (!(i < 20)) {
              _context3.next = 22;
              break;
            }

            _context3.next = 6;
            return pool.connect();

          case 6:
            client = _context3.sent;
            expect(pool.totalCount).to.equal(1);
            expect(pool.idleCount).to.equal(0);
            _context3.next = 11;
            return wait(10);

          case 11:
            _context3.t0 = results;
            _context3.next = 14;
            return client.query('SELECT NOW()');

          case 14:
            _context3.t1 = _context3.sent;

            _context3.t0.push.call(_context3.t0, _context3.t1);

            client.release();
            expect(pool.idleCount).to.equal(1);
            expect(pool.totalCount).to.equal(1);

          case 19:
            i++;
            _context3.next = 3;
            break;

          case 22:
            expect(results).to.have.length(20);
            return _context3.abrupt("return", pool.end());

          case 24:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
});