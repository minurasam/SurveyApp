'use strict';

var co = require('co');

var expect = require('expect.js');

var describe = require('mocha').describe;

var it = require('mocha').it;

var BluebirdPromise = require('bluebird');

var Pool = require('../');

var checkType = function checkType(promise) {
  expect(promise).to.be.a(BluebirdPromise);
  return promise["catch"](function (e) {
    return undefined;
  });
};

describe('Bring your own promise', function () {
  it('uses supplied promise for operations', co.wrap(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var pool, client1, client2;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            pool = new Pool({
              Promise: BluebirdPromise
            });
            _context.next = 3;
            return checkType(pool.connect());

          case 3:
            client1 = _context.sent;
            client1.release();
            _context.next = 7;
            return checkType(pool.query('SELECT NOW()'));

          case 7:
            _context.next = 9;
            return checkType(pool.connect());

          case 9:
            client2 = _context.sent;
            // TODO - make sure pg supports BYOP as well
            client2.release();
            _context.next = 13;
            return checkType(pool.end());

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('uses promises in errors', co.wrap(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2() {
    var pool;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            pool = new Pool({
              Promise: BluebirdPromise,
              port: 48484
            });
            _context2.next = 3;
            return checkType(pool.connect());

          case 3:
            _context2.next = 5;
            return checkType(pool.end());

          case 5:
            _context2.next = 7;
            return checkType(pool.connect());

          case 7:
            _context2.next = 9;
            return checkType(pool.query());

          case 9:
            _context2.next = 11;
            return checkType(pool.end());

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
});