'use strict';

var co = require('co');

var expect = require('expect.js');

var describe = require('mocha').describe;

var it = require('mocha').it;

var Pool = require('../');

describe('pool ending', function () {
  it('ends without being used', function (done) {
    var pool = new Pool();
    pool.end(done);
  });
  it('ends with a promise', function () {
    return new Pool().end();
  });
  it('ends with clients', co.wrap(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var pool, res;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            pool = new Pool();
            _context.next = 3;
            return pool.query('SELECT $1::text as name', ['brianc']);

          case 3:
            res = _context.sent;
            expect(res.rows[0].name).to.equal('brianc');
            return _context.abrupt("return", pool.end());

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('allows client to finish', co.wrap(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2() {
    var pool, query, res;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            pool = new Pool();
            query = pool.query('SELECT $1::text as name', ['brianc']);
            _context2.next = 4;
            return pool.end();

          case 4:
            _context2.next = 6;
            return query;

          case 6:
            res = _context2.sent;
            expect(res.rows[0].name).to.equal('brianc');

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
});