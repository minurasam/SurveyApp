"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertOptions = void 0;

function assertOptions(options, defaults) {
  if (options !== null && options !== undefined && _typeof(options) !== 'object') {
    throw new TypeError('Invalid "options" parameter: ' + JSON.stringify(options));
  }

  var isArray = Array.isArray(defaults);

  if (!isArray && (!defaults || _typeof(defaults) !== 'object')) {
    throw new TypeError('Invalid "defaults" parameter: ' + JSON.stringify(defaults));
  }

  if (options) {
    for (var _i = 0, _a = Object.keys(options); _i < _a.length; _i++) {
      var a = _a[_i];

      if (isArray && defaults.indexOf(a) === -1 || !isArray && !(a in defaults)) {
        throw new Error('Option "' + a + '" is not recognized.');
      }
    }
  } else {
    options = {};
  }

  if (!isArray) {
    var defs = defaults;

    for (var _b = 0, _c = Object.keys(defs); _b < _c.length; _b++) {
      var d = _c[_b];

      if (options[d] === undefined && defs[d] !== undefined) {
        options[d] = defs[d];
      }
    }
  }

  return options;
}

exports.assertOptions = assertOptions;