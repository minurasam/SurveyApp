"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('os'),
    EOL = _require.EOL;

var _require2 = require('./utils'),
    addInspection = _require2.addInspection,
    messageGap = _require2.messageGap;

var parsingErrorCode = {
  unclosedMLC: 0,
  // Unclosed multi-line comment.
  unclosedText: 1,
  // Unclosed text block.
  unclosedQI: 2,
  // Unclosed quoted identifier.
  multiLineQI: 3 // Multi-line quoted identifiers are not supported.

};
Object.freeze(parsingErrorCode);
var errorMessages = [{
  name: 'unclosedMLC',
  message: 'Unclosed multi-line comment.'
}, {
  name: 'unclosedText',
  message: 'Unclosed text block.'
}, {
  name: 'unclosedQI',
  message: 'Unclosed quoted identifier.'
}, {
  name: 'multiLineQI',
  message: 'Multi-line quoted identifiers are not supported.'
}];

var SQLParsingError =
/*#__PURE__*/
function (_Error) {
  _inherits(SQLParsingError, _Error);

  function SQLParsingError(code, position) {
    var _this;

    _classCallCheck(this, SQLParsingError);

    var err = errorMessages[code].message;
    var message = "Error parsing SQL at {line:".concat(position.line, ",col:").concat(position.column, "}: ").concat(err);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(SQLParsingError).call(this, message));
    _this.name = _this.constructor.name;
    _this.error = err;
    _this.code = code;
    _this.position = position;
    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    return _this;
  }

  return SQLParsingError;
}(_wrapNativeSuper(Error));

SQLParsingError.prototype.toString = function (level) {
  level = level > 0 ? parseInt(level) : 0;
  var gap = messageGap(level + 1);
  var lines = ["SQLParsingError {", "".concat(gap, "code: parsingErrorCode.").concat(errorMessages[this.code].name), "".concat(gap, "error: \"").concat(this.error, "\""), "".concat(gap, "position: {line: ").concat(this.position.line, ", col: ").concat(this.position.column, "}"), "".concat(messageGap(level), "}")];
  return lines.join(EOL);
};

addInspection(SQLParsingError.prototype, function () {
  return this.toString();
});
module.exports = {
  SQLParsingError: SQLParsingError,
  parsingErrorCode: parsingErrorCode
};