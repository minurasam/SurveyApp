'use strict';
/*!
 * Behaves like `Schema#path()`, except for it also digs into arrays without
 * needing to put `.0.`, so `getPath(schema, 'docArr.elProp')` works.
 */

module.exports = function getPath(schema, path) {
  var schematype = schema.path(path);

  if (schematype != null) {
    return schematype;
  }

  var pieces = path.split('.');
  var cur = '';
  var isArray = false;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = pieces[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var piece = _step.value;

      if (/^\d+$/.test(piece) && isArray) {
        continue;
      }

      cur = cur.length === 0 ? piece : cur + '.' + piece;
      schematype = schema.path(cur);

      if (schematype != null && schematype.schema) {
        schema = schematype.schema;
        cur = '';

        if (schematype.$isMongooseDocumentArray) {
          isArray = true;
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return schematype;
};