'use strict';
/*!
 * ignore
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MongooseMap = require('../types/map');

var SchemaMapOptions = require('../options/SchemaMapOptions');

var SchemaType = require('../schematype');
/*!
 * ignore
 */


var Map =
/*#__PURE__*/
function (_SchemaType) {
  _inherits(Map, _SchemaType);

  function Map(key, options) {
    var _this;

    _classCallCheck(this, Map);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Map).call(this, key, options, 'Map'));
    _this.$isSchemaMap = true;
    return _this;
  }

  _createClass(Map, [{
    key: "set",
    value: function set(option, value) {
      return SchemaType.set(option, value);
    }
  }, {
    key: "cast",
    value: function cast(val, doc, init) {
      if (val instanceof MongooseMap) {
        return val;
      }

      var path = this.path;

      if (init) {
        var map = new MongooseMap({}, path, doc, this.$__schemaType);

        if (val instanceof global.Map) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = val.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var key = _step.value;

              var _val = val.get(key);

              if (_val == null) {
                _val = map.$__schemaType._castNullish(_val);
              } else {
                _val = map.$__schemaType.cast(_val, doc, true, null, {
                  path: path + '.' + key
                });
              }

              map.$init(key, _val);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        } else {
          for (var _i = 0, _Object$keys = Object.keys(val); _i < _Object$keys.length; _i++) {
            var _key = _Object$keys[_i];
            var _val2 = val[_key];

            if (_val2 == null) {
              _val2 = map.$__schemaType._castNullish(_val2);
            } else {
              _val2 = map.$__schemaType.cast(_val2, doc, true, null, {
                path: path + '.' + _key
              });
            }

            map.$init(_key, _val2);
          }
        }

        return map;
      }

      return new MongooseMap(val, path, doc, this.$__schemaType);
    }
  }, {
    key: "clone",
    value: function clone() {
      var schematype = _get(_getPrototypeOf(Map.prototype), "clone", this).call(this);

      if (this.$__schemaType != null) {
        schematype.$__schemaType = this.$__schemaType.clone();
      }

      return schematype;
    }
  }]);

  return Map;
}(SchemaType);

Map.prototype.OptionsConstructor = SchemaMapOptions;
Map.defaultOptions = {};
module.exports = Map;