'use strict';
/*!
 * Module dependencies.
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var EventEmitter = require('events').EventEmitter;
/*!
 * ignore
 */


var ChangeStream =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(ChangeStream, _EventEmitter);

  function ChangeStream(changeStreamThunk, pipeline, options) {
    var _this;

    _classCallCheck(this, ChangeStream);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChangeStream).call(this));
    _this.driverChangeStream = null;
    _this.closed = false;
    _this.pipeline = pipeline;
    _this.options = options; // This wrapper is necessary because of buffering.

    changeStreamThunk(function (err, driverChangeStream) {
      if (err != null) {
        _this.emit('error', err);

        return;
      }

      _this.driverChangeStream = driverChangeStream;

      _this._bindEvents();

      _this.emit('ready');
    });
    return _this;
  }

  _createClass(ChangeStream, [{
    key: "_bindEvents",
    value: function _bindEvents() {
      var _this2 = this;

      this.driverChangeStream.on('close', function () {
        _this2.closed = true;
      });
      ['close', 'change', 'end', 'error'].forEach(function (ev) {
        _this2.driverChangeStream.on(ev, function (data) {
          return _this2.emit(ev, data);
        });
      });
    }
  }, {
    key: "_queue",
    value: function _queue(cb) {
      this.once('ready', function () {
        return cb();
      });
    }
  }, {
    key: "close",
    value: function close() {
      this.closed = true;

      if (this.driverChangeStream) {
        this.driverChangeStream.close();
      }
    }
  }]);

  return ChangeStream;
}(EventEmitter);
/*!
 * ignore
 */


module.exports = ChangeStream;