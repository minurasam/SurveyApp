'use strict';

var co = require('co');

co(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee() {
  var Sharded, topology;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          Sharded = require('mongodb-topology-manager').Sharded; // Create new instance

          topology = new Sharded({
            mongod: 'mongod',
            mongos: 'mongos'
          });
          _context.next = 4;
          return topology.addShard([{
            options: {
              bind_ip: 'localhost',
              port: 31000,
              dbpath: "/data/db/31000",
              shardsvr: null
            }
          }], {
            replSet: 'rs1'
          });

        case 4:
          _context.next = 6;
          return topology.addConfigurationServers([{
            options: {
              bind_ip: 'localhost',
              port: 35000,
              dbpath: "/data/db/35000"
            }
          }], {
            replSet: 'rs0'
          });

        case 6:
          _context.next = 8;
          return topology.addProxies([{
            bind_ip: 'localhost',
            port: 51000,
            configdb: 'localhost:35000'
          }], {
            binary: 'mongos'
          });

        case 8:
          console.log('Start...'); // Start up topology

          _context.next = 11;
          return topology.start();

        case 11:
          console.log('Started'); // Shard db

          _context.next = 14;
          return topology.enableSharding('test');

        case 14:
          console.log('done');

        case 15:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}))["catch"](function (error) {
  console.error(error);
  process.exit(-1);
});