'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Client = require('./client');

var defaults = require('./defaults');

var Connection = require('./connection');

var Pool = require('pg-pool');

var _require = require('pg-protocol'),
    DatabaseError = _require.DatabaseError;

var poolFactory = function poolFactory(Client) {
  return (
    /*#__PURE__*/
    function (_Pool) {
      _inherits(BoundPool, _Pool);

      function BoundPool(options) {
        _classCallCheck(this, BoundPool);

        return _possibleConstructorReturn(this, _getPrototypeOf(BoundPool).call(this, options, Client));
      }

      return BoundPool;
    }(Pool)
  );
};

var PG = function PG(clientConstructor) {
  this.defaults = defaults;
  this.Client = clientConstructor;
  this.Query = this.Client.Query;
  this.Pool = poolFactory(this.Client);
  this._pools = [];
  this.Connection = Connection;
  this.types = require('pg-types');
  this.DatabaseError = DatabaseError;
};

if (typeof process.env.NODE_PG_FORCE_NATIVE !== 'undefined') {
  module.exports = new PG(require('./native'));
} else {
  module.exports = new PG(Client); // lazy require native module...the native module may not have installed

  Object.defineProperty(module.exports, 'native', {
    configurable: true,
    enumerable: false,
    get: function get() {
      var _native = null;

      try {
        _native = new PG(require('./native'));
      } catch (err) {
        if (err.code !== 'MODULE_NOT_FOUND') {
          throw err;
        }
      } // overwrite module.exports.native so that getter is never called again


      Object.defineProperty(module.exports, 'native', {
        value: _native
      });
      return _native;
    }
  });
}