"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Endpoint = void 0;

var apirequest_1 = require("./apirequest");

var Endpoint =
/*#__PURE__*/
function () {
  function Endpoint(options) {
    _classCallCheck(this, Endpoint);

    this._options = options || {};
  }
  /**
   * Given a schema, add methods and resources to a target.
   *
   * @param {object} target The target to which to apply the schema.
   * @param {object} rootSchema The top-level schema, so we don't lose track of it
   * during recursion.
   * @param {object} schema The current schema from which to extract methods and
   * resources.
   * @param {object} context The context to add to each method.
   */


  _createClass(Endpoint, [{
    key: "applySchema",
    value: function applySchema(target, rootSchema, schema, context) {
      this.applyMethodsFromSchema(target, rootSchema, schema, context);

      if (schema.resources) {
        for (var resourceName in schema.resources) {
          if (Object.prototype.hasOwnProperty.call(schema.resources, resourceName)) {
            var resource = schema.resources[resourceName];

            if (!target[resourceName]) {
              target[resourceName] = {};
            }

            this.applySchema(target[resourceName], rootSchema, resource, context);
          }
        }
      }
    }
    /**
     * Given a schema, add methods to a target.
     *
     * @param {object} target The target to which to apply the methods.
     * @param {object} rootSchema The top-level schema, so we don't lose track of it
     * during recursion.
     * @param {object} schema The current schema from which to extract methods.
     * @param {object} context The context to add to each method.
     */

  }, {
    key: "applyMethodsFromSchema",
    value: function applyMethodsFromSchema(target, rootSchema, schema, context) {
      if (schema.methods) {
        for (var name in schema.methods) {
          if (Object.prototype.hasOwnProperty.call(schema.methods, name)) {
            var method = schema.methods[name];
            target[name] = this.makeMethod(rootSchema, method, context);
          }
        }
      }
    }
    /**
     * Given a method schema, add a method to a target.
     *
     * @param target The target to which to add the method.
     * @param schema The top-level schema that contains the rootUrl, etc.
     * @param method The method schema from which to generate the method.
     * @param context The context to add to the method.
     */

  }, {
    key: "makeMethod",
    value: function makeMethod(schema, method, context) {
      var _this = this;

      return function (paramsOrCallback, callback) {
        var params = typeof paramsOrCallback === 'function' ? {} : paramsOrCallback;
        callback = typeof paramsOrCallback === 'function' ? paramsOrCallback : callback;
        var schemaUrl = buildurl(schema.rootUrl + schema.servicePath + method.path);
        var parameters = {
          options: {
            url: schemaUrl.substring(1, schemaUrl.length - 1),
            method: method.httpMethod
          },
          params: params,
          requiredParams: method.parameterOrder || [],
          pathParams: _this.getPathParams(method.parameters),
          context: context
        };

        if (method.mediaUpload && method.mediaUpload.protocols && method.mediaUpload.protocols.simple && method.mediaUpload.protocols.simple.path) {
          var mediaUrl = buildurl(schema.rootUrl + method.mediaUpload.protocols.simple.path);
          parameters.mediaUrl = mediaUrl.substring(1, mediaUrl.length - 1);
        }

        if (!callback) {
          return apirequest_1.createAPIRequest(parameters);
        }

        apirequest_1.createAPIRequest(parameters, callback);
        return;
      };
    }
  }, {
    key: "getPathParams",
    value: function getPathParams(params) {
      var pathParams = new Array();

      if (_typeof(params) !== 'object') {
        params = {};
      }

      Object.keys(params).forEach(function (key) {
        if (params[key].location === 'path') {
          pathParams.push(key);
        }
      });
      return pathParams;
    }
  }]);

  return Endpoint;
}();

exports.Endpoint = Endpoint;
/**
 * Build a string used to create a URL from the discovery doc provided URL.
 * replace double slashes with single slash (except in https://)
 * @private
 * @param  input URL to build from
 * @return Resulting built URL
 */

function buildurl(input) {
  return input ? "'".concat(input, "'").replace(/([^:]\/)\/+/g, '$1') : '';
}