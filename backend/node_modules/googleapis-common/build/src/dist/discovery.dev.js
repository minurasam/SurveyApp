"use strict"; // Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Discovery = void 0;

var fs = require("fs");

var google_auth_library_1 = require("google-auth-library");

var resolve = require("url");

var util = require("util");

var apirequest_1 = require("./apirequest");

var endpoint_1 = require("./endpoint");

var readFile = util.promisify(fs.readFile);

var Discovery =
/*#__PURE__*/
function () {
  /**
   * Discovery for discovering API endpoints
   *
   * @param options Options for discovery
   */
  function Discovery(options) {
    _classCallCheck(this, Discovery);

    this.transporter = new google_auth_library_1.DefaultTransporter();
    this.options = options || {};
  }
  /**
   * Generate and Endpoint from an endpoint schema object.
   *
   * @param schema The schema from which to generate the Endpoint.
   * @return A function that creates an endpoint.
   */


  _createClass(Discovery, [{
    key: "makeEndpoint",
    value: function makeEndpoint(schema) {
      return function (options) {
        var ep = new endpoint_1.Endpoint(options);
        ep.applySchema(ep, schema, schema, ep);
        return ep;
      };
    }
    /**
     * Log output of generator. Works just like console.log
     */

  }, {
    key: "log",
    value: function log() {
      if (this.options && this.options.debug) {
        var _console;

        (_console = console).log.apply(_console, arguments);
      }
    }
    /**
     * Generate all APIs and return as in-memory object.
     * @param discoveryUrl
     */

  }, {
    key: "discoverAllAPIs",
    value: function discoverAllAPIs(discoveryUrl) {
      var _this = this;

      var headers, res, items, apis, versionIndex, apisIndex, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;

      return regeneratorRuntime.async(function discoverAllAPIs$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              headers = this.options.includePrivate ? {} : {
                'X-User-Ip': '0.0.0.0'
              };
              _context2.next = 3;
              return regeneratorRuntime.awrap(this.transporter.request({
                url: discoveryUrl,
                headers: headers
              }));

            case 3:
              res = _context2.sent;
              items = res.data.items;
              _context2.next = 7;
              return regeneratorRuntime.awrap(Promise.all(items.map(function _callee(api) {
                var endpointCreator;
                return regeneratorRuntime.async(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return regeneratorRuntime.awrap(_this.discoverAPI(api.discoveryRestUrl));

                      case 2:
                        endpointCreator = _context.sent;
                        return _context.abrupt("return", {
                          api: api,
                          endpointCreator: endpointCreator
                        });

                      case 4:
                      case "end":
                        return _context.stop();
                    }
                  }
                });
              })));

            case 7:
              apis = _context2.sent;
              versionIndex = {}; // eslint-disable-next-line @typescript-eslint/no-explicit-any

              apisIndex = {};
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context2.prev = 13;

              _loop = function _loop() {
                var set = _step.value;

                if (!apisIndex[set.api.name]) {
                  versionIndex[set.api.name] = {};

                  apisIndex[set.api.name] = function (options) {
                    var type = _typeof(options);

                    var version;

                    if (type === 'string') {
                      version = options;
                      options = {};
                    } else if (type === 'object') {
                      version = options.version;
                      delete options.version;
                    } else {
                      throw new Error('Argument error: Accepts only string or object');
                    }

                    try {
                      var ep = set.endpointCreator(options, _this);
                      return Object.freeze(ep); // create new & freeze
                    } catch (e) {
                      throw new Error(util.format('Unable to load endpoint %s("%s"): %s', set.api.name, version, e.message));
                    }
                  };
                }

                versionIndex[set.api.name][set.api.version] = set.endpointCreator;
              };

              for (_iterator = apis[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                _loop();
              }

              _context2.next = 22;
              break;

            case 18:
              _context2.prev = 18;
              _context2.t0 = _context2["catch"](13);
              _didIteratorError = true;
              _iteratorError = _context2.t0;

            case 22:
              _context2.prev = 22;
              _context2.prev = 23;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 25:
              _context2.prev = 25;

              if (!_didIteratorError) {
                _context2.next = 28;
                break;
              }

              throw _iteratorError;

            case 28:
              return _context2.finish(25);

            case 29:
              return _context2.finish(22);

            case 30:
              return _context2.abrupt("return", apisIndex);

            case 31:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[13, 18, 22, 30], [23,, 25, 29]]);
    }
    /**
     * Generate API file given discovery URL
     *
     * @param apiDiscoveryUrl URL or filename of discovery doc for API
     * @returns A promise that resolves with a function that creates the endpoint
     */

  }, {
    key: "discoverAPI",
    value: function discoverAPI(apiDiscoveryUrl) {
      var parts, file, res, options, url, parameters, _res;

      return regeneratorRuntime.async(function discoverAPI$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!(typeof apiDiscoveryUrl === 'string')) {
                _context3.next = 17;
                break;
              }

              parts = resolve.parse(apiDiscoveryUrl);

              if (!(apiDiscoveryUrl && !parts.protocol)) {
                _context3.next = 10;
                break;
              }

              this.log('Reading from file ' + apiDiscoveryUrl);
              _context3.next = 6;
              return regeneratorRuntime.awrap(readFile(apiDiscoveryUrl, {
                encoding: 'utf8'
              }));

            case 6:
              file = _context3.sent;
              return _context3.abrupt("return", this.makeEndpoint(JSON.parse(file)));

            case 10:
              this.log('Requesting ' + apiDiscoveryUrl);
              _context3.next = 13;
              return regeneratorRuntime.awrap(this.transporter.request({
                url: apiDiscoveryUrl
              }));

            case 13:
              res = _context3.sent;
              return _context3.abrupt("return", this.makeEndpoint(res.data));

            case 15:
              _context3.next = 26;
              break;

            case 17:
              options = apiDiscoveryUrl;
              this.log('Requesting ' + options.url);
              url = options.url;
              delete options.url;
              parameters = {
                options: {
                  url: url,
                  method: 'GET'
                },
                requiredParams: [],
                pathParams: [],
                params: options,
                context: {
                  google: {
                    _options: {}
                  },
                  _options: {}
                }
              };
              _context3.next = 24;
              return regeneratorRuntime.awrap(apirequest_1.createAPIRequest(parameters));

            case 24:
              _res = _context3.sent;
              return _context3.abrupt("return", this.makeEndpoint(_res.data));

            case 26:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }]);

  return Discovery;
}();

exports.Discovery = Discovery;