"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildExps = buildExps;
exports["default"] = void 0;

var _util = require("./util");

function buildExps(isIRI) {
  var ALPHA$$ = "[A-Za-z]",
      CR$ = "[\\x0D]",
      DIGIT$$ = "[0-9]",
      DQUOTE$$ = "[\\x22]",
      HEXDIG$$ = (0, _util.merge)(DIGIT$$, "[A-Fa-f]"),
      //case-insensitive
  LF$$ = "[\\x0A]",
      SP$$ = "[\\x20]",
      PCT_ENCODED$ = (0, _util.subexp)((0, _util.subexp)("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + (0, _util.subexp)("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + (0, _util.subexp)("%" + HEXDIG$$ + HEXDIG$$)),
      //expanded
  GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
      SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
      RESERVED$$ = (0, _util.merge)(GEN_DELIMS$$, SUB_DELIMS$$),
      UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]",
      //subset, excludes bidi control characters
  IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]",
      //subset
  UNRESERVED$$ = (0, _util.merge)(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$),
      SCHEME$ = (0, _util.subexp)(ALPHA$$ + (0, _util.merge)(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"),
      USERINFO$ = (0, _util.subexp)((0, _util.subexp)(PCT_ENCODED$ + "|" + (0, _util.merge)(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*"),
      DEC_OCTET$ = (0, _util.subexp)((0, _util.subexp)("25[0-5]") + "|" + (0, _util.subexp)("2[0-4]" + DIGIT$$) + "|" + (0, _util.subexp)("1" + DIGIT$$ + DIGIT$$) + "|" + (0, _util.subexp)("[1-9]" + DIGIT$$) + "|" + DIGIT$$),
      DEC_OCTET_RELAXED$ = (0, _util.subexp)((0, _util.subexp)("25[0-5]") + "|" + (0, _util.subexp)("2[0-4]" + DIGIT$$) + "|" + (0, _util.subexp)("1" + DIGIT$$ + DIGIT$$) + "|" + (0, _util.subexp)("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$),
      //relaxed parsing rules
  IPV4ADDRESS$ = (0, _util.subexp)(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$),
      H16$ = (0, _util.subexp)(HEXDIG$$ + "{1,4}"),
      LS32$ = (0, _util.subexp)((0, _util.subexp)(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
      IPV6ADDRESS1$ = (0, _util.subexp)((0, _util.subexp)(H16$ + "\\:") + "{6}" + LS32$),
      //                           6( h16 ":" ) ls32
  IPV6ADDRESS2$ = (0, _util.subexp)("\\:\\:" + (0, _util.subexp)(H16$ + "\\:") + "{5}" + LS32$),
      //                      "::" 5( h16 ":" ) ls32
  IPV6ADDRESS3$ = (0, _util.subexp)((0, _util.subexp)(H16$) + "?\\:\\:" + (0, _util.subexp)(H16$ + "\\:") + "{4}" + LS32$),
      //[               h16 ] "::" 4( h16 ":" ) ls32
  IPV6ADDRESS4$ = (0, _util.subexp)((0, _util.subexp)((0, _util.subexp)(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + (0, _util.subexp)(H16$ + "\\:") + "{3}" + LS32$),
      //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
  IPV6ADDRESS5$ = (0, _util.subexp)((0, _util.subexp)((0, _util.subexp)(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + (0, _util.subexp)(H16$ + "\\:") + "{2}" + LS32$),
      //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
  IPV6ADDRESS6$ = (0, _util.subexp)((0, _util.subexp)((0, _util.subexp)(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$),
      //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
  IPV6ADDRESS7$ = (0, _util.subexp)((0, _util.subexp)((0, _util.subexp)(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$),
      //[ *4( h16 ":" ) h16 ] "::"              ls32
  IPV6ADDRESS8$ = (0, _util.subexp)((0, _util.subexp)((0, _util.subexp)(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$),
      //[ *5( h16 ":" ) h16 ] "::"              h16
  IPV6ADDRESS9$ = (0, _util.subexp)((0, _util.subexp)((0, _util.subexp)(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),
      //[ *6( h16 ":" ) h16 ] "::"
  IPV6ADDRESS$ = (0, _util.subexp)([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")),
      ZONEID$ = (0, _util.subexp)((0, _util.subexp)(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+"),
      //RFC 6874
  IPV6ADDRZ$ = (0, _util.subexp)(IPV6ADDRESS$ + "\\%25" + ZONEID$),
      //RFC 6874
  IPV6ADDRZ_RELAXED$ = (0, _util.subexp)(IPV6ADDRESS$ + (0, _util.subexp)("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + ZONEID$),
      //RFC 6874, with relaxed parsing rules
  IPVFUTURE$ = (0, _util.subexp)("[vV]" + HEXDIG$$ + "+\\." + (0, _util.merge)(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+"),
      IP_LITERAL$ = (0, _util.subexp)("\\[" + (0, _util.subexp)(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"),
      //RFC 6874
  REG_NAME$ = (0, _util.subexp)((0, _util.subexp)(PCT_ENCODED$ + "|" + (0, _util.merge)(UNRESERVED$$, SUB_DELIMS$$)) + "*"),
      HOST$ = (0, _util.subexp)(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")" + "|" + REG_NAME$),
      PORT$ = (0, _util.subexp)(DIGIT$$ + "*"),
      AUTHORITY$ = (0, _util.subexp)((0, _util.subexp)(USERINFO$ + "@") + "?" + HOST$ + (0, _util.subexp)("\\:" + PORT$) + "?"),
      PCHAR$ = (0, _util.subexp)(PCT_ENCODED$ + "|" + (0, _util.merge)(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]")),
      SEGMENT$ = (0, _util.subexp)(PCHAR$ + "*"),
      SEGMENT_NZ$ = (0, _util.subexp)(PCHAR$ + "+"),
      SEGMENT_NZ_NC$ = (0, _util.subexp)((0, _util.subexp)(PCT_ENCODED$ + "|" + (0, _util.merge)(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+"),
      PATH_ABEMPTY$ = (0, _util.subexp)((0, _util.subexp)("\\/" + SEGMENT$) + "*"),
      PATH_ABSOLUTE$ = (0, _util.subexp)("\\/" + (0, _util.subexp)(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"),
      //simplified
  PATH_NOSCHEME$ = (0, _util.subexp)(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),
      //simplified
  PATH_ROOTLESS$ = (0, _util.subexp)(SEGMENT_NZ$ + PATH_ABEMPTY$),
      //simplified
  PATH_EMPTY$ = "(?!" + PCHAR$ + ")",
      PATH$ = (0, _util.subexp)(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
      QUERY$ = (0, _util.subexp)((0, _util.subexp)(PCHAR$ + "|" + (0, _util.merge)("[\\/\\?]", IPRIVATE$$)) + "*"),
      FRAGMENT$ = (0, _util.subexp)((0, _util.subexp)(PCHAR$ + "|[\\/\\?]") + "*"),
      HIER_PART$ = (0, _util.subexp)((0, _util.subexp)("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
      URI$ = (0, _util.subexp)(SCHEME$ + "\\:" + HIER_PART$ + (0, _util.subexp)("\\?" + QUERY$) + "?" + (0, _util.subexp)("\\#" + FRAGMENT$) + "?"),
      RELATIVE_PART$ = (0, _util.subexp)((0, _util.subexp)("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$),
      RELATIVE$ = (0, _util.subexp)(RELATIVE_PART$ + (0, _util.subexp)("\\?" + QUERY$) + "?" + (0, _util.subexp)("\\#" + FRAGMENT$) + "?"),
      URI_REFERENCE$ = (0, _util.subexp)(URI$ + "|" + RELATIVE$),
      ABSOLUTE_URI$ = (0, _util.subexp)(SCHEME$ + "\\:" + HIER_PART$ + (0, _util.subexp)("\\?" + QUERY$) + "?"),
      GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + (0, _util.subexp)((0, _util.subexp)("\\/\\/(" + (0, _util.subexp)("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + (0, _util.subexp)("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + (0, _util.subexp)("\\?(" + QUERY$ + ")") + "?" + (0, _util.subexp)("\\#(" + FRAGMENT$ + ")") + "?$",
      RELATIVE_REF$ = "^(){0}" + (0, _util.subexp)((0, _util.subexp)("\\/\\/(" + (0, _util.subexp)("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + (0, _util.subexp)("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + (0, _util.subexp)("\\?(" + QUERY$ + ")") + "?" + (0, _util.subexp)("\\#(" + FRAGMENT$ + ")") + "?$",
      ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + (0, _util.subexp)((0, _util.subexp)("\\/\\/(" + (0, _util.subexp)("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + (0, _util.subexp)("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + (0, _util.subexp)("\\?(" + QUERY$ + ")") + "?$",
      SAMEDOC_REF$ = "^" + (0, _util.subexp)("\\#(" + FRAGMENT$ + ")") + "?$",
      AUTHORITY_REF$ = "^" + (0, _util.subexp)("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + (0, _util.subexp)("\\:(" + PORT$ + ")") + "?$";
  return {
    NOT_SCHEME: new RegExp((0, _util.merge)("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
    NOT_USERINFO: new RegExp((0, _util.merge)("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
    NOT_HOST: new RegExp((0, _util.merge)("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
    NOT_PATH: new RegExp((0, _util.merge)("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
    NOT_PATH_NOSCHEME: new RegExp((0, _util.merge)("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
    NOT_QUERY: new RegExp((0, _util.merge)("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
    NOT_FRAGMENT: new RegExp((0, _util.merge)("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
    ESCAPE: new RegExp((0, _util.merge)("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
    UNRESERVED: new RegExp(UNRESERVED$$, "g"),
    OTHER_CHARS: new RegExp((0, _util.merge)("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
    PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
    IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
    IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + (0, _util.subexp)((0, _util.subexp)("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules

  };
}

var _default = buildExps(false);

exports["default"] = _default;