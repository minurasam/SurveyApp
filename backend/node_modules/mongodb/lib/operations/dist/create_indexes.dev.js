'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Aspect = require('./operation').Aspect;

var defineAspects = require('./operation').defineAspects;

var CommandOperationV2 = require('./command_v2');

var MongoError = require('../core').MongoError;

var parseIndexOptions = require('../utils').parseIndexOptions;

var maxWireVersion = require('../core/utils').maxWireVersion;

var VALID_INDEX_OPTIONS = new Set(['background', 'unique', 'name', 'partialFilterExpression', 'sparse', 'expireAfterSeconds', 'storageEngine', 'collation', // text indexes
'weights', 'default_language', 'language_override', 'textIndexVersion', // 2d-sphere indexes
'2dsphereIndexVersion', // 2d indexes
'bits', 'min', 'max', // geoHaystack Indexes
'bucketSize', // wildcard indexes
'wildcardProjection']);

var CreateIndexesOperation =
/*#__PURE__*/
function (_CommandOperationV) {
  _inherits(CreateIndexesOperation, _CommandOperationV);

  /**
   * @ignore
   */
  function CreateIndexesOperation(parent, collection, indexes, options) {
    var _this;

    _classCallCheck(this, CreateIndexesOperation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateIndexesOperation).call(this, parent, options));
    _this.collection = collection; // createIndex can be called with a variety of styles:
    //   coll.createIndex('a');
    //   coll.createIndex({ a: 1 });
    //   coll.createIndex([['a', 1]]);
    // createIndexes is always called with an array of index spec objects

    if (!Array.isArray(indexes) || Array.isArray(indexes[0])) {
      _this.onlyReturnNameOfCreatedIndex = true; // TODO: remove in v4 (breaking change); make createIndex return full response as createIndexes does

      var indexParameters = parseIndexOptions(indexes); // Generate the index name

      var name = typeof options.name === 'string' ? options.name : indexParameters.name; // Set up the index

      var indexSpec = {
        name: name,
        key: indexParameters.fieldHash
      }; // merge valid index options into the index spec

      for (var optionName in options) {
        if (VALID_INDEX_OPTIONS.has(optionName)) {
          indexSpec[optionName] = options[optionName];
        }
      }

      _this.indexes = [indexSpec];
      return _possibleConstructorReturn(_this);
    }

    _this.indexes = indexes;
    return _this;
  }
  /**
   * @ignore
   */


  _createClass(CreateIndexesOperation, [{
    key: "execute",
    value: function execute(server, callback) {
      var _this2 = this;

      var options = this.options;
      var indexes = this.indexes;
      var serverWireVersion = maxWireVersion(server); // Ensure we generate the correct name if the parameter is not set

      for (var i = 0; i < indexes.length; i++) {
        // Did the user pass in a collation, check if our write server supports it
        if (indexes[i].collation && serverWireVersion < 5) {
          callback(new MongoError("Server ".concat(server.name, ", which reports wire version ").concat(serverWireVersion, ", does not support collation")));
          return;
        }

        if (indexes[i].name == null) {
          var keys = [];

          for (var name in indexes[i].key) {
            keys.push("".concat(name, "_").concat(indexes[i].key[name]));
          } // Set the name


          indexes[i].name = keys.join('_');
        }
      }

      var cmd = {
        createIndexes: this.collection,
        indexes: indexes
      };

      if (options.commitQuorum != null) {
        if (serverWireVersion < 9) {
          callback(new MongoError('`commitQuorum` option for `createIndexes` not supported on servers < 4.4'));
          return;
        }

        cmd.commitQuorum = options.commitQuorum;
      } // collation is set on each index, it should not be defined at the root


      this.options.collation = undefined;

      _get(_getPrototypeOf(CreateIndexesOperation.prototype), "executeCommand", this).call(this, server, cmd, function (err, result) {
        if (err) {
          callback(err);
          return;
        }

        callback(null, _this2.onlyReturnNameOfCreatedIndex ? indexes[0].name : result);
      });
    }
  }]);

  return CreateIndexesOperation;
}(CommandOperationV2);

defineAspects(CreateIndexesOperation, [Aspect.WRITE_OPERATION, Aspect.EXECUTE_WITH_SELECTION]);
module.exports = CreateIndexesOperation;