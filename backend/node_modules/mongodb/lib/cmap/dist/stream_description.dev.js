'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var parseServerType = require('../core/sdam/server_description').parseServerType;

var RESPONSE_FIELDS = ['minWireVersion', 'maxWireVersion', 'maxBsonObjectSize', 'maxMessageSizeBytes', 'maxWriteBatchSize', '__nodejs_mock_server__'];

var StreamDescription =
/*#__PURE__*/
function () {
  function StreamDescription(address, options) {
    _classCallCheck(this, StreamDescription);

    this.address = address;
    this.type = parseServerType(null);
    this.minWireVersion = undefined;
    this.maxWireVersion = undefined;
    this.maxBsonObjectSize = 16777216;
    this.maxMessageSizeBytes = 48000000;
    this.maxWriteBatchSize = 100000;
    this.compressors = options && options.compression && Array.isArray(options.compression.compressors) ? options.compression.compressors : [];
  }

  _createClass(StreamDescription, [{
    key: "receiveResponse",
    value: function receiveResponse(response) {
      var _this = this;

      this.type = parseServerType(response);
      RESPONSE_FIELDS.forEach(function (field) {
        if (typeof response[field] !== 'undefined') {
          _this[field] = response[field];
        }
      });

      if (response.compression) {
        this.compressor = this.compressors.filter(function (c) {
          return response.compression.indexOf(c) !== -1;
        })[0];
      }
    }
  }]);

  return StreamDescription;
}();

module.exports = {
  StreamDescription: StreamDescription
};