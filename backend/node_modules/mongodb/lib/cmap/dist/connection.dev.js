'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var EventEmitter = require('events');

var MessageStream = require('./message_stream');

var MongoError = require('../core/error').MongoError;

var MongoNetworkError = require('../core/error').MongoNetworkError;

var MongoNetworkTimeoutError = require('../core/error').MongoNetworkTimeoutError;

var MongoWriteConcernError = require('../core/error').MongoWriteConcernError;

var CommandResult = require('../core/connection/command_result');

var StreamDescription = require('./stream_description').StreamDescription;

var wp = require('../core/wireprotocol');

var apm = require('../core/connection/apm');

var updateSessionFromResponse = require('../core/sessions').updateSessionFromResponse;

var uuidV4 = require('../core/utils').uuidV4;

var now = require('../utils').now;

var calculateDurationInMs = require('../utils').calculateDurationInMs;

var kStream = Symbol('stream');
var kQueue = Symbol('queue');
var kMessageStream = Symbol('messageStream');
var kGeneration = Symbol('generation');
var kLastUseTime = Symbol('lastUseTime');
var kClusterTime = Symbol('clusterTime');
var kDescription = Symbol('description');
var kIsMaster = Symbol('ismaster');
var kAutoEncrypter = Symbol('autoEncrypter');

var Connection =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(Connection, _EventEmitter);

  function Connection(stream, options) {
    var _this;

    _classCallCheck(this, Connection);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Connection).call(this, options));
    _this.id = options.id;
    _this.address = streamIdentifier(stream);
    _this.bson = options.bson;
    _this.socketTimeout = typeof options.socketTimeout === 'number' ? options.socketTimeout : 0;
    _this.host = options.host || 'localhost';
    _this.port = options.port || 27017;
    _this.monitorCommands = typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false;
    _this.closed = false;
    _this.destroyed = false;
    _this[kDescription] = new StreamDescription(_this.address, options);
    _this[kGeneration] = options.generation;
    _this[kLastUseTime] = now(); // retain a reference to an `AutoEncrypter` if present

    if (options.autoEncrypter) {
      _this[kAutoEncrypter] = options.autoEncrypter;
    } // setup parser stream and message handling


    _this[kQueue] = new Map();
    _this[kMessageStream] = new MessageStream(options);

    _this[kMessageStream].on('message', messageHandler(_assertThisInitialized(_this)));

    _this[kStream] = stream;
    stream.on('error', function () {
      /* ignore errors, listen to `close` instead */
    });
    stream.on('close', function () {
      if (_this.closed) {
        return;
      }

      _this.closed = true;

      _this[kQueue].forEach(function (op) {
        return op.cb(new MongoNetworkError("connection ".concat(_this.id, " to ").concat(_this.address, " closed")));
      });

      _this[kQueue].clear();

      _this.emit('close');
    });
    stream.on('timeout', function () {
      if (_this.closed) {
        return;
      }

      stream.destroy();
      _this.closed = true;

      _this[kQueue].forEach(function (op) {
        return op.cb(new MongoNetworkTimeoutError("connection ".concat(_this.id, " to ").concat(_this.address, " timed out"), {
          beforeHandshake: _this[kIsMaster] == null
        }));
      });

      _this[kQueue].clear();

      _this.emit('close');
    }); // hook the message stream up to the passed in stream

    stream.pipe(_this[kMessageStream]);

    _this[kMessageStream].pipe(stream);

    return _this;
  }

  _createClass(Connection, [{
    key: "markAvailable",
    value: function markAvailable() {
      this[kLastUseTime] = now();
    }
  }, {
    key: "destroy",
    value: function destroy(options, callback) {
      var _this2 = this;

      if (typeof options === 'function') {
        callback = options;
        options = {};
      }

      options = Object.assign({
        force: false
      }, options);

      if (this[kStream] == null || this.destroyed) {
        this.destroyed = true;

        if (typeof callback === 'function') {
          callback();
        }

        return;
      }

      if (options.force) {
        this[kStream].destroy();
        this.destroyed = true;

        if (typeof callback === 'function') {
          callback();
        }

        return;
      }

      this[kStream].end(function (err) {
        _this2.destroyed = true;

        if (typeof callback === 'function') {
          callback(err);
        }
      });
    } // Wire protocol methods

  }, {
    key: "command",
    value: function command(ns, cmd, options, callback) {
      wp.command(makeServerTrampoline(this), ns, cmd, options, callback);
    }
  }, {
    key: "query",
    value: function query(ns, cmd, cursorState, options, callback) {
      wp.query(makeServerTrampoline(this), ns, cmd, cursorState, options, callback);
    }
  }, {
    key: "getMore",
    value: function getMore(ns, cursorState, batchSize, options, callback) {
      wp.getMore(makeServerTrampoline(this), ns, cursorState, batchSize, options, callback);
    }
  }, {
    key: "killCursors",
    value: function killCursors(ns, cursorState, callback) {
      wp.killCursors(makeServerTrampoline(this), ns, cursorState, callback);
    }
  }, {
    key: "insert",
    value: function insert(ns, ops, options, callback) {
      wp.insert(makeServerTrampoline(this), ns, ops, options, callback);
    }
  }, {
    key: "update",
    value: function update(ns, ops, options, callback) {
      wp.update(makeServerTrampoline(this), ns, ops, options, callback);
    }
  }, {
    key: "remove",
    value: function remove(ns, ops, options, callback) {
      wp.remove(makeServerTrampoline(this), ns, ops, options, callback);
    }
  }, {
    key: "description",
    get: function get() {
      return this[kDescription];
    }
  }, {
    key: "ismaster",
    get: function get() {
      return this[kIsMaster];
    } // the `connect` method stores the result of the handshake ismaster on the connection
    ,
    set: function set(response) {
      this[kDescription].receiveResponse(response); // TODO: remove this, and only use the `StreamDescription` in the future

      this[kIsMaster] = response;
    }
  }, {
    key: "generation",
    get: function get() {
      return this[kGeneration] || 0;
    }
  }, {
    key: "idleTime",
    get: function get() {
      return calculateDurationInMs(this[kLastUseTime]);
    }
  }, {
    key: "clusterTime",
    get: function get() {
      return this[kClusterTime];
    }
  }, {
    key: "stream",
    get: function get() {
      return this[kStream];
    }
  }]);

  return Connection;
}(EventEmitter); /// This lets us emulate a legacy `Server` instance so we can work with the existing wire
/// protocol methods. Eventually, the operation executor will return a `Connection` to execute
/// against.


function makeServerTrampoline(connection) {
  var server = {
    description: connection.description,
    clusterTime: connection[kClusterTime],
    s: {
      bson: connection.bson,
      pool: {
        write: write.bind(connection),
        isConnected: function isConnected() {
          return true;
        }
      }
    }
  };

  if (connection[kAutoEncrypter]) {
    server.autoEncrypter = connection[kAutoEncrypter];
  }

  return server;
}

function messageHandler(conn) {
  return function messageHandler(message) {
    // always emit the message, in case we are streaming
    conn.emit('message', message);

    if (!conn[kQueue].has(message.responseTo)) {
      return;
    }

    var operationDescription = conn[kQueue].get(message.responseTo);
    var callback = operationDescription.cb; // SERVER-45775: For exhaust responses we should be able to use the same requestId to
    // track response, however the server currently synthetically produces remote requests
    // making the `responseTo` change on each response

    conn[kQueue]["delete"](message.responseTo);

    if (message.moreToCome) {
      // requeue the callback for next synthetic request
      conn[kQueue].set(message.requestId, operationDescription);
    } else if (operationDescription.socketTimeoutOverride) {
      conn[kStream].setTimeout(conn.socketTimeout);
    }

    try {
      // Pass in the entire description because it has BSON parsing options
      message.parse(operationDescription);
    } catch (err) {
      callback(new MongoError(err));
      return;
    }

    if (message.documents[0]) {
      var document = message.documents[0];
      var session = operationDescription.session;

      if (session) {
        updateSessionFromResponse(session, document);
      }

      if (document.$clusterTime) {
        conn[kClusterTime] = document.$clusterTime;
        conn.emit('clusterTimeReceived', document.$clusterTime);
      }

      if (operationDescription.command) {
        if (document.writeConcernError) {
          callback(new MongoWriteConcernError(document.writeConcernError, document));
          return;
        }

        if (document.ok === 0 || document.$err || document.errmsg || document.code) {
          callback(new MongoError(document));
          return;
        }
      }
    } // NODE-2382: reenable in our glorious non-leaky abstraction future
    // callback(null, operationDescription.fullResult ? message : message.documents[0]);


    callback(undefined, new CommandResult(operationDescription.fullResult ? message : message.documents[0], conn, message));
  };
}

function streamIdentifier(stream) {
  if (typeof stream.address === 'function') {
    return "".concat(stream.remoteAddress, ":").concat(stream.remotePort);
  }

  return uuidV4().toString('hex');
} // Not meant to be called directly, the wire protocol methods call this assuming it is a `Pool` instance


function write(command, options, callback) {
  var _this3 = this;

  if (typeof options === 'function') {
    callback = options;
  }

  options = options || {};
  var operationDescription = {
    requestId: command.requestId,
    cb: callback,
    session: options.session,
    fullResult: typeof options.fullResult === 'boolean' ? options.fullResult : false,
    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,
    documentsReturnedIn: options.documentsReturnedIn,
    command: !!options.command,
    // for BSON parsing
    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,
    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,
    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,
    raw: typeof options.raw === 'boolean' ? options.raw : false
  };

  if (this[kDescription] && this[kDescription].compressor) {
    operationDescription.agreedCompressor = this[kDescription].compressor;

    if (this[kDescription].zlibCompressionLevel) {
      operationDescription.zlibCompressionLevel = this[kDescription].zlibCompressionLevel;
    }
  }

  if (typeof options.socketTimeout === 'number') {
    operationDescription.socketTimeoutOverride = true;
    this[kStream].setTimeout(options.socketTimeout);
  } // if command monitoring is enabled we need to modify the callback here


  if (this.monitorCommands) {
    this.emit('commandStarted', new apm.CommandStartedEvent(this, command));
    operationDescription.started = now();

    operationDescription.cb = function (err, reply) {
      if (err) {
        _this3.emit('commandFailed', new apm.CommandFailedEvent(_this3, command, err, operationDescription.started));
      } else {
        if (reply && reply.result && (reply.result.ok === 0 || reply.result.$err)) {
          _this3.emit('commandFailed', new apm.CommandFailedEvent(_this3, command, reply.result, operationDescription.started));
        } else {
          _this3.emit('commandSucceeded', new apm.CommandSucceededEvent(_this3, command, reply, operationDescription.started));
        }
      }

      if (typeof callback === 'function') {
        callback(err, reply);
      }
    };
  }

  if (!operationDescription.noResponse) {
    this[kQueue].set(operationDescription.requestId, operationDescription);
  }

  try {
    this[kMessageStream].writeCommand(command, operationDescription);
  } catch (e) {
    if (!operationDescription.noResponse) {
      this[kQueue]["delete"](operationDescription.requestId);
      operationDescription.cb(e);
      return;
    }
  }

  if (operationDescription.noResponse) {
    operationDescription.cb();
  }
}

module.exports = {
  Connection: Connection
};