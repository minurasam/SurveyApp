'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MongoError = require('../core/error').MongoError;
/**
 * An error indicating a connection pool is closed
 *
 * @property {string} address The address of the connection pool
 * @extends MongoError
 */


var PoolClosedError =
/*#__PURE__*/
function (_MongoError) {
  _inherits(PoolClosedError, _MongoError);

  function PoolClosedError(pool) {
    var _this;

    _classCallCheck(this, PoolClosedError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PoolClosedError).call(this, 'Attempted to check out a connection from closed connection pool'));
    _this.name = 'MongoPoolClosedError';
    _this.address = pool.address;
    return _this;
  }

  return PoolClosedError;
}(MongoError);
/**
 * An error thrown when a request to check out a connection times out
 *
 * @property {string} address The address of the connection pool
 * @extends MongoError
 */


var WaitQueueTimeoutError =
/*#__PURE__*/
function (_MongoError2) {
  _inherits(WaitQueueTimeoutError, _MongoError2);

  function WaitQueueTimeoutError(pool) {
    var _this2;

    _classCallCheck(this, WaitQueueTimeoutError);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(WaitQueueTimeoutError).call(this, 'Timed out while checking out a connection from connection pool'));
    _this2.name = 'MongoWaitQueueTimeoutError';
    _this2.address = pool.address;
    return _this2;
  }

  return WaitQueueTimeoutError;
}(MongoError);

module.exports = {
  PoolClosedError: PoolClosedError,
  WaitQueueTimeoutError: WaitQueueTimeoutError
};