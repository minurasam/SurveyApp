'use strict';
/**
 * The base class for all monitoring events published from the connection pool
 *
 * @property {number} time A timestamp when the event was created
 * @property {string} address The address (host/port pair) of the pool
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ConnectionPoolMonitoringEvent = function ConnectionPoolMonitoringEvent(pool) {
  _classCallCheck(this, ConnectionPoolMonitoringEvent);

  this.time = new Date();
  this.address = pool.address;
};
/**
 * An event published when a connection pool is created
 *
 * @property {Object} options The options used to create this connection pool
 */


var ConnectionPoolCreatedEvent =
/*#__PURE__*/
function (_ConnectionPoolMonito) {
  _inherits(ConnectionPoolCreatedEvent, _ConnectionPoolMonito);

  function ConnectionPoolCreatedEvent(pool) {
    var _this;

    _classCallCheck(this, ConnectionPoolCreatedEvent);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionPoolCreatedEvent).call(this, pool));
    _this.options = pool.options;
    return _this;
  }

  return ConnectionPoolCreatedEvent;
}(ConnectionPoolMonitoringEvent);
/**
 * An event published when a connection pool is closed
 */


var ConnectionPoolClosedEvent =
/*#__PURE__*/
function (_ConnectionPoolMonito2) {
  _inherits(ConnectionPoolClosedEvent, _ConnectionPoolMonito2);

  function ConnectionPoolClosedEvent(pool) {
    _classCallCheck(this, ConnectionPoolClosedEvent);

    return _possibleConstructorReturn(this, _getPrototypeOf(ConnectionPoolClosedEvent).call(this, pool));
  }

  return ConnectionPoolClosedEvent;
}(ConnectionPoolMonitoringEvent);
/**
 * An event published when a connection pool creates a new connection
 *
 * @property {number} connectionId A monotonically increasing, per-pool id for the newly created connection
 */


var ConnectionCreatedEvent =
/*#__PURE__*/
function (_ConnectionPoolMonito3) {
  _inherits(ConnectionCreatedEvent, _ConnectionPoolMonito3);

  function ConnectionCreatedEvent(pool, connection) {
    var _this2;

    _classCallCheck(this, ConnectionCreatedEvent);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionCreatedEvent).call(this, pool));
    _this2.connectionId = connection.id;
    return _this2;
  }

  return ConnectionCreatedEvent;
}(ConnectionPoolMonitoringEvent);
/**
 * An event published when a connection is ready for use
 *
 * @property {number} connectionId The id of the connection
 */


var ConnectionReadyEvent =
/*#__PURE__*/
function (_ConnectionPoolMonito4) {
  _inherits(ConnectionReadyEvent, _ConnectionPoolMonito4);

  function ConnectionReadyEvent(pool, connection) {
    var _this3;

    _classCallCheck(this, ConnectionReadyEvent);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionReadyEvent).call(this, pool));
    _this3.connectionId = connection.id;
    return _this3;
  }

  return ConnectionReadyEvent;
}(ConnectionPoolMonitoringEvent);
/**
 * An event published when a connection is closed
 *
 * @property {number} connectionId The id of the connection
 * @property {string} reason The reason the connection was closed
 */


var ConnectionClosedEvent =
/*#__PURE__*/
function (_ConnectionPoolMonito5) {
  _inherits(ConnectionClosedEvent, _ConnectionPoolMonito5);

  function ConnectionClosedEvent(pool, connection, reason) {
    var _this4;

    _classCallCheck(this, ConnectionClosedEvent);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionClosedEvent).call(this, pool));
    _this4.connectionId = connection.id;
    _this4.reason = reason || 'unknown';
    return _this4;
  }

  return ConnectionClosedEvent;
}(ConnectionPoolMonitoringEvent);
/**
 * An event published when a request to check a connection out begins
 */


var ConnectionCheckOutStartedEvent =
/*#__PURE__*/
function (_ConnectionPoolMonito6) {
  _inherits(ConnectionCheckOutStartedEvent, _ConnectionPoolMonito6);

  function ConnectionCheckOutStartedEvent(pool) {
    _classCallCheck(this, ConnectionCheckOutStartedEvent);

    return _possibleConstructorReturn(this, _getPrototypeOf(ConnectionCheckOutStartedEvent).call(this, pool));
  }

  return ConnectionCheckOutStartedEvent;
}(ConnectionPoolMonitoringEvent);
/**
 * An event published when a request to check a connection out fails
 *
 * @property {string} reason The reason the attempt to check out failed
 */


var ConnectionCheckOutFailedEvent =
/*#__PURE__*/
function (_ConnectionPoolMonito7) {
  _inherits(ConnectionCheckOutFailedEvent, _ConnectionPoolMonito7);

  function ConnectionCheckOutFailedEvent(pool, reason) {
    var _this5;

    _classCallCheck(this, ConnectionCheckOutFailedEvent);

    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionCheckOutFailedEvent).call(this, pool));
    _this5.reason = reason;
    return _this5;
  }

  return ConnectionCheckOutFailedEvent;
}(ConnectionPoolMonitoringEvent);
/**
 * An event published when a connection is checked out of the connection pool
 *
 * @property {number} connectionId The id of the connection
 */


var ConnectionCheckedOutEvent =
/*#__PURE__*/
function (_ConnectionPoolMonito8) {
  _inherits(ConnectionCheckedOutEvent, _ConnectionPoolMonito8);

  function ConnectionCheckedOutEvent(pool, connection) {
    var _this6;

    _classCallCheck(this, ConnectionCheckedOutEvent);

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionCheckedOutEvent).call(this, pool));
    _this6.connectionId = connection.id;
    return _this6;
  }

  return ConnectionCheckedOutEvent;
}(ConnectionPoolMonitoringEvent);
/**
 * An event published when a connection is checked into the connection pool
 *
 * @property {number} connectionId The id of the connection
 */


var ConnectionCheckedInEvent =
/*#__PURE__*/
function (_ConnectionPoolMonito9) {
  _inherits(ConnectionCheckedInEvent, _ConnectionPoolMonito9);

  function ConnectionCheckedInEvent(pool, connection) {
    var _this7;

    _classCallCheck(this, ConnectionCheckedInEvent);

    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionCheckedInEvent).call(this, pool));
    _this7.connectionId = connection.id;
    return _this7;
  }

  return ConnectionCheckedInEvent;
}(ConnectionPoolMonitoringEvent);
/**
 * An event published when a connection pool is cleared
 */


var ConnectionPoolClearedEvent =
/*#__PURE__*/
function (_ConnectionPoolMonito10) {
  _inherits(ConnectionPoolClearedEvent, _ConnectionPoolMonito10);

  function ConnectionPoolClearedEvent(pool) {
    _classCallCheck(this, ConnectionPoolClearedEvent);

    return _possibleConstructorReturn(this, _getPrototypeOf(ConnectionPoolClearedEvent).call(this, pool));
  }

  return ConnectionPoolClearedEvent;
}(ConnectionPoolMonitoringEvent);

var CMAP_EVENT_NAMES = ['connectionPoolCreated', 'connectionPoolClosed', 'connectionCreated', 'connectionReady', 'connectionClosed', 'connectionCheckOutStarted', 'connectionCheckOutFailed', 'connectionCheckedOut', 'connectionCheckedIn', 'connectionPoolCleared'];
module.exports = {
  CMAP_EVENT_NAMES: CMAP_EVENT_NAMES,
  ConnectionPoolCreatedEvent: ConnectionPoolCreatedEvent,
  ConnectionPoolClosedEvent: ConnectionPoolClosedEvent,
  ConnectionCreatedEvent: ConnectionCreatedEvent,
  ConnectionReadyEvent: ConnectionReadyEvent,
  ConnectionClosedEvent: ConnectionClosedEvent,
  ConnectionCheckOutStartedEvent: ConnectionCheckOutStartedEvent,
  ConnectionCheckOutFailedEvent: ConnectionCheckOutFailedEvent,
  ConnectionCheckedOutEvent: ConnectionCheckedOutEvent,
  ConnectionCheckedInEvent: ConnectionCheckedInEvent,
  ConnectionPoolClearedEvent: ConnectionPoolClearedEvent
};