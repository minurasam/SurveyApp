'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var kWriteConcernKeys = new Set(['w', 'wtimeout', 'j', 'journal', 'fsync']);
var utils;
/**
 * The **WriteConcern** class is a class that represents a MongoDB WriteConcern.
 * @class
 * @property {(number|string)} w The write concern
 * @property {number} wtimeout The write concern timeout
 * @property {boolean} j The journal write concern
 * @property {boolean} fsync The file sync write concern
 * @see https://docs.mongodb.com/manual/reference/write-concern/index.html
 */

var WriteConcern =
/*#__PURE__*/
function () {
  /**
   * Constructs a WriteConcern from the write concern properties.
   * @param {(number|string)} [w] The write concern
   * @param {number} [wtimeout] The write concern timeout
   * @param {boolean} [j] The journal write concern
   * @param {boolean} [fsync] The file sync write concern
   */
  function WriteConcern(w, wtimeout, j, fsync) {
    _classCallCheck(this, WriteConcern);

    if (w != null) {
      this.w = w;
    }

    if (wtimeout != null) {
      this.wtimeout = wtimeout;
    }

    if (j != null) {
      this.j = j;
    }

    if (fsync != null) {
      this.fsync = fsync;
    }
  }
  /**
   * Construct a WriteConcern given an options object.
   *
   * @param {object} [options] The options object from which to extract the write concern.
   * @param {(number|string)} [options.w] **Deprecated** Use `options.writeConcern` instead
   * @param {number} [options.wtimeout] **Deprecated** Use `options.writeConcern` instead
   * @param {boolean} [options.j] **Deprecated** Use `options.writeConcern` instead
   * @param {boolean} [options.fsync] **Deprecated** Use `options.writeConcern` instead
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @return {WriteConcern}
   */


  _createClass(WriteConcern, null, [{
    key: "fromOptions",
    value: function fromOptions(options) {
      if (options == null || options.writeConcern == null && options.w == null && options.wtimeout == null && options.j == null && options.journal == null && options.fsync == null) {
        return;
      }

      if (options.writeConcern) {
        if (typeof options.writeConcern === 'string') {
          return new WriteConcern(options.writeConcern);
        }

        if (!Object.keys(options.writeConcern).some(function (key) {
          return kWriteConcernKeys.has(key);
        })) {
          return;
        }

        return new WriteConcern(options.writeConcern.w, options.writeConcern.wtimeout, options.writeConcern.j || options.writeConcern.journal, options.writeConcern.fsync);
      } // this is down here to prevent circular dependency


      if (!utils) utils = require('./utils');
      utils.emitWarningOnce("Top-level use of w, wtimeout, j, and fsync is deprecated. Use writeConcern instead.");
      return new WriteConcern(options.w, options.wtimeout, options.j || options.journal, options.fsync);
    }
  }]);

  return WriteConcern;
}();

module.exports = WriteConcern;