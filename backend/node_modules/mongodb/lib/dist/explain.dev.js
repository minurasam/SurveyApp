'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var MongoError = require('./core/error').MongoError;

var ExplainVerbosity = {
  queryPlanner: 'queryPlanner',
  queryPlannerExtended: 'queryPlannerExtended',
  executionStats: 'executionStats',
  allPlansExecution: 'allPlansExecution'
};
/**
 * @class
 * @property {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'} verbosity The verbosity mode for the explain output.
 */

var Explain =
/*#__PURE__*/
function () {
  /**
   * Constructs an Explain from the explain verbosity.
   *
   * For backwards compatibility, true is interpreted as "allPlansExecution"
   * and false as "queryPlanner". Prior to server version 3.6, aggregate()
   * ignores the verbosity parameter and executes in "queryPlanner".
   *
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [verbosity] The verbosity mode for the explain output.
   */
  function Explain(verbosity) {
    _classCallCheck(this, Explain);

    if (typeof verbosity === 'boolean') {
      this.verbosity = verbosity ? 'allPlansExecution' : 'queryPlanner';
    } else {
      this.verbosity = verbosity;
    }
  }
  /**
   * Construct an Explain given an options object.
   *
   * @param {object} [options] The options object from which to extract the explain.
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output
   * @return {Explain}
   */


  _createClass(Explain, null, [{
    key: "fromOptions",
    value: function fromOptions(options) {
      if (options == null || options.explain === undefined) {
        return;
      }

      var explain = options.explain;

      if (typeof explain === 'boolean' || explain in ExplainVerbosity) {
        return new Explain(options.explain);
      }

      throw new MongoError("explain must be one of ".concat(Object.keys(ExplainVerbosity), " or a boolean"));
    }
  }]);

  return Explain;
}();

module.exports = {
  Explain: Explain
};