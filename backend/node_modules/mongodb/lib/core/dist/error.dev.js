'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var kErrorLabels = Symbol('errorLabels');
/**
 * Creates a new MongoError
 *
 * @augments Error
 * @param {Error|string|object} message The error message
 * @property {string} message The error message
 * @property {string} stack The error call stack
 */

var MongoError =
/*#__PURE__*/
function (_Error) {
  _inherits(MongoError, _Error);

  function MongoError(message) {
    var _this;

    _classCallCheck(this, MongoError);

    if (message instanceof Error) {
      _this = _possibleConstructorReturn(this, _getPrototypeOf(MongoError).call(this, message.message));
      _this.stack = message.stack;
    } else {
      if (typeof message === 'string') {
        _this = _possibleConstructorReturn(this, _getPrototypeOf(MongoError).call(this, message));
      } else {
        _this = _possibleConstructorReturn(this, _getPrototypeOf(MongoError).call(this, message.message || message.errmsg || message.$err || 'n/a'));

        if (message.errorLabels) {
          _this[kErrorLabels] = new Set(message.errorLabels);
        }

        for (var name in message) {
          if (name === 'errorLabels' || name === 'errmsg') {
            continue;
          }

          _this[name] = message[name];
        }
      }

      Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    }

    _this.name = 'MongoError';
    return _possibleConstructorReturn(_this);
  }
  /**
   * Legacy name for server error responses
   */


  _createClass(MongoError, [{
    key: "hasErrorLabel",

    /**
     * Checks the error to see if it has an error label
     * @param {string} label The error label to check for
     * @returns {boolean} returns true if the error has the provided error label
     */
    value: function hasErrorLabel(label) {
      if (this[kErrorLabels] == null) {
        return false;
      }

      return this[kErrorLabels].has(label);
    }
  }, {
    key: "addErrorLabel",
    value: function addErrorLabel(label) {
      if (this[kErrorLabels] == null) {
        this[kErrorLabels] = new Set();
      }

      this[kErrorLabels].add(label);
    }
  }, {
    key: "errmsg",
    get: function get() {
      return this.message;
    }
    /**
     * Creates a new MongoError object
     *
     * @param {Error|string|object} options The options used to create the error.
     * @return {MongoError} A MongoError instance
     * @deprecated Use `new MongoError()` instead.
     */

  }, {
    key: "errorLabels",
    get: function get() {
      return this[kErrorLabels] ? Array.from(this[kErrorLabels]) : [];
    }
  }], [{
    key: "create",
    value: function create(options) {
      return new MongoError(options);
    }
  }]);

  return MongoError;
}(_wrapNativeSuper(Error));

var kBeforeHandshake = Symbol('beforeHandshake');

function isNetworkErrorBeforeHandshake(err) {
  return err[kBeforeHandshake] === true;
}
/**
 * An error indicating an issue with the network, including TCP
 * errors and timeouts.
 *
 * @param {Error|string|object} message The error message
 * @property {string} message The error message
 * @property {string} stack The error call stack
 * @extends MongoError
 */


var MongoNetworkError =
/*#__PURE__*/
function (_MongoError) {
  _inherits(MongoNetworkError, _MongoError);

  function MongoNetworkError(message, options) {
    var _this2;

    _classCallCheck(this, MongoNetworkError);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(MongoNetworkError).call(this, message));
    _this2.name = 'MongoNetworkError';

    if (options && options.beforeHandshake === true) {
      _this2[kBeforeHandshake] = true;
    }

    return _this2;
  }

  return MongoNetworkError;
}(MongoError);
/**
 * An error indicating a network timeout occurred
 *
 * @param {Error|string|object} message The error message
 * @property {string} message The error message
 * @property {object} [options.beforeHandshake] Indicates the timeout happened before a connection handshake completed
 * @extends MongoError
 */


var MongoNetworkTimeoutError =
/*#__PURE__*/
function (_MongoNetworkError) {
  _inherits(MongoNetworkTimeoutError, _MongoNetworkError);

  function MongoNetworkTimeoutError(message, options) {
    var _this3;

    _classCallCheck(this, MongoNetworkTimeoutError);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(MongoNetworkTimeoutError).call(this, message, options));
    _this3.name = 'MongoNetworkTimeoutError';
    return _this3;
  }

  return MongoNetworkTimeoutError;
}(MongoNetworkError);
/**
 * An error used when attempting to parse a value (like a connection string)
 *
 * @param {Error|string|object} message The error message
 * @property {string} message The error message
 * @extends MongoError
 */


var MongoParseError =
/*#__PURE__*/
function (_MongoError2) {
  _inherits(MongoParseError, _MongoError2);

  function MongoParseError(message) {
    var _this4;

    _classCallCheck(this, MongoParseError);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(MongoParseError).call(this, message));
    _this4.name = 'MongoParseError';
    return _this4;
  }

  return MongoParseError;
}(MongoError);
/**
 * An error signifying a client-side timeout event
 *
 * @param {Error|string|object} message The error message
 * @param {string|object} [reason] The reason the timeout occured
 * @property {string} message The error message
 * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers
 * @extends MongoError
 */


var MongoTimeoutError =
/*#__PURE__*/
function (_MongoError3) {
  _inherits(MongoTimeoutError, _MongoError3);

  function MongoTimeoutError(message, reason) {
    var _this5;

    _classCallCheck(this, MongoTimeoutError);

    if (reason && reason.error) {
      _this5 = _possibleConstructorReturn(this, _getPrototypeOf(MongoTimeoutError).call(this, reason.error.message || reason.error));
    } else {
      _this5 = _possibleConstructorReturn(this, _getPrototypeOf(MongoTimeoutError).call(this, message));
    }

    _this5.name = 'MongoTimeoutError';

    if (reason) {
      _this5.reason = reason;
    }

    return _possibleConstructorReturn(_this5);
  }

  return MongoTimeoutError;
}(MongoError);
/**
 * An error signifying a client-side server selection error
 *
 * @param {Error|string|object} message The error message
 * @param {string|object} [reason] The reason the timeout occured
 * @property {string} message The error message
 * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers
 * @extends MongoError
 */


var MongoServerSelectionError =
/*#__PURE__*/
function (_MongoTimeoutError) {
  _inherits(MongoServerSelectionError, _MongoTimeoutError);

  function MongoServerSelectionError(message, reason) {
    var _this6;

    _classCallCheck(this, MongoServerSelectionError);

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(MongoServerSelectionError).call(this, message, reason));
    _this6.name = 'MongoServerSelectionError';
    return _this6;
  }

  return MongoServerSelectionError;
}(MongoTimeoutError);

function makeWriteConcernResultObject(input) {
  var output = Object.assign({}, input);

  if (output.ok === 0) {
    output.ok = 1;
    delete output.errmsg;
    delete output.code;
    delete output.codeName;
  }

  return output;
}
/**
 * An error thrown when the server reports a writeConcernError
 *
 * @param {Error|string|object} message The error message
 * @param {object} result The result document (provided if ok: 1)
 * @property {string} message The error message
 * @property {object} [result] The result document (provided if ok: 1)
 * @extends MongoError
 */


var MongoWriteConcernError =
/*#__PURE__*/
function (_MongoError4) {
  _inherits(MongoWriteConcernError, _MongoError4);

  function MongoWriteConcernError(message, result) {
    var _this7;

    _classCallCheck(this, MongoWriteConcernError);

    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(MongoWriteConcernError).call(this, message));
    _this7.name = 'MongoWriteConcernError';

    if (result && Array.isArray(result.errorLabels)) {
      _this7[kErrorLabels] = new Set(result.errorLabels);
    }

    if (result != null) {
      _this7.result = makeWriteConcernResultObject(result);
    }

    return _this7;
  }

  return MongoWriteConcernError;
}(MongoError); // see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms


var RETRYABLE_ERROR_CODES = new Set([6, // HostUnreachable
7, // HostNotFound
89, // NetworkTimeout
91, // ShutdownInProgress
189, // PrimarySteppedDown
9001, // SocketException
10107, // NotMaster
11600, // InterruptedAtShutdown
11602, // InterruptedDueToReplStateChange
13435, // NotMasterNoSlaveOk
13436 // NotMasterOrSecondary
]);
var RETRYABLE_WRITE_ERROR_CODES = new Set([11600, // InterruptedAtShutdown
11602, // InterruptedDueToReplStateChange
10107, // NotMaster
13435, // NotMasterNoSlaveOk
13436, // NotMasterOrSecondary
189, // PrimarySteppedDown
91, // ShutdownInProgress
7, // HostNotFound
6, // HostUnreachable
89, // NetworkTimeout
9001, // SocketException
262 // ExceededTimeLimit
]);

function isRetryableWriteError(error) {
  if (error instanceof MongoWriteConcernError) {
    return RETRYABLE_WRITE_ERROR_CODES.has(error.code) || RETRYABLE_WRITE_ERROR_CODES.has(error.result.code);
  }

  return RETRYABLE_WRITE_ERROR_CODES.has(error.code);
}
/**
 * Determines whether an error is something the driver should attempt to retry
 *
 * @ignore
 * @param {MongoError|Error} error
 */


function isRetryableError(error) {
  return RETRYABLE_ERROR_CODES.has(error.code) || error instanceof MongoNetworkError || error.message.match(/not master/) || error.message.match(/node is recovering/);
}

var SDAM_RECOVERING_CODES = new Set([91, // ShutdownInProgress
189, // PrimarySteppedDown
11600, // InterruptedAtShutdown
11602, // InterruptedDueToReplStateChange
13436 // NotMasterOrSecondary
]);
var SDAM_NOTMASTER_CODES = new Set([10107, // NotMaster
13435 // NotMasterNoSlaveOk
]);
var SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([11600, // InterruptedAtShutdown
91 // ShutdownInProgress
]);

function isRecoveringError(err) {
  if (err.code && SDAM_RECOVERING_CODES.has(err.code)) {
    return true;
  }

  return err.message.match(/not master or secondary/) || err.message.match(/node is recovering/);
}

function isNotMasterError(err) {
  if (err.code && SDAM_NOTMASTER_CODES.has(err.code)) {
    return true;
  }

  if (isRecoveringError(err)) {
    return false;
  }

  return err.message.match(/not master/);
}

function isNodeShuttingDownError(err) {
  return err.code && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code);
}
/**
 * Determines whether SDAM can recover from a given error. If it cannot
 * then the pool will be cleared, and server state will completely reset
 * locally.
 *
 * @ignore
 * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering
 * @param {MongoError|Error} error
 */


function isSDAMUnrecoverableError(error) {
  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or
  //       close event are considered unrecoverable
  if (error instanceof MongoParseError || error == null) {
    return true;
  }

  if (isRecoveringError(error) || isNotMasterError(error)) {
    return true;
  }

  return false;
}

module.exports = {
  MongoError: MongoError,
  MongoNetworkError: MongoNetworkError,
  MongoNetworkTimeoutError: MongoNetworkTimeoutError,
  MongoParseError: MongoParseError,
  MongoTimeoutError: MongoTimeoutError,
  MongoServerSelectionError: MongoServerSelectionError,
  MongoWriteConcernError: MongoWriteConcernError,
  isRetryableError: isRetryableError,
  isSDAMUnrecoverableError: isSDAMUnrecoverableError,
  isNodeShuttingDownError: isNodeShuttingDownError,
  isRetryableWriteError: isRetryableWriteError,
  isNetworkErrorBeforeHandshake: isNetworkErrorBeforeHandshake
};