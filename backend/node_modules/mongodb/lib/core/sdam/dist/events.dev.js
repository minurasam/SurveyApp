'use strict';
/**
 * Published when server description changes, but does NOT include changes to the RTT.
 *
 * @property {Object} topologyId A unique identifier for the topology
 * @property {ServerAddress} address The address (host/port pair) of the server
 * @property {ServerDescription} previousDescription The previous server description
 * @property {ServerDescription} newDescription The new server description
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ServerDescriptionChangedEvent = function ServerDescriptionChangedEvent(topologyId, address, previousDescription, newDescription) {
  _classCallCheck(this, ServerDescriptionChangedEvent);

  Object.assign(this, {
    topologyId: topologyId,
    address: address,
    previousDescription: previousDescription,
    newDescription: newDescription
  });
};
/**
 * Published when server is initialized.
 *
 * @property {Object} topologyId A unique identifier for the topology
 * @property {ServerAddress} address The address (host/port pair) of the server
 */


var ServerOpeningEvent = function ServerOpeningEvent(topologyId, address) {
  _classCallCheck(this, ServerOpeningEvent);

  Object.assign(this, {
    topologyId: topologyId,
    address: address
  });
};
/**
 * Published when server is closed.
 *
 * @property {ServerAddress} address The address (host/port pair) of the server
 * @property {Object} topologyId A unique identifier for the topology
 */


var ServerClosedEvent = function ServerClosedEvent(topologyId, address) {
  _classCallCheck(this, ServerClosedEvent);

  Object.assign(this, {
    topologyId: topologyId,
    address: address
  });
};
/**
 * Published when topology description changes.
 *
 * @property {Object} topologyId
 * @property {TopologyDescription} previousDescription The old topology description
 * @property {TopologyDescription} newDescription The new topology description
 */


var TopologyDescriptionChangedEvent = function TopologyDescriptionChangedEvent(topologyId, previousDescription, newDescription) {
  _classCallCheck(this, TopologyDescriptionChangedEvent);

  Object.assign(this, {
    topologyId: topologyId,
    previousDescription: previousDescription,
    newDescription: newDescription
  });
};
/**
 * Published when topology is initialized.
 *
 * @param {Object} topologyId A unique identifier for the topology
 */


var TopologyOpeningEvent = function TopologyOpeningEvent(topologyId) {
  _classCallCheck(this, TopologyOpeningEvent);

  Object.assign(this, {
    topologyId: topologyId
  });
};
/**
 * Published when topology is closed.
 *
 * @param {Object} topologyId A unique identifier for the topology
 */


var TopologyClosedEvent = function TopologyClosedEvent(topologyId) {
  _classCallCheck(this, TopologyClosedEvent);

  Object.assign(this, {
    topologyId: topologyId
  });
};
/**
 * Fired when the server monitor’s ismaster command is started - immediately before
 * the ismaster command is serialized into raw BSON and written to the socket.
 *
 * @property {Object} connectionId The connection id for the command
 */


var ServerHeartbeatStartedEvent = function ServerHeartbeatStartedEvent(connectionId) {
  _classCallCheck(this, ServerHeartbeatStartedEvent);

  Object.assign(this, {
    connectionId: connectionId
  });
};
/**
 * Fired when the server monitor’s ismaster succeeds.
 *
 * @param {Number} duration The execution time of the event in ms
 * @param {Object} reply The command reply
 * @param {Object} connectionId The connection id for the command
 */


var ServerHeartbeatSucceededEvent = function ServerHeartbeatSucceededEvent(duration, reply, connectionId) {
  _classCallCheck(this, ServerHeartbeatSucceededEvent);

  Object.assign(this, {
    connectionId: connectionId,
    duration: duration,
    reply: reply
  });
};
/**
 * Fired when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.
 *
 * @param {Number} duration The execution time of the event in ms
 * @param {MongoError|Object} failure The command failure
 * @param {Object} connectionId The connection id for the command
 */


var ServerHeartbeatFailedEvent = function ServerHeartbeatFailedEvent(duration, failure, connectionId) {
  _classCallCheck(this, ServerHeartbeatFailedEvent);

  Object.assign(this, {
    connectionId: connectionId,
    duration: duration,
    failure: failure
  });
};

module.exports = {
  ServerDescriptionChangedEvent: ServerDescriptionChangedEvent,
  ServerOpeningEvent: ServerOpeningEvent,
  ServerClosedEvent: ServerClosedEvent,
  TopologyDescriptionChangedEvent: TopologyDescriptionChangedEvent,
  TopologyOpeningEvent: TopologyOpeningEvent,
  TopologyClosedEvent: TopologyClosedEvent,
  ServerHeartbeatStartedEvent: ServerHeartbeatStartedEvent,
  ServerHeartbeatSucceededEvent: ServerHeartbeatSucceededEvent,
  ServerHeartbeatFailedEvent: ServerHeartbeatFailedEvent
};