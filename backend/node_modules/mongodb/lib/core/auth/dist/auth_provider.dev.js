'use strict';
/**
 * Context used during authentication
 *
 * @property {Connection} connection The connection to authenticate
 * @property {MongoCredentials} credentials The credentials to use for authentication
 * @property {object} options The options passed to the `connect` method
 * @property {object?} response The response of the initial handshake
 * @property {Buffer?} nonce A random nonce generated for use in an authentication conversation
 */

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AuthContext = function AuthContext(connection, credentials, options) {
  _classCallCheck(this, AuthContext);

  this.connection = connection;
  this.credentials = credentials;
  this.options = options;
};

var AuthProvider =
/*#__PURE__*/
function () {
  function AuthProvider(bson) {
    _classCallCheck(this, AuthProvider);

    this.bson = bson;
  }
  /**
   * Prepare the handshake document before the initial handshake.
   *
   * @param {object} handshakeDoc The document used for the initial handshake on a connection
   * @param {AuthContext} authContext Context for authentication flow
   * @param {function} callback
   */


  _createClass(AuthProvider, [{
    key: "prepare",
    value: function prepare(handshakeDoc, context, callback) {
      callback(undefined, handshakeDoc);
    }
    /**
     * Authenticate
     *
     * @param {AuthContext} context A shared context for authentication flow
     * @param {authResultCallback} callback The callback to return the result from the authentication
     */

  }, {
    key: "auth",
    value: function auth(context, callback) {
      callback(new TypeError('`auth` method must be overridden by subclass'));
    }
  }]);

  return AuthProvider;
}();
/**
 * This is a result from an authentication provider
 *
 * @callback authResultCallback
 * @param {error} error An error object. Set to null if no error present
 * @param {boolean} result The result of the authentication process
 */


module.exports = {
  AuthContext: AuthContext,
  AuthProvider: AuthProvider
};