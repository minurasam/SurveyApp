'use strict';

var net = require('net');

var tls = require('tls');

var Connection = require('./connection');

var MongoError = require('../error').MongoError;

var MongoNetworkError = require('../error').MongoNetworkError;

var MongoNetworkTimeoutError = require('../error').MongoNetworkTimeoutError;

var defaultAuthProviders = require('../auth/defaultAuthProviders').defaultAuthProviders;

var AuthContext = require('../auth/auth_provider').AuthContext;

var WIRE_CONSTANTS = require('../wireprotocol/constants');

var makeClientMetadata = require('../utils').makeClientMetadata;

var MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;
var MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;
var MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;
var MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;
var AUTH_PROVIDERS;

function connect(options, cancellationToken, callback) {
  if (typeof cancellationToken === 'function') {
    callback = cancellationToken;
    cancellationToken = undefined;
  }

  var ConnectionType = options && options.connectionType ? options.connectionType : Connection;

  if (AUTH_PROVIDERS == null) {
    AUTH_PROVIDERS = defaultAuthProviders(options.bson);
  }

  var family = options.family !== void 0 ? options.family : 0;
  makeConnection(family, options, cancellationToken, function (err, socket) {
    if (err) {
      callback(err, socket); // in the error case, `socket` is the originating error event name

      return;
    }

    performInitialHandshake(new ConnectionType(socket, options), options, callback);
  });
}

function isModernConnectionType(conn) {
  return !(conn instanceof Connection);
}

function checkSupportedServer(ismaster, options) {
  var serverVersionHighEnough = ismaster && typeof ismaster.maxWireVersion === 'number' && ismaster.maxWireVersion >= MIN_SUPPORTED_WIRE_VERSION;
  var serverVersionLowEnough = ismaster && typeof ismaster.minWireVersion === 'number' && ismaster.minWireVersion <= MAX_SUPPORTED_WIRE_VERSION;

  if (serverVersionHighEnough) {
    if (serverVersionLowEnough) {
      return null;
    }

    var _message = "Server at ".concat(options.host, ":").concat(options.port, " reports minimum wire version ").concat(ismaster.minWireVersion, ", but this version of the Node.js Driver requires at most ").concat(MAX_SUPPORTED_WIRE_VERSION, " (MongoDB ").concat(MAX_SUPPORTED_SERVER_VERSION, ")");

    return new MongoError(_message);
  }

  var message = "Server at ".concat(options.host, ":").concat(options.port, " reports maximum wire version ").concat(ismaster.maxWireVersion || 0, ", but this version of the Node.js Driver requires at least ").concat(MIN_SUPPORTED_WIRE_VERSION, " (MongoDB ").concat(MIN_SUPPORTED_SERVER_VERSION, ")");
  return new MongoError(message);
}

function performInitialHandshake(conn, options, _callback) {
  var callback = function callback(err, ret) {
    if (err && conn) {
      conn.destroy();
    }

    _callback(err, ret);
  };

  var credentials = options.credentials;

  if (credentials) {
    if (!credentials.mechanism.match(/DEFAULT/i) && !AUTH_PROVIDERS[credentials.mechanism]) {
      callback(new MongoError("authMechanism '".concat(credentials.mechanism, "' not supported")));
      return;
    }
  }

  var authContext = new AuthContext(conn, credentials, options);
  prepareHandshakeDocument(authContext, function (err, handshakeDoc) {
    if (err) {
      return callback(err);
    }

    var handshakeOptions = Object.assign({}, options);

    if (options.connectTimeoutMS || options.connectionTimeout) {
      // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS
      handshakeOptions.socketTimeout = options.connectTimeoutMS || options.connectionTimeout;
    }

    var start = new Date().getTime();
    conn.command('admin.$cmd', handshakeDoc, handshakeOptions, function (err, result) {
      if (err) {
        callback(err);
        return;
      }

      var response = result.result;

      if (response.ok === 0) {
        callback(new MongoError(response));
        return;
      }

      var supportedServerErr = checkSupportedServer(response, options);

      if (supportedServerErr) {
        callback(supportedServerErr);
        return;
      }

      if (!isModernConnectionType(conn)) {
        // resolve compression
        if (response.compression) {
          var agreedCompressors = handshakeDoc.compression.filter(function (compressor) {
            return response.compression.indexOf(compressor) !== -1;
          });

          if (agreedCompressors.length) {
            conn.agreedCompressor = agreedCompressors[0];
          }

          if (options.compression && options.compression.zlibCompressionLevel) {
            conn.zlibCompressionLevel = options.compression.zlibCompressionLevel;
          }
        }
      } // NOTE: This is metadata attached to the connection while porting away from
      //       handshake being done in the `Server` class. Likely, it should be
      //       relocated, or at very least restructured.


      conn.ismaster = response;
      conn.lastIsMasterMS = new Date().getTime() - start;

      if (!response.arbiterOnly && credentials) {
        // store the response on auth context
        Object.assign(authContext, {
          response: response
        });
        var resolvedCredentials = credentials.resolveAuthMechanism(response);
        var authProvider = AUTH_PROVIDERS[resolvedCredentials.mechanism];
        authProvider.auth(authContext, function (err) {
          if (err) return callback(err);
          callback(undefined, conn);
        });
        return;
      }

      callback(undefined, conn);
    });
  });
}

function prepareHandshakeDocument(authContext, callback) {
  var options = authContext.options;
  var compressors = options.compression && options.compression.compressors ? options.compression.compressors : [];
  var handshakeDoc = {
    ismaster: true,
    client: options.metadata || makeClientMetadata(options),
    compression: compressors
  };
  var credentials = authContext.credentials;

  if (credentials) {
    if (credentials.mechanism.match(/DEFAULT/i) && credentials.username) {
      Object.assign(handshakeDoc, {
        saslSupportedMechs: "".concat(credentials.source, ".").concat(credentials.username)
      });
      AUTH_PROVIDERS['scram-sha-256'].prepare(handshakeDoc, authContext, callback);
      return;
    }

    var authProvider = AUTH_PROVIDERS[credentials.mechanism];
    authProvider.prepare(handshakeDoc, authContext, callback);
    return;
  }

  callback(undefined, handshakeDoc);
}

var LEGAL_SSL_SOCKET_OPTIONS = ['pfx', 'key', 'passphrase', 'cert', 'ca', 'ciphers', 'NPNProtocols', 'ALPNProtocols', 'servername', 'ecdhCurve', 'secureProtocol', 'secureContext', 'session', 'minDHSize', 'crl', 'rejectUnauthorized'];

function parseConnectOptions(family, options) {
  var host = typeof options.host === 'string' ? options.host : 'localhost';

  if (host.indexOf('/') !== -1) {
    return {
      path: host
    };
  }

  var result = {
    family: family,
    host: host,
    port: typeof options.port === 'number' ? options.port : 27017,
    rejectUnauthorized: false
  };
  return result;
}

function parseSslOptions(family, options) {
  var result = parseConnectOptions(family, options); // Merge in valid SSL options

  for (var name in options) {
    if (options[name] != null && LEGAL_SSL_SOCKET_OPTIONS.indexOf(name) !== -1) {
      result[name] = options[name];
    }
  } // Override checkServerIdentity behavior


  if (options.checkServerIdentity === false) {
    // Skip the identiy check by retuning undefined as per node documents
    // https://nodejs.org/api/tls.html#tls_tls_connect_options_callback
    result.checkServerIdentity = function () {
      return undefined;
    };
  } else if (typeof options.checkServerIdentity === 'function') {
    result.checkServerIdentity = options.checkServerIdentity;
  } // Set default sni servername to be the same as host


  if (result.servername == null && !net.isIP(result.host)) {
    result.servername = result.host;
  }

  return result;
}

var SOCKET_ERROR_EVENTS = new Set(['error', 'close', 'timeout', 'parseError']);

function makeConnection(family, options, cancellationToken, _callback) {
  var useSsl = typeof options.ssl === 'boolean' ? options.ssl : false;
  var keepAlive = typeof options.keepAlive === 'boolean' ? options.keepAlive : true;
  var keepAliveInitialDelay = typeof options.keepAliveInitialDelay === 'number' ? options.keepAliveInitialDelay : 120000;
  var noDelay = typeof options.noDelay === 'boolean' ? options.noDelay : true;
  var connectionTimeout = typeof options.connectionTimeout === 'number' ? options.connectionTimeout : typeof options.connectTimeoutMS === 'number' ? options.connectTimeoutMS : 30000;
  var socketTimeout = typeof options.socketTimeout === 'number' ? options.socketTimeout : 0;
  var rejectUnauthorized = typeof options.rejectUnauthorized === 'boolean' ? options.rejectUnauthorized : true;

  if (keepAliveInitialDelay > socketTimeout) {
    keepAliveInitialDelay = Math.round(socketTimeout / 2);
  }

  var socket;

  var callback = function callback(err, ret) {
    if (err && socket) {
      socket.destroy();
    }

    _callback(err, ret);
  };

  try {
    if (useSsl) {
      socket = tls.connect(parseSslOptions(family, options));

      if (typeof socket.disableRenegotiation === 'function') {
        socket.disableRenegotiation();
      }
    } else {
      socket = net.createConnection(parseConnectOptions(family, options));
    }
  } catch (err) {
    return callback(err);
  }

  socket.setKeepAlive(keepAlive, keepAliveInitialDelay);
  socket.setTimeout(connectionTimeout);
  socket.setNoDelay(noDelay);
  var connectEvent = useSsl ? 'secureConnect' : 'connect';
  var cancellationHandler;

  function errorHandler(eventName) {
    return function (err) {
      SOCKET_ERROR_EVENTS.forEach(function (event) {
        return socket.removeAllListeners(event);
      });

      if (cancellationHandler) {
        cancellationToken.removeListener('cancel', cancellationHandler);
      }

      socket.removeListener(connectEvent, connectHandler);
      callback(connectionFailureError(eventName, err));
    };
  }

  function connectHandler() {
    SOCKET_ERROR_EVENTS.forEach(function (event) {
      return socket.removeAllListeners(event);
    });

    if (cancellationHandler) {
      cancellationToken.removeListener('cancel', cancellationHandler);
    }

    if (socket.authorizationError && rejectUnauthorized) {
      return callback(socket.authorizationError);
    }

    socket.setTimeout(socketTimeout);
    callback(null, socket);
  }

  SOCKET_ERROR_EVENTS.forEach(function (event) {
    return socket.once(event, errorHandler(event));
  });

  if (cancellationToken) {
    cancellationHandler = errorHandler('cancel');
    cancellationToken.once('cancel', cancellationHandler);
  }

  socket.once(connectEvent, connectHandler);
}

function connectionFailureError(type, err) {
  switch (type) {
    case 'error':
      return new MongoNetworkError(err);

    case 'timeout':
      return new MongoNetworkTimeoutError("connection timed out");

    case 'close':
      return new MongoNetworkError("connection closed");

    case 'cancel':
      return new MongoNetworkError("connection establishment was cancelled");

    default:
      return new MongoNetworkError("unknown network error");
  }
}

module.exports = connect;