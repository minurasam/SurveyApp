"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.NoticeMessage = exports.DataRowMessage = exports.CommandCompleteMessage = exports.ReadyForQueryMessage = exports.NotificationResponseMessage = exports.BackendKeyDataMessage = exports.AuthenticationMD5Password = exports.ParameterStatusMessage = exports.ParameterDescriptionMessage = exports.RowDescriptionMessage = exports.Field = exports.CopyResponse = exports.CopyDataMessage = exports.DatabaseError = exports.copyDone = exports.emptyQuery = exports.replicationStart = exports.portalSuspended = exports.noData = exports.closeComplete = exports.bindComplete = exports.parseComplete = void 0;
exports.parseComplete = {
    name: 'parseComplete',
    length: 5
};
exports.bindComplete = {
    name: 'bindComplete',
    length: 5
};
exports.closeComplete = {
    name: 'closeComplete',
    length: 5
};
exports.noData = {
    name: 'noData',
    length: 5
};
exports.portalSuspended = {
    name: 'portalSuspended',
    length: 5
};
exports.replicationStart = {
    name: 'replicationStart',
    length: 4
};
exports.emptyQuery = {
    name: 'emptyQuery',
    length: 4
};
exports.copyDone = {
    name: 'copyDone',
    length: 4
};
var DatabaseError = /** @class */ (function (_super) {
    __extends(DatabaseError, _super);
    function DatabaseError(message, length, name) {
        var _this = _super.call(this, message) || this;
        _this.length = length;
        _this.name = name;
        return _this;
    }
    return DatabaseError;
}(Error));
exports.DatabaseError = DatabaseError;
var CopyDataMessage = /** @class */ (function () {
    function CopyDataMessage(length, chunk) {
        this.length = length;
        this.chunk = chunk;
        this.name = 'copyData';
    }
    return CopyDataMessage;
}());
exports.CopyDataMessage = CopyDataMessage;
var CopyResponse = /** @class */ (function () {
    function CopyResponse(length, name, binary, columnCount) {
        this.length = length;
        this.name = name;
        this.binary = binary;
        this.columnTypes = new Array(columnCount);
    }
    return CopyResponse;
}());
exports.CopyResponse = CopyResponse;
var Field = /** @class */ (function () {
    function Field(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, format) {
        this.name = name;
        this.tableID = tableID;
        this.columnID = columnID;
        this.dataTypeID = dataTypeID;
        this.dataTypeSize = dataTypeSize;
        this.dataTypeModifier = dataTypeModifier;
        this.format = format;
    }
    return Field;
}());
exports.Field = Field;
var RowDescriptionMessage = /** @class */ (function () {
    function RowDescriptionMessage(length, fieldCount) {
        this.length = length;
        this.fieldCount = fieldCount;
        this.name = 'rowDescription';
        this.fields = new Array(this.fieldCount);
    }
    return RowDescriptionMessage;
}());
exports.RowDescriptionMessage = RowDescriptionMessage;
var ParameterDescriptionMessage = /** @class */ (function () {
    function ParameterDescriptionMessage(length, parameterCount) {
        this.length = length;
        this.parameterCount = parameterCount;
        this.name = 'parameterDescription';
        this.dataTypeIDs = new Array(this.parameterCount);
    }
    return ParameterDescriptionMessage;
}());
exports.ParameterDescriptionMessage = ParameterDescriptionMessage;
var ParameterStatusMessage = /** @class */ (function () {
    function ParameterStatusMessage(length, parameterName, parameterValue) {
        this.length = length;
        this.parameterName = parameterName;
        this.parameterValue = parameterValue;
        this.name = 'parameterStatus';
    }
    return ParameterStatusMessage;
}());
exports.ParameterStatusMessage = ParameterStatusMessage;
var AuthenticationMD5Password = /** @class */ (function () {
    function AuthenticationMD5Password(length, salt) {
        this.length = length;
        this.salt = salt;
        this.name = 'authenticationMD5Password';
    }
    return AuthenticationMD5Password;
}());
exports.AuthenticationMD5Password = AuthenticationMD5Password;
var BackendKeyDataMessage = /** @class */ (function () {
    function BackendKeyDataMessage(length, processID, secretKey) {
        this.length = length;
        this.processID = processID;
        this.secretKey = secretKey;
        this.name = 'backendKeyData';
    }
    return BackendKeyDataMessage;
}());
exports.BackendKeyDataMessage = BackendKeyDataMessage;
var NotificationResponseMessage = /** @class */ (function () {
    function NotificationResponseMessage(length, processId, channel, payload) {
        this.length = length;
        this.processId = processId;
        this.channel = channel;
        this.payload = payload;
        this.name = 'notification';
    }
    return NotificationResponseMessage;
}());
exports.NotificationResponseMessage = NotificationResponseMessage;
var ReadyForQueryMessage = /** @class */ (function () {
    function ReadyForQueryMessage(length, status) {
        this.length = length;
        this.status = status;
        this.name = 'readyForQuery';
    }
    return ReadyForQueryMessage;
}());
exports.ReadyForQueryMessage = ReadyForQueryMessage;
var CommandCompleteMessage = /** @class */ (function () {
    function CommandCompleteMessage(length, text) {
        this.length = length;
        this.text = text;
        this.name = 'commandComplete';
    }
    return CommandCompleteMessage;
}());
exports.CommandCompleteMessage = CommandCompleteMessage;
var DataRowMessage = /** @class */ (function () {
    function DataRowMessage(length, fields) {
        this.length = length;
        this.fields = fields;
        this.name = 'dataRow';
        this.fieldCount = fields.length;
    }
    return DataRowMessage;
}());
exports.DataRowMessage = DataRowMessage;
var NoticeMessage = /** @class */ (function () {
    function NoticeMessage(length, message) {
        this.length = length;
        this.message = message;
        this.name = 'notice';
    }
    return NoticeMessage;
}());
exports.NoticeMessage = NoticeMessage;
