"use strict";
exports.__esModule = true;
exports.BufferReader = void 0;
var emptyBuffer = Buffer.allocUnsafe(0);
var BufferReader = /** @class */ (function () {
    function BufferReader(offset) {
        if (offset === void 0) { offset = 0; }
        this.offset = offset;
        this.buffer = emptyBuffer;
        // TODO(bmc): support non-utf8 encoding?
        this.encoding = 'utf-8';
    }
    BufferReader.prototype.setBuffer = function (offset, buffer) {
        this.offset = offset;
        this.buffer = buffer;
    };
    BufferReader.prototype.int16 = function () {
        var result = this.buffer.readInt16BE(this.offset);
        this.offset += 2;
        return result;
    };
    BufferReader.prototype.byte = function () {
        var result = this.buffer[this.offset];
        this.offset++;
        return result;
    };
    BufferReader.prototype.int32 = function () {
        var result = this.buffer.readInt32BE(this.offset);
        this.offset += 4;
        return result;
    };
    BufferReader.prototype.string = function (length) {
        var result = this.buffer.toString(this.encoding, this.offset, this.offset + length);
        this.offset += length;
        return result;
    };
    BufferReader.prototype.cstring = function () {
        var start = this.offset;
        var end = start;
        while (this.buffer[end++] !== 0) { }
        this.offset = end;
        return this.buffer.toString(this.encoding, start, end - 1);
    };
    BufferReader.prototype.bytes = function (length) {
        var result = this.buffer.slice(this.offset, this.offset + length);
        this.offset += length;
        return result;
    };
    return BufferReader;
}());
exports.BufferReader = BufferReader;
