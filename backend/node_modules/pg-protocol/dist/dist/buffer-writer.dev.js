"use strict"; //binary data writer tuned for encoding binary specific to the postgres binary protocol

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Writer = void 0;

var Writer =
/*#__PURE__*/
function () {
  function Writer() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;

    _classCallCheck(this, Writer);

    this.size = size;
    this.offset = 5;
    this.headerPosition = 0;
    this.buffer = Buffer.allocUnsafe(size);
  }

  _createClass(Writer, [{
    key: "ensure",
    value: function ensure(size) {
      var remaining = this.buffer.length - this.offset;

      if (remaining < size) {
        var oldBuffer = this.buffer; // exponential growth factor of around ~ 1.5
        // https://stackoverflow.com/questions/2269063/buffer-growth-strategy

        var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;
        this.buffer = Buffer.allocUnsafe(newSize);
        oldBuffer.copy(this.buffer);
      }
    }
  }, {
    key: "addInt32",
    value: function addInt32(num) {
      this.ensure(4);
      this.buffer[this.offset++] = num >>> 24 & 0xff;
      this.buffer[this.offset++] = num >>> 16 & 0xff;
      this.buffer[this.offset++] = num >>> 8 & 0xff;
      this.buffer[this.offset++] = num >>> 0 & 0xff;
      return this;
    }
  }, {
    key: "addInt16",
    value: function addInt16(num) {
      this.ensure(2);
      this.buffer[this.offset++] = num >>> 8 & 0xff;
      this.buffer[this.offset++] = num >>> 0 & 0xff;
      return this;
    }
  }, {
    key: "addCString",
    value: function addCString(string) {
      if (!string) {
        this.ensure(1);
      } else {
        var len = Buffer.byteLength(string);
        this.ensure(len + 1); // +1 for null terminator

        this.buffer.write(string, this.offset, 'utf-8');
        this.offset += len;
      }

      this.buffer[this.offset++] = 0; // null terminator

      return this;
    }
  }, {
    key: "addString",
    value: function addString() {
      var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var len = Buffer.byteLength(string);
      this.ensure(len);
      this.buffer.write(string, this.offset);
      this.offset += len;
      return this;
    }
  }, {
    key: "add",
    value: function add(otherBuffer) {
      this.ensure(otherBuffer.length);
      otherBuffer.copy(this.buffer, this.offset);
      this.offset += otherBuffer.length;
      return this;
    }
  }, {
    key: "join",
    value: function join(code) {
      if (code) {
        this.buffer[this.headerPosition] = code; //length is everything in this packet minus the code

        var length = this.offset - (this.headerPosition + 1);
        this.buffer.writeInt32BE(length, this.headerPosition + 1);
      }

      return this.buffer.slice(code ? 0 : 5, this.offset);
    }
  }, {
    key: "flush",
    value: function flush(code) {
      var result = this.join(code);
      this.offset = 5;
      this.headerPosition = 0;
      this.buffer = Buffer.allocUnsafe(this.size);
      return result;
    }
  }]);

  return Writer;
}();

exports.Writer = Writer;