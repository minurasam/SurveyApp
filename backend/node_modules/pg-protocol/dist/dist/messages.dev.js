"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoticeMessage = exports.DataRowMessage = exports.CommandCompleteMessage = exports.ReadyForQueryMessage = exports.NotificationResponseMessage = exports.BackendKeyDataMessage = exports.AuthenticationMD5Password = exports.ParameterStatusMessage = exports.ParameterDescriptionMessage = exports.RowDescriptionMessage = exports.Field = exports.CopyResponse = exports.CopyDataMessage = exports.DatabaseError = exports.copyDone = exports.emptyQuery = exports.replicationStart = exports.portalSuspended = exports.noData = exports.closeComplete = exports.bindComplete = exports.parseComplete = void 0;
exports.parseComplete = {
  name: 'parseComplete',
  length: 5
};
exports.bindComplete = {
  name: 'bindComplete',
  length: 5
};
exports.closeComplete = {
  name: 'closeComplete',
  length: 5
};
exports.noData = {
  name: 'noData',
  length: 5
};
exports.portalSuspended = {
  name: 'portalSuspended',
  length: 5
};
exports.replicationStart = {
  name: 'replicationStart',
  length: 4
};
exports.emptyQuery = {
  name: 'emptyQuery',
  length: 4
};
exports.copyDone = {
  name: 'copyDone',
  length: 4
};

var DatabaseError =
/*#__PURE__*/
function (_Error) {
  _inherits(DatabaseError, _Error);

  function DatabaseError(message, length, name) {
    var _this;

    _classCallCheck(this, DatabaseError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DatabaseError).call(this, message));
    _this.length = length;
    _this.name = name;
    return _this;
  }

  return DatabaseError;
}(_wrapNativeSuper(Error));

exports.DatabaseError = DatabaseError;

var CopyDataMessage = function CopyDataMessage(length, chunk) {
  _classCallCheck(this, CopyDataMessage);

  this.length = length;
  this.chunk = chunk;
  this.name = 'copyData';
};

exports.CopyDataMessage = CopyDataMessage;

var CopyResponse = function CopyResponse(length, name, binary, columnCount) {
  _classCallCheck(this, CopyResponse);

  this.length = length;
  this.name = name;
  this.binary = binary;
  this.columnTypes = new Array(columnCount);
};

exports.CopyResponse = CopyResponse;

var Field = function Field(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, format) {
  _classCallCheck(this, Field);

  this.name = name;
  this.tableID = tableID;
  this.columnID = columnID;
  this.dataTypeID = dataTypeID;
  this.dataTypeSize = dataTypeSize;
  this.dataTypeModifier = dataTypeModifier;
  this.format = format;
};

exports.Field = Field;

var RowDescriptionMessage = function RowDescriptionMessage(length, fieldCount) {
  _classCallCheck(this, RowDescriptionMessage);

  this.length = length;
  this.fieldCount = fieldCount;
  this.name = 'rowDescription';
  this.fields = new Array(this.fieldCount);
};

exports.RowDescriptionMessage = RowDescriptionMessage;

var ParameterDescriptionMessage = function ParameterDescriptionMessage(length, parameterCount) {
  _classCallCheck(this, ParameterDescriptionMessage);

  this.length = length;
  this.parameterCount = parameterCount;
  this.name = 'parameterDescription';
  this.dataTypeIDs = new Array(this.parameterCount);
};

exports.ParameterDescriptionMessage = ParameterDescriptionMessage;

var ParameterStatusMessage = function ParameterStatusMessage(length, parameterName, parameterValue) {
  _classCallCheck(this, ParameterStatusMessage);

  this.length = length;
  this.parameterName = parameterName;
  this.parameterValue = parameterValue;
  this.name = 'parameterStatus';
};

exports.ParameterStatusMessage = ParameterStatusMessage;

var AuthenticationMD5Password = function AuthenticationMD5Password(length, salt) {
  _classCallCheck(this, AuthenticationMD5Password);

  this.length = length;
  this.salt = salt;
  this.name = 'authenticationMD5Password';
};

exports.AuthenticationMD5Password = AuthenticationMD5Password;

var BackendKeyDataMessage = function BackendKeyDataMessage(length, processID, secretKey) {
  _classCallCheck(this, BackendKeyDataMessage);

  this.length = length;
  this.processID = processID;
  this.secretKey = secretKey;
  this.name = 'backendKeyData';
};

exports.BackendKeyDataMessage = BackendKeyDataMessage;

var NotificationResponseMessage = function NotificationResponseMessage(length, processId, channel, payload) {
  _classCallCheck(this, NotificationResponseMessage);

  this.length = length;
  this.processId = processId;
  this.channel = channel;
  this.payload = payload;
  this.name = 'notification';
};

exports.NotificationResponseMessage = NotificationResponseMessage;

var ReadyForQueryMessage = function ReadyForQueryMessage(length, status) {
  _classCallCheck(this, ReadyForQueryMessage);

  this.length = length;
  this.status = status;
  this.name = 'readyForQuery';
};

exports.ReadyForQueryMessage = ReadyForQueryMessage;

var CommandCompleteMessage = function CommandCompleteMessage(length, text) {
  _classCallCheck(this, CommandCompleteMessage);

  this.length = length;
  this.text = text;
  this.name = 'commandComplete';
};

exports.CommandCompleteMessage = CommandCompleteMessage;

var DataRowMessage = function DataRowMessage(length, fields) {
  _classCallCheck(this, DataRowMessage);

  this.length = length;
  this.fields = fields;
  this.name = 'dataRow';
  this.fieldCount = fields.length;
};

exports.DataRowMessage = DataRowMessage;

var NoticeMessage = function NoticeMessage(length, message) {
  _classCallCheck(this, NoticeMessage);

  this.length = length;
  this.message = message;
  this.name = 'notice';
};

exports.NoticeMessage = NoticeMessage;