'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

exports.parse = function (source, transform) {
  return new ArrayParser(source, transform).parse();
};

var ArrayParser =
/*#__PURE__*/
function () {
  function ArrayParser(source, transform) {
    _classCallCheck(this, ArrayParser);

    this.source = source;
    this.transform = transform || identity;
    this.position = 0;
    this.entries = [];
    this.recorded = [];
    this.dimension = 0;
  }

  _createClass(ArrayParser, [{
    key: "isEof",
    value: function isEof() {
      return this.position >= this.source.length;
    }
  }, {
    key: "nextCharacter",
    value: function nextCharacter() {
      var character = this.source[this.position++];

      if (character === '\\') {
        return {
          value: this.source[this.position++],
          escaped: true
        };
      }

      return {
        value: character,
        escaped: false
      };
    }
  }, {
    key: "record",
    value: function record(character) {
      this.recorded.push(character);
    }
  }, {
    key: "newEntry",
    value: function newEntry(includeEmpty) {
      var entry;

      if (this.recorded.length > 0 || includeEmpty) {
        entry = this.recorded.join('');

        if (entry === 'NULL' && !includeEmpty) {
          entry = null;
        }

        if (entry !== null) entry = this.transform(entry);
        this.entries.push(entry);
        this.recorded = [];
      }
    }
  }, {
    key: "consumeDimensions",
    value: function consumeDimensions() {
      if (this.source[0] === '[') {
        while (!this.isEof()) {
          var _char = this.nextCharacter();

          if (_char.value === '=') break;
        }
      }
    }
  }, {
    key: "parse",
    value: function parse(nested) {
      var character, parser, quote;
      this.consumeDimensions();

      while (!this.isEof()) {
        character = this.nextCharacter();

        if (character.value === '{' && !quote) {
          this.dimension++;

          if (this.dimension > 1) {
            parser = new ArrayParser(this.source.substr(this.position - 1), this.transform);
            this.entries.push(parser.parse(true));
            this.position += parser.position - 2;
          }
        } else if (character.value === '}' && !quote) {
          this.dimension--;

          if (!this.dimension) {
            this.newEntry();
            if (nested) return this.entries;
          }
        } else if (character.value === '"' && !character.escaped) {
          if (quote) this.newEntry(true);
          quote = !quote;
        } else if (character.value === ',' && !quote) {
          this.newEntry();
        } else {
          this.record(character.value);
        }
      }

      if (this.dimension !== 0) {
        throw new Error('array dimension not balanced');
      }

      return this.entries;
    }
  }]);

  return ArrayParser;
}();

function identity(value) {
  return value;
}