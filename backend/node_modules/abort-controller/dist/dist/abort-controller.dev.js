/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * See LICENSE file in root directory for full license.
 */
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var eventTargetShim = require('event-target-shim');
/**
 * The signal class.
 * @see https://dom.spec.whatwg.org/#abortsignal
 */


var AbortSignal =
/*#__PURE__*/
function (_eventTargetShim$Even) {
  _inherits(AbortSignal, _eventTargetShim$Even);

  /**
   * AbortSignal cannot be constructed directly.
   */
  function AbortSignal() {
    var _this;

    _classCallCheck(this, AbortSignal);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AbortSignal).call(this));
    throw new TypeError("AbortSignal cannot be constructed directly");
    return _this;
  }
  /**
   * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
   */


  _createClass(AbortSignal, [{
    key: "aborted",
    get: function get() {
      var aborted = abortedFlags.get(this);

      if (typeof aborted !== "boolean") {
        throw new TypeError("Expected 'this' to be an 'AbortSignal' object, but got ".concat(this === null ? "null" : _typeof(this)));
      }

      return aborted;
    }
  }]);

  return AbortSignal;
}(eventTargetShim.EventTarget);

eventTargetShim.defineEventAttribute(AbortSignal.prototype, "abort");
/**
 * Create an AbortSignal object.
 */

function createAbortSignal() {
  var signal = Object.create(AbortSignal.prototype);
  eventTargetShim.EventTarget.call(signal);
  abortedFlags.set(signal, false);
  return signal;
}
/**
 * Abort a given signal.
 */


function abortSignal(signal) {
  if (abortedFlags.get(signal) !== false) {
    return;
  }

  abortedFlags.set(signal, true);
  signal.dispatchEvent({
    type: "abort"
  });
}
/**
 * Aborted flag for each instances.
 */


var abortedFlags = new WeakMap(); // Properties should be enumerable.

Object.defineProperties(AbortSignal.prototype, {
  aborted: {
    enumerable: true
  }
}); // `toString()` should return `"[object AbortSignal]"`

if (typeof Symbol === "function" && _typeof(Symbol.toStringTag) === "symbol") {
  Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
    configurable: true,
    value: "AbortSignal"
  });
}
/**
 * The AbortController.
 * @see https://dom.spec.whatwg.org/#abortcontroller
 */


var AbortController =
/*#__PURE__*/
function () {
  /**
   * Initialize this controller.
   */
  function AbortController() {
    _classCallCheck(this, AbortController);

    signals.set(this, createAbortSignal());
  }
  /**
   * Returns the `AbortSignal` object associated with this object.
   */


  _createClass(AbortController, [{
    key: "abort",

    /**
     * Abort and signal to any observers that the associated activity is to be aborted.
     */
    value: function abort() {
      abortSignal(getSignal(this));
    }
  }, {
    key: "signal",
    get: function get() {
      return getSignal(this);
    }
  }]);

  return AbortController;
}();
/**
 * Associated signals.
 */


var signals = new WeakMap();
/**
 * Get the associated signal of a given controller.
 */

function getSignal(controller) {
  var signal = signals.get(controller);

  if (signal == null) {
    throw new TypeError("Expected 'this' to be an 'AbortController' object, but got ".concat(controller === null ? "null" : _typeof(controller)));
  }

  return signal;
} // Properties should be enumerable.


Object.defineProperties(AbortController.prototype, {
  signal: {
    enumerable: true
  },
  abort: {
    enumerable: true
  }
});

if (typeof Symbol === "function" && _typeof(Symbol.toStringTag) === "symbol") {
  Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {
    configurable: true,
    value: "AbortController"
  });
}

exports.AbortController = AbortController;
exports.AbortSignal = AbortSignal;
exports["default"] = AbortController;
module.exports = AbortController;
module.exports.AbortController = module.exports["default"] = AbortController;
module.exports.AbortSignal = AbortSignal;